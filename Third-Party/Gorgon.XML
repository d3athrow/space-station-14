<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gorgon</name>
    </assembly>
    <members>
        <member name="T:GorgonLibrary.Internal.IDeviceStateObject">
            <summary>
            Interface for objects so they can handle device resets and loss.
            </summary>
            <remarks>
            When the app is in fullscreen mode, a task switch will cause the device to be put into 
            a lost state.  Some resources (e.g. resources created in D3DPOOL_DEFAULT) will end up being
            lost as well, and we will need a way to release these objects and restore them when necessary.  
            Objects should only implement this interface when a device loss/reset affects the resources
            contained within the object.
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Internal.IDeviceStateObject.DeviceLost">
            <summary>
            Function called when the device is in a lost state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.IDeviceStateObject.DeviceReset">
            <summary>
            Function called when the device is reset.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.IDeviceStateObject.ForceRelease">
            <summary>
            Function to force the loss of the objects data.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Range`1">
            <summary>
            Value type to indicate a range of values.
            </summary>
            <typeparam name="T">Type of data for the range.</typeparam>
        </member>
        <member name="F:GorgonLibrary.Range`1.Start">
            <summary>
            Starting point in the range.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Range`1.End">
            <summary>
            Ending point in the range.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Range`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Range`1"/> struct.
            </summary>
            <param name="start">The starting value.</param>
            <param name="end">The ending value.</param>
        </member>
        <member name="T:GorgonLibrary.Graphics.StaticTextSprite">
            <summary>
            Object representing a static text sprite.
            </summary>
            <remarks>This sprite type is used optimize text display by keeping the text static.  Using dynamic text in this object will greatly hinder performance.
            <para>This object is now obsolete and should not be used.  It will be removed in the next version.  Please use the <see cref="T:GorgonLibrary.Graphics.Batch">Batch</see> 
            object instead.</para></remarks>
        </member>
        <member name="T:GorgonLibrary.Graphics.Renderable">
            <summary>
            Object representing a renderable object.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.NamedObject">
            <summary>
            Abstract Class representing a named object.
            </summary>
            <remarks>Classes inheriting from this object will have a name associated with it.  This is handy when dealing with unique objects within a collection.</remarks>
        </member>
        <member name="M:GorgonLibrary.Internal.NamedObject.Equals(System.Object)">
            <summary>
            Function to determine if this named object is the same as another named object.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.NamedObject.GetHashCode">
            <summary>
            Function to return the hash code for this object.
            </summary>
            <remarks>
            A hash code is used by dictionaries and hash tables to determine uniqueness of an object within those collections.
            <para>
            Hash values are related to their types, and as such should use one or more of its instance fields hash codes to build the hash code.
            </para>
            </remarks>
            <returns>A 32 bit integer representing the hash code.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.NamedObject.ToString">
            <summary>
            Function to return the string representation of this object.
            </summary>
            <returns>A string containing the name of the type and the name stored within the object.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.NamedObject.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            Since the <seealso cref="P:GorgonLibrary.Internal.NamedObject.Name"></seealso><see cref="P:GorgonLibrary.Internal.NamedObject.Name">Name</see> property is read-only, the name for an object must be passed to this constructor.  
            <para>Typically it will be difficult to rename an object that resides in a collection with its name as the key, thus making the property writable would be counter-productive.</para>
            	<para>However, objects that descend from this object may choose to implement their own renaming scheme if they so choose.</para>
            	<para>Ensure that the name parameter has a non-null string or is not a zero-length string.  Failing to do so will raise a <see cref="T:System.ArgumentNullException">ArgumentNullException</see>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the name parameter is NULL or a zero length string.</exception>
            <param name="name">Name for this object.</param>
        </member>
        <member name="P:GorgonLibrary.Internal.NamedObject.Name">
            <summary>
            Read-only property to return the name of this object.
            </summary>
            <remarks>The name of an object need not be unique, however if it is used as a key value for a collection then it should be unique.</remarks>
            <value>A <see cref="T:System.String">string</see> containing the name of this object.</value>
        </member>
        <member name="T:GorgonLibrary.Graphics.IRenderableStates">
            <summary>
            Interface containing common renderable properties.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.HorizontalWrapMode">
            <summary>
            Property to set or return the horizontal wrapping mode to use.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.VerticalWrapMode">
            <summary>
            Property to set or return the vertical wrapping mode to use.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.BorderColor">
            <summary>
            Property to set or return the color of the border when the wrapping mode is set to Border.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.Smoothing">
            <summary>
            Property to set or return the type of smoothing for the sprites.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.AlphaMaskFunction">
            <summary>
            Property to set or return the function used for alpha masking.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.AlphaMaskValue">
            <summary>
            Property to set or return the alpha value used for alpha masking.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.BlendingMode">
            <summary>
            Property to set or return the blending mode.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.SourceBlend">
            <summary>
            Property to set or return the source blending operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.DestinationBlend">
            <summary>
            Property to set or return the destination blending operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.SourceBlendAlpha">
            <summary>
            Property to set or return the source blend alpha
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.DestinationBlendAlpha">
            <summary>
            Property to set or return the destination blend alpha
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.StencilEnabled">
            <summary>
            Property to set or return whether to enable the use of the stencil buffer or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.StencilReference">
            <summary>
            Property to set or return the reference value for the stencil buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.StencilMask">
            <summary>
            Property to set or return the mask value for the stencil buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.StencilPassOperation">
            <summary>
            Property to set or return the operation for passing stencil values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.StencilFailOperation">
            <summary>
            Property to set or return the operation for the failing stencil values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.StencilZFailOperation">
            <summary>
            Property to set or return the stencil operation for the failing depth values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.StencilCompare">
            <summary>
            Property to set or return the stencil comparison function.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.UseIndices">
            <summary>
            Property to return whether to use an index buffer or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.PrimitiveStyle">
            <summary>
            Property to return the primitive style for the object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.WrapMode">
            <summary>
            Property to set or return the wrapping mode to use.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.DepthWriteEnabled">
            <summary>
            Property to set or return whether to enable the depth buffer (if applicable) writing or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.DepthTestFunction">
            <summary>
            Property to set or return the depth buffer (if applicable) testing comparison function.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.DepthBufferBias">
            <summary>
            Property to set or return (if applicable) the depth buffer bias.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IRenderableStates.CullingMode">
            <summary>
            Property to set or return the culling mode.
            </summary>
        </member>
        <member name="T:GorgonLibrary.ICloneable`1">
            <summary>
            Interface that defines an object that can clone itself.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <remarks>This is like <see cref="T:System.ICloneable"/> only except that it uses a generic type.  Why this wasn't added in .NET 2.0 I'll never know.</remarks>
        </member>
        <member name="M:GorgonLibrary.ICloneable`1.Clone">
            <summary>
            Function to create a clone of an instance of an object.
            </summary>
            <returns>A clone of the object.</returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.IAnimated">
            <summary>
            An interface to expose methods for animated objects.
            </summary>
            <remarks>All objects that are meant to be animated using the <see cref="T:GorgonLibrary.Graphics.Animation">Gorgon animation</see> interface have to implement IAnimated.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.IAnimated.ApplyAnimations">
            <summary>
            Function to apply the current time in an animation to the objects animated properties.
            </summary>
            <remarks>This function will do the actual work of updating the properties (marked with the <see cref="T:GorgonLibrary.Graphics.AnimatedAttribute">Animated</see> attribute).  
            It does this by applying the values at the current interpolated (or actual depending on time) key frame to the property that's bound to the track.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.IAnimated.Animations">
            <summary>
            Property to return a list of animations attached to the object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.SetAABB(GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Function to set the AABB for the object.
            </summary>
            <param name="min">Minimum coordinates for the AABB.</param>
            <param name="max">Maximum coordinates for the AABB.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.SetAABB(System.Drawing.RectangleF)">
            <summary>
            Function to set the AABB for the object.
            </summary>
            <param name="rect">The rectangle to use as the AABB.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.InitializeVertices(System.Int32)">
            <summary>
            Function to initialize the vertices for the object.
            </summary>
            <param name="vertexCount">Number of vertices for the object.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.NotifyParent">
            <summary>
            Function to notify that we need an update from the parent.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.IsImageCurrent(GorgonLibrary.Graphics.Image)">
            <summary>
            Function to return whether the specified image is currently set.
            </summary>
            <param name="image">Image to test.</param>
            <returns>TRUE if set, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.SetCurrentImage(GorgonLibrary.Graphics.Image)">
            <summary>
            Function to set the current image.
            </summary>
            <param name="image">Image to set.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.BeginRendering(System.Boolean)">
            <summary>
            Function to start the rendering process.
            </summary>
            <param name="flush">TRUE to flush the contents of the child renderable buffers immediately after rendering is complete, FALSE to hold the contents until the end of frame or state change.</param>
            <remarks>Setting flush to TRUE can slow the rendering process down significantly, only use when absolutely necessary.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.FlushToRenderer">
            <summary>
            Function to flush queued data to the renderer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.WriteVertexData(System.Int32,System.Int32)">
            <summary>
            Function to write the vertex data to the buffer.
            </summary>
            <param name="start">Starting index.</param>
            <param name="length">Number of vertices.</param>
            <returns>The number of vertices written to the buffer thus far.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.EndRendering(System.Boolean)">
            <summary>
            Function to end the rendering process.
            </summary>
            <param name="flush">TRUE to flush the contents of the buffers immediately after rendering is complete, FALSE to hold the contents until the end of frame or state change.</param>
            <remarks>Setting flush to TRUE can slow the rendering process down significantly, only use when absolutely necessary.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.GetParentTransform">
            <summary>
            Function to get the parent transform.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.UpdateDimensions">
            <summary>
            Function to update the dimensions for an object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.UpdateTransform">
            <summary>
            Function to update a transformation to the object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.SetBlendMode(GorgonLibrary.Graphics.BlendingModes)">
            <summary>
            Function to set the blending modes.
            </summary>
            <param name="value">Blending value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.UpdateImageLayer">
            <summary>
            Function to update the source image positioning.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.SetParent(GorgonLibrary.Graphics.Renderable)">
            <summary>
            Function to set the parent of this object.
            </summary>
            <param name="parent">Parent of the object.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.GetVertices">
            <summary>
            Function to return the number of vertices for this object.
            </summary>
            <returns>An array of vertices used for this renderable.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.UpdateChildren">
            <summary>
            Function to update children.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.SetAxis(System.Single,System.Single)">
            <summary>
            Function to set the anchor axis of the sprite.
            </summary>
            <param name="x">Horizontal position.</param>
            <param name="y">Vertical position.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.SetScale(System.Single,System.Single)">
            <summary>
            Function to set the scale of the sprite.
            </summary>
            <param name="x">Horizontal scale.</param>
            <param name="y">Vertical scale.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.SetPosition(System.Single,System.Single)">
            <summary>
            Function to update the object position.
            </summary>
            <param name="x">Horizontal position of the object.</param>
            <param name="y">Vertical position of the object.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.SetSize(System.Single,System.Single)">
            <summary>
            Function to update the size of the object.
            </summary>
            <param name="width">Width of the object.</param>
            <param name="height">Height of the object.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.Draw(System.Boolean)">
            <summary>
            Function to draw the object.
            </summary>
            <param name="flush">TRUE to flush the buffers after drawing, FALSE to only flush on state change.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.Draw">
            <summary>
            Function to draw the object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.Refresh">
            <summary>
            Function to force an update on the object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.UpdateAABB">
            <summary>
            Function to update AABB.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the object.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderable.ApplyAnimations">
            <summary>
            Function to apply the current time in an animation to the objects animated properties.
            </summary>
            <remarks>This function will do the actual work of updating the properties (marked with the <see cref="T:GorgonLibrary.Graphics.AnimatedAttribute">Animated</see> attribute).
            It does this by applying the values at the current interpolated (or actual depending on time) key frame to the property that's bound to the track.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.ParentPosition">
            <summary>
            Property to set or return the parent position.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.ParentRotation">
            <summary>
            Property to set or return the parent rotation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.ParentScale">
            <summary>
            Property to set or return the parent scale.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.IsSizeUpdated">
            <summary>
            Property to set or return whether the size of the object has been updated.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.IsImageUpdated">
            <summary>
            Property to set or return whether image properties have been updated.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.Vertices">
            <summary>
            Property to return the vertices for this object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.IsAABBUpdated">
            <summary>
            Property to set or return whether the AABB for the object needs updating.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.BufferSize">
            <summary>
            Property to return the size of the buffer that will hold the renderable contents.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.BorderColor">
            <summary>
            Property to set or return the color of the border when the wrapping mode is set to Border.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.StencilEnabled">
            <summary>
            Property to set or return whether to enable the use of the stencil buffer or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.StencilReference">
            <summary>
            Property to set or return the reference value for the stencil buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.StencilMask">
            <summary>
            Property to set or return the mask value for the stencil buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.StencilPassOperation">
            <summary>
            Property to set or return the operation for passing stencil values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.StencilFailOperation">
            <summary>
            Property to set or return the operation for the failing stencil values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.StencilZFailOperation">
            <summary>
            Property to set or return the stencil operation for the failing depth values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.StencilCompare">
            <summary>
            Property to set or return the stencil comparison function.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.SourceBlend">
            <summary>
            Property to set or return the source blending operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.DestinationBlend">
            <summary>
            Property to set or return the destination blending operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.SourceBlendAlpha">
            <summary>
            Property to set or return the source blending operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.DestinationBlendAlpha">
            <summary>
            Property to set or return the destination blending operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.WrapMode">
            <summary>
            Property to set or return the wrapping mode to use.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.HorizontalWrapMode">
            <summary>
            Property to set or return the horizontal wrapping mode to use.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.VerticalWrapMode">
            <summary>
            Property to set or return the vertical wrapping mode to use.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.InheritRotation">
            <summary>
            Property to set or return whether we inherit rotation from our parent renderable.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.InheritScale">
            <summary>
            Property to set or return whether we inherit scale from our parent renderable.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.InheritSmoothing">
            <summary>
            Property to set or return whether we inherit smoothing from the layer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.InheritBlending">
            <summary>
            Property to set or return whether we inherit blending from the layer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.InheritAlphaBlending">
            <summary>
            Property to set or return whether we inherit alpha blending from the layer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.InheritAlphaMaskFunction">
            <summary>
            Property to set or return whether we inherit the alpha mask function from the layer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.InheritAlphaMaskValue">
            <summary>
            Property to set or return whether we inherit the alpha mask value from the layer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.InheritHorizontalWrapping">
            <summary>
            Property to set or return whether we inherit the horizontal wrapping from the layer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.InheritVerticalWrapping">
            <summary>
            Property to set or return whether we inherit the vertical wrapping from the layer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.InheritStencilEnabled">
            <summary>
            Property to set or return whether we inherit the stencil enabled flag from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.InheritStencilReference">
            <summary>
            Property to set or return whether we inherit the stencil reference from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.InheritStencilMask">
            <summary>
            Property to set or return whether we inherit the stencil mask from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.InheritStencilPassOperation">
            <summary>
            Property to set or return whether we inherit the stencil pass operation from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.InheritStencilFailOperation">
            <summary>
            Property to set or return whether we inherit the stencil failed operation from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.InheritStencilZFailOperation">
            <summary>
            Property to set or return whether we inherit the stencil z-failed operation from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.InheritStencilCompare">
            <summary>
            Property to set or return whether we inherit the stencil compare from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.InheritDepthBias">
            <summary>
            Property to set or return whether we inherit the depth bias.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.InheritDepthWriteEnabled">
            <summary>
            Property to set or return whether we inherit the depth writing enabled flag.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.InheritDepthTestFunction">
            <summary>
            Property to set or return whether we inherit the depth testing function.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.Smoothing">
            <summary>
            Property to set or return the type of smoothing for the sprites.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.AlphaMaskFunction">
            <summary>
            Property to set or return the function used for alpha masking.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.AlphaMaskValue">
            <summary>
            Property to set or return the alpha value used for alpha masking.
            </summary>
            <remarks>Animations can be applied to this property.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.BlendingMode">
            <summary>
            Property to set the blending mode.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.DepthWriteEnabled">
            <summary>
            Property to set or return whether to enable the depth buffer (if applicable) writing or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.DepthBufferBias">
            <summary>
            Property to set or return (if applicable) the depth buffer bias.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.DepthTestFunction">
            <summary>
            Property to set or return the depth buffer (if applicable) testing comparison function.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.AABB">
            <summary>
            Property to return the AABB for the object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.ImageOffset">
            <summary>
            Property to set or return the offset within the source image to start drawing from.
            </summary>
            <remarks>Animations can be applied to this property.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.Depth">
            <summary>
            Property to set or return the depth of the renderable object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.FinalPosition">
            <summary>
            Property to return the final position.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.FinalScale">
            <summary>
            Property to return the final scale.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.FinalRotation">
            <summary>
            Property to return the final rotation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.Parent">
            <summary>
            Property to return the parent of this object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.Children">
            <summary>
            Property to return the children of this object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.UniformScale">
            <summary>
            Property to set or return a uniform scale across the X and Y axis.
            </summary>
            <remarks>Animations can be applied to this property.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.PrimitiveStyle">
            <summary>
            Property to return the primitive style for the object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.UseIndices">
            <summary>
            Property to return whether to use an index buffer or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.Color">
            <summary>
            Property to set or return the color.
            </summary>		
            <remarks>Animations can be applied to this property.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.Opacity">
            <summary>
            Property to set or return the opacity.
            </summary>		
            <remarks>Animations can be applied to this property.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.Axis">
            <summary>
            Property to set or return the axis of the sprite.
            </summary>
            <remarks>Animations can be applied to this property.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.Scale">
            <summary>
            Property to set or return the scale of the sprite.
            </summary>
            <remarks>Animations can be applied to this property.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.ScaledDimensions">
            <summary>
            Property to set or return the size of the object with scaling applied.
            </summary>
            <remarks>Animations can be applied to this property.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.ScaledWidth">
            <summary>
            Property to set or return the scaled width of the object.
            </summary>
            <remarks>Animations can be applied to this property.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.ScaledHeight">
            <summary>
            Property to set or return the scaled height of the object.
            </summary>
            <remarks>Animations can be applied to this property.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.Image">
            <summary>
            Property to set or return the image that this object is bound with.
            </summary>
            <remarks>Animations can be applied to this property.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.Position">
            <summary>
            Property to set or return the position of the object.
            </summary>
            <remarks>Animations can be applied to this property.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.Rotation">
            <summary>
            Property to set or return the rotation angle in degrees.
            </summary>
            <remarks>Animations can be applied to this property.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.Size">
            <summary>
            Property to set or return the size of the object.
            </summary>
            <remarks>Animations can be applied to this property.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.Width">
            <summary>
            Property to set or return the width of the object.
            </summary>
            <remarks>Animations can be applied to this property.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.Height">
            <summary>
            Property to set or return the height of the object.
            </summary>
            <remarks>Animations can be applied to this property.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.GorgonLibrary#Graphics#IRenderableStates#CullingMode">
            <summary>
            Property to set or return the culling mode.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderable.Animations">
            <summary>
            Property to return a list of animations attached to the object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.UpdateDimensions">
            <summary>
            Function to update the dimensions for an object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.GetVertices">
            <summary>
            Function to return the number of vertices for this object.
            </summary>
            <returns>
            An array of vertices used for this renderable.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.GetLine(System.Int32)">
            <summary>
            Function to retrieve a line of text.
            </summary>
            <param name="line">Line index to for the text to retrieve.</param>
            <returns>The string at the line index.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.AppendText(System.String)">
            <summary>
            Function to append text to the already existing text.
            </summary>
            <param name="text">Text to append.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.InsertText(System.Int32,System.String)">
            <summary>
            Function to insert text into the already existing text.
            </summary>
            <param name="position">Position to insert at.</param>
            <param name="text">Text to insert.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.RemoveText(System.Int32,System.Int32)">
            <summary>
            Function to remove text from the already existing text.
            </summary>
            <param name="position">Position to start removing.</param>
            <param name="length">Number of characters to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.MeasureText(System.Text.StringBuilder,System.Single,System.Boolean)">
            <summary>
            Function to return the optimal dimensions of the specified text.
            </summary>
            <param name="text">Text to examine.</param>
            <param name="desiredWidth">Ideal width of the rectangle, only applies of wrap is set to TRUE.</param>
            <param name="wrap">TRUE to wrap text at the desired rectangle width, FALSE to let it continue.</param>
            <returns>Rectangle that will contain the text.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.UpdateAABB">
            <summary>
            Function to update the AABB for the text.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.GetCharacterVertexColor(GorgonLibrary.Graphics.VertexLocations)">
            <summary>
            Function to get the color of a character vertex.
            </summary>
            <param name="vertexPosition">Location of the vertex to change.</param>
            <returns>Color of the sprite vertex.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.SetCharacterVertexColor(GorgonLibrary.Graphics.VertexLocations,System.Drawing.Color)">
            <summary>
            Function to set the color of a character vertex.
            </summary>
            <param name="vertexPosition">Location of the vertex to change.</param>
            <param name="newColor">New color to set the vertex to.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.Refresh">
            <summary>
            Function to force an update on the object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.Initialize">
            <summary>
            Function to initialize the static text sprite.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.Draw(System.Boolean)">
            <summary>
            Function to draw the object.
            </summary>
            <param name="flush">TRUE to flush the buffers after drawing, FALSE to only flush on state change.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.#ctor(System.String,System.String,GorgonLibrary.Graphics.Font,GorgonLibrary.Vector2D,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.StaticTextSprite"/> class.
            </summary>
            <param name="name">Name of the text sprite.</param>
            <param name="text">Text for the sprite.</param>
            <param name="font">Font to use.</param>
            <param name="position">Initial position of the text.</param>
            <param name="textColor">Color of the</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.#ctor(System.String,System.String,GorgonLibrary.Graphics.Font,GorgonLibrary.Vector2D)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the text sprite.</param>
            <param name="text">Text for the sprite.</param>
            <param name="font">Font to use.</param>
            <param name="position">Initial position of the text.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.#ctor(System.String,System.String,GorgonLibrary.Graphics.Font)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the text sprite.</param>
            <param name="text">Text for the sprite.</param>
            <param name="font">Font to use.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.#ctor(System.String,System.String,GorgonLibrary.Graphics.Font,System.Drawing.Color)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the text sprite.</param>
            <param name="text">Text for the sprite.</param>
            <param name="font">Font to use.</param>
            <param name="color">Color of the text.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.#ctor(System.String,System.String,GorgonLibrary.Graphics.Font,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the text sprite.</param>
            <param name="text">Text for the sprite.</param>
            <param name="font">Font to use.</param>
            <param name="positionX">Horizontal position of the text.</param>
            <param name="positionY">Vertical position of the text.</param>
            <param name="textColor">Color of the</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.#ctor(System.String,System.String,GorgonLibrary.Graphics.Font,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the text sprite.</param>
            <param name="text">Text for the sprite.</param>
            <param name="font">Font to use.</param>
            <param name="positionX">Horizontal position of the text.</param>
            <param name="positionY">Vertical position of the text.</param>		
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.DeviceLost">
            <summary>
            Function called when the device is in a lost state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.DeviceReset">
            <summary>
            Function called when the device is reset.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.StaticTextSprite.ForceRelease">
            <summary>
            Function to force the loss of the objects data.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.TabSpaces">
            <summary>
            Property to set or return the number of spaces in a tab.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.LineCount">
            <summary>
            Property to return the number of lines for the text.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.Shadowed">
            <summary>
            Property to show a shadow under the text.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.ShadowColor">
            <summary>
            Property to set or return the color of the shadow.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.ShadowDirection">
            <summary>
            Property to set or return the direction of the shadow.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.ShadowOffset">
            <summary>
            Property to set or return the offset between the shadow and the text.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.AutoAdjustCRLF">
            <summary>
            Property to set or return whether this object will translate the CR/LF characters into a CR.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.UniformScale">
            <summary>
            Property to set or return a uniform scale across the X and Y axis.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.PrimitiveStyle">
            <summary>
            Property to return the primitive style for the object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.UseIndices">
            <summary>
            Property to return whether to use an index buffer or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.Image">
            <summary>
            Property to set or return the image that this object is bound with.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.Color">
            <summary>
            Property to set or return the sprite color.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.Opacity">
            <summary>
            Property to set or return the opacity.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.WordWrap">
            <summary>
            Property to set or return whether word wrapping is enabled or disabled.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.Size">
            <summary>
            Property to return the size of the text.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.Alignment">
            <summary>
            Property to set or return the horizontal alignment of the text.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.MaximumImageBufferSize">
            <summary>
            Property to set or return the maximum image buffer size.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.Text">
            <summary>
            Property to set or return the text for the buffer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.Font">
            <summary>
            Property to set or return the font.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.Width">
            <summary>
            Property to return the width of the text.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.Height">
            <summary>
            Property to set or return the height of the text.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.Bounds">
            <summary>
            Property to set or return the bounding rectangle for this object.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.TextLength">
            <summary>
            Property to return the length of the text.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.Axis">
            <summary>
            Property to set or return the axis of the sprite.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.Position">
            <summary>
            Property to set or return the position of the object.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.Rotation">
            <summary>
            Property to set or return the rotation angle in degrees.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.Scale">
            <summary>
            Property to set or return the scale of the sprite.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.AlphaMaskFunction">
            <summary>
            Property to set or return the function used for alpha masking.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.AlphaMaskValue">
            <summary>
            Property to set or return the alpha value used for alpha masking.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.BlendingMode">
            <summary>
            Property to set the blending mode.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.DestinationBlend">
            <summary>
            Property to set or return the destination blending operation.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.DestinationBlendAlpha">
            <summary>
            Property to set or return the destination alpha blending operation.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.HorizontalWrapMode">
            <summary>
            Property to set or return the horizontal wrapping mode to use.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.InheritAlphaMaskFunction">
            <summary>
            Property to set or return whether we inherit the alpha mask function from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.InheritAlphaMaskValue">
            <summary>
            Property to set or return whether we inherit the alpha mask value from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.InheritBlending">
            <summary>
            Property to set or return whether we inherit blending from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.InheritHorizontalWrapping">
            <summary>
            Property to set or return whether we inherit the horizontal wrapping from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.InheritSmoothing">
            <summary>
            Property to set or return whether we inherit smoothing from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.InheritStencilCompare">
            <summary>
            Property to set or return whether we inherit the stencil compare from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.InheritStencilEnabled">
            <summary>
            Property to set or return whether we inherit the stencil enabled flag from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.InheritStencilFailOperation">
            <summary>
            Property to set or return whether we inherit the stencil failed operation from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.InheritStencilMask">
            <summary>
            Property to set or return whether we inherit the stencil mask from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.InheritStencilPassOperation">
            <summary>
            Property to set or return whether we inherit the stencil pass operation from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.InheritStencilReference">
            <summary>
            Property to set or return whether we inherit the stencil reference from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.InheritStencilZFailOperation">
            <summary>
            Property to set or return whether we inherit the stencil z-failed operation from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.InheritVerticalWrapping">
            <summary>
            Property to set or return whether we inherit the vertical wrapping from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.Smoothing">
            <summary>
            Property to set or return the type of smoothing for the sprites.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.SourceBlend">
            <summary>
            Property to set or return the source blending operation.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.SourceBlendAlpha">
            <summary>
            Property to set or return the source alpha blending operation.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.StencilCompare">
            <summary>
            Property to set or return the stencil comparison function.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.StencilEnabled">
            <summary>
            Property to set or return whether to enable the use of the stencil buffer or not.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.StencilFailOperation">
            <summary>
            Property to set or return the operation for the failing stencil values.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.StencilMask">
            <summary>
            Property to set or return the mask value for the stencil buffer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.StencilPassOperation">
            <summary>
            Property to set or return the operation for passing stencil values.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.StencilReference">
            <summary>
            Property to set or return the reference value for the stencil buffer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.StencilZFailOperation">
            <summary>
            Property to set or return the stencil operation for the failing depth values.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.VerticalWrapMode">
            <summary>
            Property to set or return the vertical wrapping mode to use.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.StaticTextSprite.WrapMode">
            <summary>
            Property to set or return the wrapping mode to use.
            </summary>
            <value></value>
        </member>
        <member name="T:GorgonLibrary.Sprites.SpriteInfo">
            <summary>
            Struct to hold assorted sprite related information,
            such as the name, offsets, and size.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Serialization.BinaryReaderEx">
            <summary>
            Object representing a binary reader that can keep its stream open after it's closed.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinaryReaderEx.Close">
            <summary>
            Function to close the reader and its underlying stream if KeepStreamOpen is false.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinaryReaderEx.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="input">Input stream.</param>
            <param name="encoder">Encoding for the binary reader.</param>
            <param name="keepStreamOpen">TRUE to keep the underlying stream open when the reader is closed, FALSE for normal behaviour.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinaryReaderEx.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="input">Input stream.</param>
            <param name="keepStreamOpen">TRUE to keep the underlying stream open when the reader is closed, FALSE for normal behaviour.</param>
        </member>
        <member name="P:GorgonLibrary.Serialization.BinaryReaderEx.KeepStreamOpen">
            <summary>
            Property to set or return whether to keep the underlying stream open or not after the reader is closed.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.Native.WindowMessages">
            <summary>
            Types of messages that passed to a window.
            </summary>
            <remarks>See the MSDN documentation for more detail.</remarks>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.SysCommand">
            <summary>System command (WM_SYSCOMMAND)</summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Quit">
            <summary>Quit command (WM_QUIT)</summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Size">
            <summary>Window has been resized. (WM_SIZE)</summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.QueryDragIcon">
            <summary>Query the drag icon. (WM_QUERYDRAGICON)</summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.GetIcon">
            <summary>Get the window icon. (WM_GETICON)</summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.SetIcon">
            <summary>Set the window icon. (WM_SETICON)</summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NULL">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Create">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Destroy">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Move">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Activate">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.SetFocus">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.KillFocus">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Enable">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.SetRedraw">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.SetText">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.GetText">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.GetTextLength">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Paint">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Close">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.QueryEndSession">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.QueryOpen">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.EraseBackground">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.SystemColorChange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.EndSession">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.ShowWindow">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.ControlColor">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.WinINIChange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.SettingChange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.DeviceModeChange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.ActivateApplication">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.FontChange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.TimeChange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.CancelMode">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.SetCursor">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MouseActivate">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.ChildActivate">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.QueueSync">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.GetMinMaxInformation">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.PaintIcon">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.IconEraseBackground">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NextDialogControl">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.SpoolerStatus">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.DrawItem">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MeasureItem">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.DeleteItem">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.VKeyToItem">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.CharToItem">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.SetFont">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.GetFont">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.SetHotKey">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.GetHotKey">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.CompareItem">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.GetObject">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Compacting">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.COMMNotify">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.WindowPositionChanging">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.WindowPositionChanged">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Power">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.CopyData">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.CancelJournal">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Notify">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.InputLanguageChangeRequest">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.InputLanguageChange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.TCard">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Help">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.UserChanged">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NotifyFormat">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.ContextMenu">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.StyleChanging">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.StyleChanged">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.DisplayChange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NCCreate">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NCDestroy">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NCCalcSize">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NCHitTest">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NCPaint">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NCActivate">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.GetDialogCode">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.SynchronizePaint">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NCMouseMove">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NCLeftButtonDown">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NCLeftButtonUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NCLeftButtonDoubleClick">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NCRightButtonDown">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NCRightButtonUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NCRightButtonDoubleClick">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NCMiddleButtonDown">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NCMiddleButtonUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NCMiddleButtonDoubleClick">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.KeyDown">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.KeyUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Char">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.DeadChar">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.SysKeyDown">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.SysKeyUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.SysChar">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.SysDeadChar">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.KeyLast">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.IMEStartComposition">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.IMEEndComposition">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.IMEComposition">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.IMEKeyLast">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.InitializeDialog">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Command">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Timer">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.HorizontalScroll">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.VerticalScroll">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.InitializeMenu">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.InitializeMenuPopup">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MenuSelect">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MenuChar">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.EnterIdle">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MenuRightButtonUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MenuDrag">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MenuGetObject">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.UnInitializeMenuPopup">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MenuCommand">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.ControlColorMessageBox">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.ControlColorEdit">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.ControlColorListBox">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.ControlColorButton">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.ControlColorDialog">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.ControlColorScrollbar">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.ControlColorStatic">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MouseMove">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.LeftButtonDown">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.LeftButtonUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.LeftButtonDoubleClick">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.RightButtonDown">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.RightButtonUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.RightButtonDoubleClick">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MiddleButtonDown">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MiddleButtonUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MiddleButtonDoubleClick">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MouseWheel">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.ParentNotify">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.EnterMenuLoop">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.ExitMenuLoop">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.NextMenu">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Sizing">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.CaptureChanged">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Moving">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.DeviceChange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MDICreate">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MDIDestroy">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MDIActivate">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MDIRestore">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MDINext">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MDIMaximize">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MDITile">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MDICacade">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MDIIconArrange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MDIGetActive">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MDISetMenu">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.EnterSizeMove">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.ExitSizeMove">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.DropFiles">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MDIRefreshMenu">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.IMESetContext">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.IMENotify">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.IMEControl">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.IMECompositionFull">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.IMESelect">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.IMEChar">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.IMERequest">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.IMEKeyDown">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.IMEKeyUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MouseHover">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.MouseLeave">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Cut">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Copy">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Paste">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Clear">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Undo">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.RenderFormat">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.RenderAllFormats">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.DestroyClipboard">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.DrawClipboard">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Paintclipboard">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.VerticalScrollClipboard">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.SizeClipboard">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.AskClipboardFormatName">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.ChangeClipboardChain">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.HorizontalScrollClipboard">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.QueryNewPalette">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.PaletteIsChanging">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.PaletteChanged">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.HotKey">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Print">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.PrintClient">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.HandheldFirst">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.HandheldLast">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.AFXFirst">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.AFXLast">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.PenWindowFirst">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.PenWindowLast">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.Application">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.User">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.WindowMessages.RawInput">
            <summary></summary>
        </member>
        <member name="T:GorgonLibrary.Internal.Native.SysCommands">
            <summary>
            Types of System commands.
            </summary>
            <remarks>
            See the MSDN documentation for more detail.
            <para>
            These are often used with the WM_SYSCOMMAND message.
            </para>
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.SysCommands.ScreenSave">
            <summary>Screen saver. (SC_SCREENSAVE)</summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.SysCommands.MonitorPower">
            <summary>Monitor power saving. (SC_MONITORPOWER)</summary>
        </member>
        <member name="T:GorgonLibrary.Internal.Native.PeekMessageFlags">
            <summary>
            Flags for PeekMessage function.
            </summary>
            <remarks>See the MSDN documentation for more detail.</remarks>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.PeekMessageFlags.NoRemove">
            <summary>Keep message on the message queue.</summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.PeekMessageFlags.Remove">
            <summary>Remove message from the queue.</summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.PeekMessageFlags.NoYield">
            <summary>Do not yield execution to waiting threads.</summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.Font">
            <summary>
            Object representing a font to be used with Gorgon.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromStream(System.String,System.IO.Stream,System.Int32,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Function to read the font from a stream.
            </summary>
            <param name="name">Name of the font to load.</param>
            <param name="stream">Stream containing the font data.</param>
            <param name="sizeInBytes">Size of the font in bytes.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <param name="bold">TRUE if the font should be bold, FALSE if not.</param>
            <param name="underlined">TRUE if the font should be underlined, FALSE if not.</param>
            <param name="italic">TRUE if the font is italicized, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is empty or NULL.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="sizeInBytes"/> parameter is too small.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromStream(System.String,System.IO.Stream,System.Int32,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Function to read the font from a stream.
            </summary>
            <param name="name">Name of the font to load.</param>
            <param name="stream">Stream containing the font data.</param>
            <param name="sizeInBytes">Size of the font in bytes.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <param name="bold">TRUE if the font should be bold, FALSE if not.</param>
            <param name="underlined">TRUE if the font should be underlined, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is empty or NULL.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="sizeInBytes"/> parameter is too small.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromStream(System.String,System.IO.Stream,System.Int32,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Function to read the font from a stream.
            </summary>
            <param name="name">Name of the font to load.</param>
            <param name="stream">Stream containing the font data.</param>
            <param name="sizeInBytes">Size of the font in bytes.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <param name="bold">TRUE if the font should be bold, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is empty or NULL.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="sizeInBytes"/> parameter is too small.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromStream(System.String,System.IO.Stream,System.Int32,System.Single,System.Boolean)">
            <summary>
            Function to read the font from a stream.
            </summary>
            <param name="name">Name of the font to load.</param>
            <param name="stream">Stream containing the font data.</param>
            <param name="sizeInBytes">Size of the font in bytes.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is empty or NULL.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="sizeInBytes"/> parameter is too small.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromStream(System.String,System.IO.Stream,System.Int32,System.Single)">
            <summary>
            Function to read the font from a stream.
            </summary>
            <param name="name">Name of the font to load.</param>
            <param name="stream">Stream containing the font data.</param>
            <param name="sizeInBytes">Size of the font in bytes.</param>
            <param name="fontSize">Point size of the font.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is empty or NULL.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="sizeInBytes"/> parameter is too small.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromFile(System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Function to read the font from a file.
            </summary>
            <param name="filename">Filename of the font to load.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <param name="bold">TRUE if the font should be bold, FALSE if not.</param>
            <param name="underlined">TRUE if the font should be underlined, FALSE if not.</param>
            <param name="italic">TRUE if the font is italicized, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="filename"/> is empty or NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromFile(System.String,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Function to read the font from a file.
            </summary>
            <param name="filename">Filename of the font to load.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <param name="bold">TRUE if the font should be bold, FALSE if not.</param>
            <param name="underlined">TRUE if the font should be underlined, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="filename"/> is empty or NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromFile(System.String,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Function to read the font from a file.
            </summary>
            <param name="filename">Filename of the font to load.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <param name="bold">TRUE if the font should be bold, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="filename"/> is empty or NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromFile(System.String,System.Single,System.Boolean)">
            <summary>
            Function to read the font from a file.
            </summary>
            <param name="filename">Filename of the font to load.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="filename"/> is empty or NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromFile(System.String,System.Single)">
            <summary>
            Function to read the font from a file.
            </summary>
            <param name="filename">Filename of the font to load.</param>
            <param name="fontSize">Point size of the font.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="filename"/> is empty or NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromFileSystem(GorgonLibrary.FileSystems.FileSystem,System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Function to read the font from a file system.
            </summary>
            <param name="fileSystem">File system containing the font file to load.</param>
            <param name="filename">Path and filename of the font.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <param name="bold">TRUE if the font should be bold, FALSE if not.</param>
            <param name="underlined">TRUE if the font should be underlined, FALSE if not.</param>
            <param name="italic">TRUE if the font is italicized, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="filename"/> is empty or NULL or <paramref name="fileSystem"/> is NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromFileSystem(GorgonLibrary.FileSystems.FileSystem,System.String,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Function to read the font from a file system.
            </summary>
            <param name="fileSystem">File system containing the font file to load.</param>
            <param name="filename">Path and filename of the font.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <param name="bold">TRUE if the font should be bold, FALSE if not.</param>
            <param name="underlined">TRUE if the font should be underlined, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="filename"/> is empty or NULL or <paramref name="fileSystem"/> is NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromFileSystem(GorgonLibrary.FileSystems.FileSystem,System.String,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Function to read the font from a file system.
            </summary>
            <param name="fileSystem">File system containing the font file to load.</param>
            <param name="filename">Path and filename of the font.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <param name="bold">TRUE if the font should be bold, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="filename"/> is empty or NULL or <paramref name="fileSystem"/> is NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromFileSystem(GorgonLibrary.FileSystems.FileSystem,System.String,System.Single,System.Boolean)">
            <summary>
            Function to read the font from a file system.
            </summary>
            <param name="fileSystem">File system containing the font file to load.</param>
            <param name="filename">Path and filename of the font.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="filename"/> is empty or NULL or <paramref name="fileSystem"/> is NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromFileSystem(GorgonLibrary.FileSystems.FileSystem,System.String,System.Single)">
            <summary>
            Function to read the font from a file system.
            </summary>
            <param name="fileSystem">File system containing the font file to load.</param>
            <param name="filename">Path and filename of the font.</param>
            <param name="fontSize">Point size of the font.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="filename"/> is empty or NULL or <paramref name="fileSystem"/> is NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromResource(System.String,System.Resources.ResourceManager,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Function to read the font from an embedded resource.
            </summary>
            <param name="name">Name of the font resource.</param>
            <param name="manager">Resource manager that contains the resource.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <param name="bold">TRUE if the font should be bold, FALSE if not.</param>
            <param name="underlined">TRUE if the font should be underlined, FALSE if not.</param>
            <param name="italic">TRUE if the font is italicized, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is empty or NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromResource(System.String,System.Resources.ResourceManager,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Function to read the font from an embedded resource.
            </summary>
            <param name="name">Name of the font resource.</param>
            <param name="manager">Resource manager that contains the resource.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <param name="bold">TRUE if the font should be bold, FALSE if not.</param>
            <param name="underlined">TRUE if the font should be underlined, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is empty or NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromResource(System.String,System.Resources.ResourceManager,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Function to read the font from an embedded resource.
            </summary>
            <param name="name">Name of the font resource.</param>
            <param name="manager">Resource manager that contains the resource.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <param name="bold">TRUE if the font should be bold, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is empty or NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromResource(System.String,System.Resources.ResourceManager,System.Single,System.Boolean)">
            <summary>
            Function to read the font from an embedded resource.
            </summary>
            <param name="name">Name of the font resource.</param>
            <param name="manager">Resource manager that contains the resource.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is empty or NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromResource(System.String,System.Resources.ResourceManager,System.Single)">
            <summary>
            Function to read the font from an embedded resource.
            </summary>
            <param name="name">Name of the font resource.</param>
            <param name="manager">Resource manager that contains the resource.</param>
            <param name="fontSize">Point size of the font.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is empty or NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromResource(System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Function to read the font from an embedded resource.
            </summary>
            <param name="name">Name of the font resource.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <param name="bold">TRUE if the font should be bold, FALSE if not.</param>
            <param name="underlined">TRUE if the font should be underlined, FALSE if not.</param>
            <param name="italic">TRUE if the font is italicized, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is empty or NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromResource(System.String,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Function to read the font from an embedded resource.
            </summary>
            <param name="name">Name of the font resource.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <param name="bold">TRUE if the font should be bold, FALSE if not.</param>
            <param name="underlined">TRUE if the font should be underlined, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is empty or NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromResource(System.String,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Function to read the font from an embedded resource.
            </summary>
            <param name="name">Name of the font resource.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <param name="bold">TRUE if the font should be bold, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is empty or NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromResource(System.String,System.Single,System.Boolean)">
            <summary>
            Function to read the font from an embedded resource.
            </summary>
            <param name="name">Name of the font resource.</param>
            <param name="fontSize">Point size of the font.</param>
            <param name="antiAliased">TRUE if the font should be anti-aliased, FALSE if not.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is empty or NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.FromResource(System.String,System.Single)">
            <summary>
            Function to read the font from an embedded resource.
            </summary>
            <param name="name">Name of the font resource.</param>
            <param name="fontSize">Point size of the font.</param>
            <returns>A new font object based on the item in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is empty or NULL.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.GetCharWidth(System.Drawing.Bitmap,System.Drawing.Font,System.Char)">
            <summary>
            Function to retrieve the width of a character.
            </summary>
            <param name="context">Context from which the character will be measured.</param>
            <param name="font">Font to use.</param>
            <param name="c">Character to measure.</param>
            <returns>The width of the character cell.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.DrawFont(GorgonLibrary.Internal.Glyph,System.Drawing.Font,System.Drawing.Bitmap)">
            <summary>
            Function to draw the font.
            </summary>
            <param name="glyph">Glyph data.</param>
            <param name="gdiFont">GDI font to use.</param>
            <param name="fontData">Font bitmap to use.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.CreateGlyphImage(System.Drawing.Size)">
            <summary>
            Function to create an image to hold the glyphs.
            </summary>
            <param name="dims">Dimensions of the image.</param>
            <returns>An image to hold the character glyphs.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.UpdateFont(System.String)">
            <summary>
            Function to update the font.
            </summary>
            <param name="chars">Characters to add.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.ReleaseResources">
            <summary>
            Function to release the resources.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.Refresh">
            <summary>
            Function to refresh the font data.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.GetGlyph(System.Char)">
            <summary>
            Function to retrieve the glyph for the specified character.
            </summary>
            <param name="c">Character to retrieve glyph from.</param>
            <returns>The glyph associated with the character.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.#ctor(System.String,System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.Font"/> class.
            </summary>
            <param name="fontName">Name of the font to use.</param>
            <param name="family">Font family.</param>
            <param name="fontSize">Font size in points.</param>
            <param name="antiAlias">TRUE to anti-alias the font, FALSE to draw without anti-aliasing.</param>
            <param name="bold">TRUE to set the font to bold, FALSE to leave as is.</param>
            <param name="underline">TRUE to set the font to underlined, FALSE to leave as is.</param>
            <param name="italic">TRUE to set the font to italics, FALSE to leave as is.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.#ctor(System.String,System.String,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.Font"/> class.
            </summary>
            <param name="fontName">Name of the font to use.</param>
            <param name="family">Font family.</param>
            <param name="fontSize">Font size in points.</param>
            <param name="antiAlias">TRUE to anti-alias the font, FALSE to draw without anti-aliasing.</param>
            <param name="bold">TRUE to set the font to bold, FALSE to leave as is.</param>
            <param name="underline">TRUE to set the font to underlined, FALSE to leave as is.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.#ctor(System.String,System.String,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.Font"/> class.
            </summary>
            <param name="fontName">Name of the font to use.</param>
            <param name="family">Font family.</param>
            <param name="fontSize">Font size in points.</param>
            <param name="antiAlias">TRUE to anti-alias the font, FALSE to draw without anti-aliasing.</param>
            <param name="bold">TRUE to set the font to bold, FALSE to leave as is.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.#ctor(System.String,System.String,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.Font"/> class.
            </summary>
            <param name="fontName">Name of the font to use.</param>
            <param name="family">Font family.</param>
            <param name="fontSize">Font size in points.</param>
            <param name="antiAlias">TRUE to anti-alias the font, FALSE to draw without anti-aliasing.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.#ctor(System.String,System.String,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.Font"/> class.
            </summary>
            <param name="fontName">Name of the font to use.</param>
            <param name="family">Font family.</param>
            <param name="fontSize">Font size in points.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.#ctor(System.String,System.Drawing.FontFamily,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.Font"/> class.
            </summary>
            <param name="fontName">Name of the font to use.</param>
            <param name="fontFamily">Family that the font belongs to.</param>
            <param name="fontSize">Font size in points.</param>
            <param name="antiAlias">TRUE to anti-alias the font, FALSE to draw without anti-aliasing.</param>
            <param name="bold">TRUE to set the font to bold, FALSE to leave as is.</param>
            <param name="underline">TRUE to set the font to underlined, FALSE to leave as is.</param>
            <param name="italic">TRUE to set the font to italics, FALSE to leave as is.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.#ctor(System.String,System.Drawing.FontFamily,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.Font"/> class.
            </summary>
            <param name="fontName">Name of the font to use.</param>
            <param name="fontFamily">Family that the font belongs to.</param>
            <param name="fontSize">Font size in points.</param>
            <param name="antiAlias">TRUE to anti-alias the font, FALSE to draw without anti-aliasing.</param>
            <param name="bold">TRUE to set the font to bold, FALSE to leave as is.</param>
            <param name="underline">TRUE to set the font to underlined, FALSE to leave as is.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.#ctor(System.String,System.Drawing.FontFamily,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.Font"/> class.
            </summary>
            <param name="fontName">Name of the font to use.</param>
            <param name="fontFamily">Family that the font belongs to.</param>
            <param name="fontSize">Font size in points.</param>
            <param name="antiAlias">TRUE to anti-alias the font, FALSE to draw without anti-aliasing.</param>
            <param name="bold">TRUE to set the font to bold, FALSE to leave as is.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.#ctor(System.String,System.Drawing.FontFamily,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.Font"/> class.
            </summary>
            <param name="fontName">Name of the font to use.</param>
            <param name="fontFamily">Family that the font belongs to.</param>
            <param name="fontSize">Font size in points.</param>
            <param name="antiAlias">TRUE to anti-alias the font, FALSE to draw without anti-aliasing.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.#ctor(System.String,System.Drawing.FontFamily,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.Font"/> class.
            </summary>
            <param name="fontName">Name of the font to use.</param>
            <param name="fontFamily">Family that the font belongs to.</param>
            <param name="fontSize">Font size in points.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.#ctor(System.String,System.Drawing.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.Font"/> class.
            </summary>
            <param name="fontName">Name of the font to use.</param>
            <param name="font">GDI+ font to copy settings from.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to release all resources, FALSE to only release unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Font.Dispose">
            <summary>
            Function to perform clean up.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.NeedsUpdate">
            <summary>
            Property to return whether the font needs to be updated or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.FamilyName">
            <summary>
            Property to set or return the font family name.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.ResourceCount">
            <summary>
            Property to return the number of resources the font consumes.
            </summary>
            <remarks>Resources mean the number of backing images that are required to hold the glyphs.  Too many images can lead to texture thrashing on the card and really hinder performance.  
            This property will allow the user to monitor how many resources the font is using and allow a chance to adjust by manipulating the <see cref="P:GorgonLibrary.Graphics.Font.FontSize"/> or raising the <see cref="P:GorgonLibrary.Graphics.Font.MaxFontImageWidth"/> 
            and/or the <see cref="P:GorgonLibrary.Graphics.Font.MaxFontImageWidth"/>.<para>This value should never be less than 1 and ideally only return 1.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.Ascent">
            <summary>
            Property to return the ascent of the font (in pixels).
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.Descent">
            <summary>
            Property to return the descent of the font (in pixels).
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.LineHeight">
            <summary>
            Property to return the line height of the font (in pixels).
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.CharacterHeight">
            <summary>
            Property to return the maximum character height.
            </summary>
            <remarks>This is the height of the character itself, not the cell of the character.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.OutlineColor">
            <summary>
            Property to set or return the outline color.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.OutlineWidth">
            <summary>
            Property to set or return the outline size.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.UserBrush">
            <summary>
            Property to set or return a user defined brush used to paint the font.
            </summary>
            <remarks>This property will make a clone of the original brush and will use that clone internally.<para>Please note that the user brush will override any color/gradient settings on the font.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.GradientAngle">
            <summary>
            Property to set or return the angle of the gradient.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.BaseColor">
            <summary>
            Property to set or return the base color for the font glyphs.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.GradientColor">
            <summary>
            Property to set or return the gradient color for the font glyphs.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.Bold">
            <summary>
            Property to set or return whether the font is bolded.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.Underline">
            <summary>
            Property to set or return whether the font is underlined.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.Italic">
            <summary>
            Property to set or return whether the font is italicized.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.Strikeout">
            <summary>
            Property to set or return whether the font is striked out.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.GlyphLeftOffset">
            <summary>
            Property to set or return the amount of offset of the left side of a glyph on the backing image.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.GlyphTopOffset">
            <summary>
            Property to set or return the amount of offset of the top side of a glyph on the backing image.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.GlyphWidthPadding">
            <summary>
            Property to set or return the amount of padding between the glyph width on the backing image.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.GlyphHeightPadding">
            <summary>
            Property to set or return the amount of padding between the glyph heights on the backing image.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.AntiAlias">
            <summary>
            Property to set or return whether the font will be anti-aliased or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.MaxFontImageWidth">
            <summary>
            Property to set or return the font image width.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.MaxFontImageHeight">
            <summary>
            Property to set or return the font image width.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.CharacterList">
            <summary>
            Property to set or return the character list.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Font.FontSize">
            <summary>
            Property to set or return the font size.
            </summary>
        </member>
        <member name="T:GorgonLibrary.InputDevices.MouseButtons">
            <summary>
            Enumeration for mouse buttons.
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.MouseButtons.None">
            <summary>
            No mouse button pressed.
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.MouseButtons.Left">
            <summary>
            Left mouse button pressed.
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.MouseButtons.Right">
            <summary>
            Right mouse button pressed.
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.MouseButtons.Middle">
            <summary>
            Middle mouse button pressed.
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.MouseButtons.Button1">
            <summary>
            Left mouse button pressed (same as MouseButton.Left).
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.MouseButtons.Button2">
            <summary>
            Right mouse button pressed (same as MouseButton.Right).
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.MouseButtons.Button3">
            <summary>
            Middle mouse button pressed (same as MouseButton.Middle).
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.MouseButtons.Button4">
            <summary>
            Fourth mouse button pressed.
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.MouseButtons.Button5">
            <summary>
            Fifth mouse button pressed.
            </summary>
        </member>
        <member name="T:GorgonLibrary.InputDevices.KeyboardKeys">
            <summary>
            Enumeration for keyboard keys.
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.None">
            <summary>Key: None</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.LButton">
            <summary>Key: LButton</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.RButton">
            <summary>Key: RButton</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Cancel">
            <summary>Key: Cancel</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.MButton">
            <summary>Key: MButton</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.XButton1">
            <summary>Key: XButton1</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.XButton2">
            <summary>Key: XButton2</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Back">
            <summary>Key: Back</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Tab">
            <summary>Key: Tab</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.LineFeed">
            <summary>Key: LineFeed</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Clear">
            <summary>Key: Clear</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Enter">
            <summary>Key: Enter</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Return">
            <summary>Key: Return</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.ShiftKey">
            <summary>Key: ShiftKey</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.ControlKey">
            <summary>Key: ControlKey</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Menu">
            <summary>Key: Menu</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Pause">
            <summary>Key: Pause</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.CapsLock">
            <summary>Key: CapsLock</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Capital">
            <summary>Key: Capital</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.HangulMode">
            <summary>Key: HangulMode</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.HanguelMode">
            <summary>Key: HanguelMode</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.KanaMode">
            <summary>Key: KanaMode</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.JunjaMode">
            <summary>Key: JunjaMode</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.FinalMode">
            <summary>Key: FinalMode</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.KanjiMode">
            <summary>Key: KanjiMode</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.HanjaMode">
            <summary>Key: HanjaMode</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Escape">
            <summary>Key: Escape</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.IMEConvert">
            <summary>Key: IMEConvert</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.IMENonconvert">
            <summary>Key: IMENonconvert</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.IMEAccept">
            <summary>Key: IMEAccept</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.IMEAceept">
            <summary>Key: IMEAceept</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.IMEModeChange">
            <summary>Key: IMEModeChange</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Space">
            <summary>Key: Space</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Prior">
            <summary>Key: Prior</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.PageUp">
            <summary>Key: PageUp</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.PageDown">
            <summary>Key: PageDown</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Next">
            <summary>Key: Next</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.End">
            <summary>Key: End</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Home">
            <summary>Key: Home</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Left">
            <summary>Key: Left</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Up">
            <summary>Key: Up</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Right">
            <summary>Key: Right</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Down">
            <summary>Key: Down</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Select">
            <summary>Key: Select</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Print">
            <summary>Key: Print</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Execute">
            <summary>Key: Execute</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Snapshot">
            <summary>Key: Snapshot</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.PrintScreen">
            <summary>Key: PrintScreen</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Insert">
            <summary>Key: Insert</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Delete">
            <summary>Key: Delete</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Help">
            <summary>Key: Help</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.D0">
            <summary>Key: D0</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.D1">
            <summary>Key: D1</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.D2">
            <summary>Key: D2</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.D3">
            <summary>Key: D3</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.D4">
            <summary>Key: D4</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.D5">
            <summary>Key: D5</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.D6">
            <summary>Key: D6</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.D7">
            <summary>Key: D7</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.D8">
            <summary>Key: D8</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.D9">
            <summary>Key: D9</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.A">
            <summary>Key: A</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.B">
            <summary>Key: B</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.C">
            <summary>Key: C</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.D">
            <summary>Key: D</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.E">
            <summary>Key: E</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F">
            <summary>Key: F</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.G">
            <summary>Key: G</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.H">
            <summary>Key: H</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.I">
            <summary>Key: I</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.J">
            <summary>Key: J</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.K">
            <summary>Key: K</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.L">
            <summary>Key: L</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.M">
            <summary>Key: M</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.N">
            <summary>Key: N</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.O">
            <summary>Key: O</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.P">
            <summary>Key: P</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Q">
            <summary>Key: Q</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.R">
            <summary>Key: R</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.S">
            <summary>Key: S</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.T">
            <summary>Key: T</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.U">
            <summary>Key: U</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.V">
            <summary>Key: V</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.W">
            <summary>Key: W</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.X">
            <summary>Key: X</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Y">
            <summary>Key: Y</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Z">
            <summary>Key: Z</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.LWin">
            <summary>Key: LWin</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.RWin">
            <summary>Key: RWin</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Apps">
            <summary>Key: Apps</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Sleep">
            <summary>Key: Sleep</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.NumPad0">
            <summary>Key: NumPad0</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.NumPad1">
            <summary>Key: NumPad1</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.NumPad2">
            <summary>Key: NumPad2</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.NumPad3">
            <summary>Key: NumPad3</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.NumPad4">
            <summary>Key: NumPad4</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.NumPad5">
            <summary>Key: NumPad5</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.NumPad6">
            <summary>Key: NumPad6</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.NumPad7">
            <summary>Key: NumPad7</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.NumPad8">
            <summary>Key: NumPad8</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.NumPad9">
            <summary>Key: NumPad9</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Multiply">
            <summary>Key: Multiply</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Add">
            <summary>Key: Add</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Separator">
            <summary>Key: Separator</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Subtract">
            <summary>Key: Subtract</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Decimal">
            <summary>Key: Decimal</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Divide">
            <summary>Key: Divide</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F1">
            <summary>Key: F1</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F2">
            <summary>Key: F2</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F3">
            <summary>Key: F3</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F4">
            <summary>Key: F4</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F5">
            <summary>Key: F5</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F6">
            <summary>Key: F6</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F7">
            <summary>Key: F7</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F8">
            <summary>Key: F8</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F9">
            <summary>Key: F9</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F10">
            <summary>Key: F10</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F11">
            <summary>Key: F11</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F12">
            <summary>Key: F12</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F13">
            <summary>Key: F13</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F14">
            <summary>Key: F14</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F15">
            <summary>Key: F15</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F16">
            <summary>Key: F16</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F17">
            <summary>Key: F17</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F18">
            <summary>Key: F18</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F19">
            <summary>Key: F19</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F20">
            <summary>Key: F20</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F21">
            <summary>Key: F21</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F22">
            <summary>Key: F22</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F23">
            <summary>Key: F23</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.F24">
            <summary>Key: F24</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.NumLock">
            <summary>Key: NumLock</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Scroll">
            <summary>Key: Scroll</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.LShiftKey">
            <summary>Key: LShiftKey</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.RShiftKey">
            <summary>Key: RShiftKey</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.LControlKey">
            <summary>Key: LControlKey</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.RControlKey">
            <summary>Key: RControlKey</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.LMenu">
            <summary>Key: LMenu</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.RMenu">
            <summary>Key: RMenu</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.BrowserBack">
            <summary>Key: BrowserBack</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.BrowserForward">
            <summary>Key: BrowserForward</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.BrowserRefresh">
            <summary>Key: BrowserRefresh</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.BrowserStop">
            <summary>Key: BrowserStop</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.BrowserSearch">
            <summary>Key: BrowserSearch</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.BrowserFavorites">
            <summary>Key: BrowserFavorites</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.BrowserHome">
            <summary>Key: BrowserHome</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.VolumeMute">
            <summary>Key: VolumeMute</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.VolumeDown">
            <summary>Key: VolumeDown</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.VolumeUp">
            <summary>Key: VolumeUp</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.MediaNextTrack">
            <summary>Key: MediaNextTrack</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.MediaPreviousTrack">
            <summary>Key: MediaPreviousTrack</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.MediaStop">
            <summary>Key: MediaStop</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.MediaPlayPause">
            <summary>Key: MediaPlayPause</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.LaunchMail">
            <summary>Key: LaunchMail</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.SelectMedia">
            <summary>Key: SelectMedia</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.LaunchApplication1">
            <summary>Key: LaunchApplication1</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.LaunchApplication2">
            <summary>Key: LaunchApplication2</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.OemSemicolon">
            <summary>Key: OemSemicolon</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Oem1">
            <summary>Key: Oem1</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Oemplus">
            <summary>Key: Oemplus</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Oemcomma">
            <summary>Key: Oemcomma</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.OemMinus">
            <summary>Key: OemMinus</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.OemPeriod">
            <summary>Key: OemPeriod</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Oem2">
            <summary>Key: Oem2</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.OemQuestion">
            <summary>Key: OemQuestion</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Oem3">
            <summary>Key: Oem3</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Oemtilde">
            <summary>Key: Oemtilde</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Oem4">
            <summary>Key: Oem4</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.OemOpenBrackets">
            <summary>Key: OemOpenBrackets</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.OemPipe">
            <summary>Key: OemPipe</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Oem5">
            <summary>Key: Oem5</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.OemCloseBrackets">
            <summary>Key: OemCloseBrackets</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Oem6">
            <summary>Key: Oem6</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.OemQuotes">
            <summary>Key: OemQuotes</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Oem7">
            <summary>Key: Oem7</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Oem8">
            <summary>Key: Oem8</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Oem102">
            <summary>Key: Oem102</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.OemBackslash">
            <summary>Key: OemBackslash</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.ProcessKey">
            <summary>Key: ProcessKey</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Packet">
            <summary>Key: Packet</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Attn">
            <summary>Key: Attn</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Crsel">
            <summary>Key: Crsel</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Exsel">
            <summary>Key: Exsel</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.EraseEof">
            <summary>Key: EraseEof</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Play">
            <summary>Key: Play</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Zoom">
            <summary>Key: Zoom</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.NoName">
            <summary>Key: NoName</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Pa1">
            <summary>Key: Pa1</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.OemClear">
            <summary>Key: OemClear</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.KeyCode">
            <summary>Key: KeyCode</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Shift">
            <summary>Key: Shift</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Control">
            <summary>Key: Control</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Alt">
            <summary>Key: Alt</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyboardKeys.Modifiers">
            <summary>Key: Modifiers</summary>
        </member>
        <member name="T:GorgonLibrary.InputDevices.JoystickDirections">
            <summary>
            Enumeration for joystick axis directions.
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.JoystickDirections.Center">
            <summary>
            Axis is centered.
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.JoystickDirections.Up">
            <summary>
            Axis is up.
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.JoystickDirections.Down">
            <summary>
            Axis is down.
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.JoystickDirections.Left">
            <summary>
            Axis is left.
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.JoystickDirections.Right">
            <summary>
            Axis is right.
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.JoystickDirections.LessThanCenter">
            <summary>
            Axis is less than center position.
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.JoystickDirections.MoreThanCenter">
            <summary>
            Axis is greater than center position.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.PrimitiveStyle">
            <summary>
            Enumeration for primitive drawing style.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveStyle.PointList">
            <summary>A series of individual points.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveStyle.LineList">
            <summary>A series of individual lines.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveStyle.LineStrip">
            <summary>A series of lines connected in a strip.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveStyle.TriangleList">
            <summary>A series of individual triangles.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveStyle.TriangleStrip">
            <summary>A series of triangles connected in a strip.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveStyle.TriangleFan">
            <summary>A series of triangles connected in a fan.</summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.CullingMode">
            <summary>
            Enumeration for culling modes.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.CullingMode.CounterClockwise">
            <summary>Cull counter clockwise.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.CullingMode.Clockwise">
            <summary>Cull clockwise.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.CullingMode.None">
            <summary>No culling.</summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.VertexFieldContext">
            <summary>
            Enumerator for vertex field contexts.
            Used to define in which context the field will be used.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexFieldContext.Position">
            Position, 3 reals per vertex.
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexFieldContext.Normal">
            Normal, 3 reals per vertex.
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexFieldContext.BlendWeights">
            Blending weights.
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexFieldContext.BlendIndices">
            Blending indices.
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexFieldContext.Diffuse">
            Diffuse colors.
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexFieldContext.Specular">
            Specular colors.
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexFieldContext.TexCoords">
            Texture coordinates.
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexFieldContext.Binormal">
            Binormal (Y axis if normal is Z).
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexFieldContext.Tangent">
            Tangent (X axis if normal is Z).
        </member>
        <member name="T:GorgonLibrary.Graphics.VertexFieldType">
            <summary>
            Enumerator for vertex field types.
            Used to define what type of field we're using.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexFieldType.Float1">
            1 Floating point number.
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexFieldType.Float2">
            2 Floating point numbers.
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexFieldType.Float3">
            3 Floating point numbers.
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexFieldType.Float4">
            4 Floating point numbers.
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexFieldType.Color">
            DWORD color value.
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexFieldType.Short1">
            1 signed short integers.
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexFieldType.Short2">
            2 signed short integers.
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexFieldType.Short3">
            3 signed short integers.
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexFieldType.Short4">
            4 signed short integers.
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexFieldType.UByte4">
            4 Unsigned bytes.
        </member>
        <member name="T:GorgonLibrary.Graphics.BlitterSizeMode">
            <summary>
            Enumeration containing modes for the blitters on the image/render image objects.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlitterSizeMode.Scale">
            <summary>
            Scale the image based on the width and height passed to the blitter.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlitterSizeMode.Crop">
            <summary>
            Crop the image based on the width and height passed to the blitter.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ImageBufferFormats">
            <summary>
            Enumeration for image formats.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferUnknown">
            <summary>Unknown buffer format.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferRGB888">
            <summary>24 bit color.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferRGB888A8">
            <summary>24 bit color, 8 bit alpha.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferRGB555A1">
            <summary>15 bit color, 1 bit alpha.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferRGB444A4">
            <summary>12 bit color, 4 bit alpha.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferBGR161616A16">
            <summary>48 bit color (BGR), 16 bit alpha.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferBGR161616A16F">
            <summary>48 bit color (BGR), 16 bit alpha, floating point.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferRGB101010A2">
            <summary>30 bit color, 2 bit alpha.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferBGR101010A2">
            <summary>30 bit color (BGR), 2 bit alpha.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferWVU101010A2">
            <summary>30 bit bump map (WVU), 2 bit alpha.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferBGR323232A32F">
            <summary>96 bit color (BGR), 32 bit alpha, floating point.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferA4L4">
            <summary>4 bit luminance, 4 bit alpha.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferA8">
            <summary>8 bit alpha.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferRGB332A8">
            <summary>8 bit color, 8 bit alpha.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferVU88Cx">
            <summary>32 bit normal map, compressed.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferDXT1">
            <summary>DXT1 compression.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferDXT2">
            <summary>DXT2 compression.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferDXT3">
            <summary>DXT3 compression.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferDXT4">
            <summary>DXT4 compression.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferDXT5">
            <summary>DXT5 compression.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferGR1616">
            <summary>32 bit color (GR).</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferGR1616F">
            <summary>32 bit color (GR), floating point.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferRGB888G8">
            <summary>16 bit RGB packed.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferL16">
            <summary>16 bit luminance.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferVU55L6">
            <summary>16 bit bump map, 5 bits for VU, 6 bits for luminance.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferL8">
            <summary>8 bit luminance.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferMulti2RGBA">
            <summary>Uncompressed multi element.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferP8">
            <summary>8 bit color, indexed.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferQWVU16161616">
            <summary>64 bit bumpmap.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferQWVU8888">
            <summary>32 bit bumpmap.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferR16F">
            <summary>16 bit color (R), floating point.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferR32F">
            <summary>32 bit color (R), floating point.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferRGB332">
            <summary>8 bit color.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferVU1616">
            <summary>32 bit bump map.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferVU88">
            <summary>16 bit bump map.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferRGB555X1">
            <summary>15 bit color.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferRGB444X4">
            <summary>12 bit color.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferRGB888X8">
            <summary>32 bit color.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferLVU888X8">
            <summary>32 bit bumpmap.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferBGR888X8">
            <summary>32 bit color (BGR).</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferYUY2">
            <summary>4 bit bumpmap.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferG8RGB888">
            <summary>24 bit color, extra 8 bit green channel.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferA8L8">
            <summary>8 bit alpha, 8 bit luminance.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferA8P8">
            <summary>8 bit alpha, 8 bit indexed color.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferGR3232F">
            <summary>64 bit color (GR), floating point.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageBufferFormats.BufferRGB565">
            <summary>16 bit color.</summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ImageOperations">
            <summary>
            Enumeration containing image operation flags.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.Disable">
            <summary>Disable the image layer.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.SelectArgument1">
            <summary>Select the previous first operation argument.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.SelectArgument2">
            <summary>Select the previous second operation argument.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.Modulate">
            <summary>Modulate the layer.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.Modulatex2">
            <summary>Modulate the layer times 2.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.Modulatex4">
            <summary>Modulate the layer times 4.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.Additive">
            <summary>Additive blending.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.AdditiveSigned">
            <summary>Additive blending with sign.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.AdditiveSignedx2">
            <summary>Additive blending with sign times 2.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.AdditiveSmooth">
            <summary>Additive blending with interpolation.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.Subtract">
            <summary>Subtract blending.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.BlendDiffuseAlpha">
            <summary>Blend diffuse and alpha.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.BlendTextureAlpha">
            <summary>Blend texture alpha.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.BlendFactorAlpha">
            <summary>Blend factor alpha.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.BlendPreMultipliedTextureAlpha">
            <summary>Blend pre-multipled alpha.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.BlendCurrentAlpha">
            <summary>Blend current alpha.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.PreModulate">
            <summary>Pre modulate.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.ModulateAlphaAddColor">
            <summary>Modulate alpha, additive blending.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.ModulateColorAddAlpha">
            <summary>Modulate color, additive alpha.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.ModulateInverseAlphaAddColor">
            <summary>Modulate inverse alpha, additive color.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.ModulateInverseColorAddAlpha">
            <summary>Modulate inverse color, additive alpha.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.BumpEnvironmentMap">
            <summary>Bump mapping using an environment map.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.BumpEnvironmentMapLuminance">
            <summary>Bump mapping using an environment map with luminance.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.BumpDotProduct">
            <summary>Bump mapping using Dot3 product.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.MultiplyAdd">
            <summary>Multiply and Add.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperations.Lerp">
            <summary>Linear interpolation.</summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ImageOperationArguments">
            <summary>
            Enumeration containing arguments for image operations.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperationArguments.Current">
            <summary>Get the current setting.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperationArguments.Diffuse">
            <summary>Diffuse color from the vertex.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperationArguments.Texture">
            <summary>Texture color from the layer.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperationArguments.TextureFactor">
            <summary>Texture factor.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperationArguments.Temp">
            <summary>Temporary register.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperationArguments.Constant">
            <summary>Constant value.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperationArguments.AlphaReplicate">
            <summary>Copy alpha values to color values.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperationArguments.Complement">
            <summary>One's complement.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageOperationArguments.Specular">
            <summary>Specular value from the vertex.</summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ImageFilters">
            <summary>
            Enumeration containing filter types for images.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFilters.None">
            <summary>No filtering.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFilters.Point">
            <summary>Point filtering.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFilters.Bilinear">
            <summary>Bilinear filtering.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFilters.Anisotropic">
            <summary>Anisotropic filtering.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFilters.PyramidalQuadratic">
            <summary>Pyramidal quadratic filtering.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFilters.GaussianQuadratic">
            <summary>Gaussian quadratic filtering.</summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ImageType">
            <summary>
            Enumeration containing the types of images we can create.
            </summary>
            <remarks>The RenderTarget value is used internally by Gorgon and should not be used when creating an image, however it can be used when validating an image format with 
            <see cref="M:GorgonLibrary.Driver.ValidImageFormat">Driver.ValidImageFormat</see> or <see cref="M:GorgonLibrary.Graphics.Image.ValidateFormat">Image.ValidateFormat</see>.
            <para>The Dynamic value will ensure the image is dynamic whether the <see cref="P:GorgonLibrary.Driver.SupportDynamicTextures">Driver.SupportDynamicTextures</see> property is TRUE or FALSE.  
            If the hardware supports dynamic textures then Gorgon will make use of it, otherwise the image will be a normal image placed in the default pool.</para>
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageType.Normal">
            <summary>A normal static image.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageType.Dynamic">
            <summary>Dynamic image.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageType.RenderTarget">
            <summary>
            A render target image.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ImageAddressing">
            <summary>
            Enumeration containing the types of image addressing modes.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageAddressing.Wrapping">
            <summary>Make image wrap around.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageAddressing.Mirror">
            <summary>Make image mirror.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageAddressing.MirrorOnce">
            <summary>Make image mirror only once.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageAddressing.Clamp">
            <summary>Make image clamp to values..</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageAddressing.Border">
            <summary>Display a border.</summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ImageFileFormat">
            <summary>
            Enumeration containing image file formats.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFileFormat.BMP">
            <summary>
            Windows bitmap format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFileFormat.JPEG">
            <summary>
            Joint photographers expert group.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFileFormat.PNG">
            <summary>
            Portable network graphics.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFileFormat.TGA">
            <summary>
            Truevision Targa.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFileFormat.DDS">
            <summary>
            Direct X surface.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFileFormat.DIB">
            <summary>
            Device independant bitmap.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFileFormat.PPM">
            <summary>
            Portable pixmap. 
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFileFormat.PFM">
            <summary>
            Portable floating point.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.VertexLocations">
            <summary>
            Enumeration containing locations of the vertices.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexLocations.UpperLeft">
            <summary>Upper left corner.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexLocations.LowerLeft">
            <summary>Lower left corner.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexLocations.UpperRight">
            <summary>Upper right corner.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexLocations.LowerRight">
            <summary>Lower right corner.</summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.BlendingModes">
            <summary>
            Enumeration containing blending modes.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendingModes.None">
            <summary>No blending.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendingModes.Modulated">
            <summary>Modulated blending.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendingModes.Additive">
            <summary>Additive blending.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendingModes.ModulatedInverse">
            <summary>Inverse modulated blending.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendingModes.Color">
            <summary>Color blending.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendingModes.ColorAdditive">
            <summary>Additive color.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendingModes.PreMultiplied">
            <summary>Use premultiplied.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendingModes.Inverted">
            <summary>Invert.</summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.Smoothing">
            <summary>
            Enumeration for smoothing operations.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.Smoothing.None">
            <summary>No smoothing.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.Smoothing.Smooth">
            <summary>Smooth both zoomed in and out.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.Smoothing.MagnificationSmooth">
            <summary>Smooth only zoomed in.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.Smoothing.MinificationSmooth">
            <summary>Smooth only zoomed out.</summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.Alignment">
            <summary>
            Enumeration for aligment.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.Alignment.Left">
            <summary>Left aligned.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.Alignment.Center">
            <summary>Centered.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.Alignment.Right">
            <summary>Right aligned.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.Alignment.UpperLeft">
            <summary>Upper left corner.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.Alignment.UpperCenter">
            <summary>Upper centered.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.Alignment.UpperRight">
            <summary>Upper right.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.Alignment.LowerLeft">
            <summary>Lower left.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.Alignment.LowerCenter">
            <summary>Lower centered.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.Alignment.LowerRight">
            <summary>Lower right.</summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.StencilOperations">
            <summary>
            Enumeration for stencil buffer operations.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.StencilOperations.Zero">
            <summary>Write zero to the buffer.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.StencilOperations.Decrement">
            <summary>Decrement buffer value.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.StencilOperations.Increment">
            <summary>Increment buffer value.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.StencilOperations.Invert">
            <summary>Invert buffer value.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.StencilOperations.DecrementSaturate">
            <summary>Decrement buffer value, clamp to minimum.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.StencilOperations.IncrementSaturate">
            <summary>Increment buffer value, clamp to maximum.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.StencilOperations.Keep">
            <summary>Keep the current value.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.StencilOperations.Replace">
            <summary>Replace the value with the reference value.</summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.AlphaBlendOperation">
            <summary>
            Enumeration for alpha blending operations.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.AlphaBlendOperation.Zero">
            <summary>Blend factor of 0,0,0.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.AlphaBlendOperation.One">
            <summary>Blend factor is 1,1,1.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.AlphaBlendOperation.SourceColor">
            <summary>Blend factor is Rs', Gs', Bs', As.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.AlphaBlendOperation.SourceAlpha">
            <summary>Blend factor is As', As', As', As.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.AlphaBlendOperation.InverseSourceColor">
            <summary>Blend factor is 1-Rs', 1-Gs', 1-Bs', 1-As.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.AlphaBlendOperation.InverseSourceAlpha">
            <summary>Blend factor is 1-As', 1-As', 1-As', 1-As.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.AlphaBlendOperation.DestinationColor">
            <summary>Blend factor is Rd', Gd', Bd', Ad.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.AlphaBlendOperation.DestinationAlpha">
            <summary>Blend factor is Ad', Ad', Ad', Ad.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.AlphaBlendOperation.InverseDestinationColor">
            <summary>Blend factor is 1-Rd', 1-Gd', 1-Bd', 1-Ad.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.AlphaBlendOperation.InverseDestinationAlpha">
            <summary>Blend factor is 1-Ad', 1-Ad', 1-Ad', 1-Ad.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.AlphaBlendOperation.SourceAlphaSaturation">
            <summary>Blend factor is f,f,f,1 where f = min(A, 1-Ad)</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.AlphaBlendOperation.BothInverseSourceAlpha">
            <summary>Source blend factor is 1-As', 1-As', 1-As', 1-As and destination is As', As', As', As.  Overrides the blend destination, and is only valid if the SourceBlend state is true.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.AlphaBlendOperation.BlendFactor">
            <summary>Constant color blend factor.  Only valid if the driver SupportBlendingFactor is true.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.AlphaBlendOperation.InverseBlendFactor">
            <summary>Inverted constant color blend factor.  Only valid if the driver SupportBlendingFactor capability is true.</summary>
        </member>
        <member name="T:GorgonLibrary.Internal.VertexBuffer">
            <summary>
            Object to hold vertex data.
            </summary>
            <remarks>
            A vertex buffer can be used to batch up vertex data to send to the card as a packet
            of vertex information.  This will allow for faster rendering, as the fewer DrawPrimitive
            statements you have, the better.  Since Direct3D implicitly uses Vertex Buffers, we 
            should as well.  For anyone who wants to port this to OpenGL: it'd be interesting to
            see how much VBOs differ from Vertex Buffers.
            </remarks>
        </member>
        <member name="T:GorgonLibrary.Internal.DataBuffer">
            <summary>
            Abstract class for a buffer object.
            </summary>
            <remarks>
            Buffers are typically used to store the content data.  Vertex and Index buffers will
            derive from here.
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Internal.DataBuffer.GetDataStream(SlimDX.Direct3D9.LockFlags)">
            <summary>
            Function to retrieve the datastream for a locked object.
            </summary>
            <param name="lockFlags">Flags used in locking.</param>
            <returns>A data stream for a locked buffer.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.DataBuffer.LockBuffer(System.Int32,System.Int32,GorgonLibrary.Internal.BufferLockFlags)">
            <summary>
            Function to lock the buffer.
            </summary>
            <param name="offset">Offset in bytes to start lock at.</param>
            <param name="length">Length of data to lock in bytes.</param>
            <param name="flags">Locking flags.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.DataBuffer.Write``1(``0)">
            <summary>
            Function to write a piece of data to the buffer.
            </summary>
            <typeparam name="T">Type of data.</typeparam>
            <param name="data">Data to write.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.DataBuffer.Write``1(``0[])">
            <summary>
            Function to write an array of data to the buffer.
            </summary>
            <typeparam name="T">Type of data array.</typeparam>
            <param name="data">Data array to write.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.DataBuffer.Write``1(``0[],System.Int32,System.Int32)">
            <summary>
            Function to write an array of data to the buffer.
            </summary>
            <typeparam name="T">Type of data array.</typeparam>
            <param name="data">Data array to write.</param>
            <param name="startIndex">Index to start writing from.</param>
            <param name="count">Number of indices to write.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.DataBuffer.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Function to write an array of bytes to the buffer.
            </summary>
            <param name="data">Byte array to write.</param>
            <param name="startIndex">Index to start writing from.</param>
            <param name="count">Number of indices to write.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.DataBuffer.Write(System.IntPtr,System.Int32)">
            <summary>
            Function to write data from a pointer to the buffer.
            </summary>
            <param name="pointer">The pointer to copy data from.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.DataBuffer.Read``1">
            <summary>
            Function to read a piece of data from the buffer.
            </summary>
            <typeparam name="T">Type of data.</typeparam>
            <returns>Data in the buffer.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.DataBuffer.Read``1(System.Int32)">
            <summary>
            Function to read an array of data from the buffer.
            </summary>
            <typeparam name="T">Type of data array.</typeparam>
            <param name="count">Number of items to read.</param>
            <returns>An array of data from the buffer.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.DataBuffer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Function to read an array of byte data from the stream.
            </summary>
            <param name="data">Array to hold the byte data.</param>
            <param name="offset">Starting position in the stream to read from.</param>
            <param name="count">Number of bytes to read.</param>
            <returns>The number of bytes actually read.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.DataBuffer.Refresh">
            <summary>
            Function to (re)initialize the buffer.  
            This will destroy all data contained within the buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.DataBuffer.Unlock">
            <summary>
            Function to unlock the buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.DataBuffer.#ctor(GorgonLibrary.Internal.BufferUsages)">
            <summary>
            Constructor.
            </summary>
            <param name="bufferusage">Usage flags for the buffer.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.DataBuffer.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to release all resources, FALSE to only release unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.DataBuffer.Dispose">
            <summary>
            Function to perform clean up.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.DataBuffer.LockOffsetInBytes">
            <summary>
            Property to set or return the size of the lock in bytes.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.DataBuffer.LockSizeInBytes">
            <summary>
            Property to set or return the size of the lock in bytes.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.DataBuffer.IsLocked">
            <summary>
            Property to check and see if a buffer is locked or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.DataBuffer.BufferSize">
            <summary>
            Property to return the size of the buffer in bytes.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.DataBuffer.BufferUsage">
            <summary>
            Property to return the usage flags for this buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.DataBuffer.LockOffset">
            <summary>
            Property to return the offset of the lock in units of the buffers element size.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.DataBuffer.LockLength">
            <summary>
            Property to return the length of the locked in units of the buffer element size.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.VertexBuffer.CreateVertexBuffer">
            <summary>
            Function to create the vertex buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.VertexBuffer.GetDataStream(SlimDX.Direct3D9.LockFlags)">
            <summary>
            Function to retrieve the datastream for a locked object.
            </summary>
            <param name="lockFlags">Flags used in locking.</param>
            <returns>A data stream for a locked buffer.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.VertexBuffer.Release">
            <summary>
            Function to unlock and destroy the vertex buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.VertexBuffer.Refresh">
            <summary>
            Function to (re)create the vertex buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.VertexBuffer.Lock(System.Int32,System.Int32,GorgonLibrary.Internal.BufferLockFlags)">
            <summary>
            Function to lock the buffer for writing.
            </summary>
            <param name="vertexoffset">Vertex to start at.</param>
            <param name="vertexcount">Number of vertices to lock.</param>
            <param name="flags">Flags for locking.</param>
            <remarks>This function will lock by vertex, and account for vertex size.</remarks>
        </member>
        <member name="M:GorgonLibrary.Internal.VertexBuffer.Lock(System.Int32,GorgonLibrary.Internal.BufferLockFlags)">
            <summary>
            Function to lock the buffer for writing.
            </summary>
            <param name="vertexcount">Number of vertices to lock.</param>
            <param name="flags">Flags for locking.</param>
            <remarks>This function will lock by vertex, and account for vertex size.</remarks>
        </member>
        <member name="M:GorgonLibrary.Internal.VertexBuffer.Lock(GorgonLibrary.Internal.BufferLockFlags)">
            <summary>
            Function to lock the buffer for writing.
            </summary>
            <param name="flags">Flags for locking.</param>
            <remarks>
            This function will lock by vertex, and account for vertex size.  This function will
            also lock the entire buffer.</remarks>
        </member>
        <member name="M:GorgonLibrary.Internal.VertexBuffer.Unlock">
            <summary>
            Function to unlock a locked buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.VertexBuffer.#ctor(System.Int32,System.Int32,GorgonLibrary.Internal.BufferUsages)">
            <summary>
            Constructor.
            </summary>
            <param name="vertexsize">Size of a single vertex in bytes.</param>
            <param name="numvertices">Total number of vertices for this buffer.</param>
            <param name="bufferusage">Usage flags for the buffer.</param>		
        </member>
        <member name="M:GorgonLibrary.Internal.VertexBuffer.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to dispose all resources, FALSE to only release unmanaged.</param>
        </member>
        <member name="P:GorgonLibrary.Internal.VertexBuffer.D3DVertexBuffer">
            <summary>
            Property to return the Direct 3D vertex buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.VertexBuffer.VertexCount">
            <summary>
            Property to set or get the number of vertices for this buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.VertexBuffer.VertexSize">
            <summary>
            Property to set or get the size of each vertex in the buffer in bytes.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.VertexBuffer.LockOffset">
            <summary>
            Property to return the lock offset in vertices.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.VertexBuffer.LockLength">
            <summary>
            Property to return the length of locked data in vertices.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.TrackVector2D">
            <summary>
            Animation track used to animate 2D vector properties.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.Track">
            <summary>
            Object representing a track in an animation.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Track.CreateKey">
            <summary>
            Function to create a keyframe.
            </summary>
            <returns>The new keyframe in the correct context.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Track.SetAnimationOwner(GorgonLibrary.Graphics.Animation)">
            <summary>
            Function to set an animation as the owner of this track.
            </summary>
            <param name="owner">Owner of the animation.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Track.ScaleKeys(System.Single)">
            <summary>
            Function to scale the keys by a time value.
            </summary>
            <param name="scaleValue">Value to scale by.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Track.GetKeyAtIndex(System.Int32)">
            <summary>
            Function to return the key at the index.
            </summary>
            <param name="index">Index of the key to retrieve.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Track.ClearKeys">
            <summary>
            Function to clear the keys.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Track.RemoveKeyAtIndex(System.Int32)">
            <summary>
            Function to remove a key by index from the track.
            </summary>
            <param name="index">Index of the key to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Track.Remove(System.Single)">
            <summary>
            Function to remove a key at a given time interval.
            </summary>
            <param name="time">Time position to remove key from.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Track.Contains(System.Single)">
            <summary>
            Function to determine if a key exists at a given time or not.
            </summary>
            <param name="time">Time to check.</param>
            <returns>TRUE if a key exists, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Track.IndexOfKey(System.Single)">
            <summary>
            Function to return the index of a given key time.
            </summary>
            <param name="time">Time to check.</param>
            <returns>The index of the key, or -1 if not found.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Track.AddKey(GorgonLibrary.Graphics.KeyFrame)">
            <summary>
            Function to add a key to the track.
            </summary>
            <param name="key">Key to add.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Track.FindNearest(System.Single)">
            <summary>
            Function to find the nearest keys given frame time index.
            </summary>
            <param name="timeIndex">Time index to check.</param>
            <returns>A structure containing data on the point in time within the track.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Track.CopyKeysFrom(GorgonLibrary.Graphics.Track)">
            <summary>
            Function to copy keys from one track to another.
            </summary>
            <param name="track">Track to copy from.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Track.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.Track"/> class.
            </summary>
            <param name="name">Name of the track.</param>
            <param name="type">Type represented by the track.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Track.#ctor(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.Track"/> class.
            </summary>
            <param name="property">Property that is bound to the track.</param>
            <param name="type">Type represented by the track.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Track.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Track.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.Track.KeyList">
            <summary>
            Property to return the key list.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Track.BoundProperty">
            <summary>
            Property to set or return the bound property.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Track.EditCanDragValues">
            <summary>
            Property to set or return whether the editor can drag the values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Track.RoundValues">
            <summary>
            Property to set or return whether to round the values for the track.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Track.DataRange">
            <summary>
            Property to set or return the range of values for the data represented by the track.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Track.DataType">
            <summary>
            Property to return the type used by the track.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Track.InterpolationMode">
            <summary>
            Property to set or return the interpolation mode for the track.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Track.NeedsUpdate">
            <summary>
            Property to set or return whether the track needs updating.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Track.KeyCount">
            <summary>
            Property to return the number of assigned keys in this track.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Track.Owner">
            <summary>
            Property to return the owner of the track.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Track.Item(System.Single)">
            <summary>
            Property to return the key for a given frame time index.
            </summary>
            <param name="timeIndex">Frame time index to retrieve.</param>
            <returns>A key containing interpolated keyframe data.</returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.Track.NearestKeys">
            <summary>
            Value type containing information about the nearest keys for a time position.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Track.NearestKeys.#ctor(GorgonLibrary.Graphics.Track,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Owning track.</param>
            <param name="requestedTime">Track time requested.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.Track.NearestKeys.TrackTimePosition">
            <summary>
            Property to return the track time position requested.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Track.NearestKeys.PreviousKey">
            <summary>
            Property to return the previous key to the time position.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Track.NearestKeys.NextKey">
            <summary>
            Property to return the next key from the time position.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Track.NearestKeys.PreviousKeyIndex">
            <summary>
            Property to return the previous key index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Track.NearestKeys.NextKeyIndex">
            <summary>
            Property to return the next key index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Track.NearestKeys.KeyTimeDelta">
            <summary>
            Property to return the delta between the previous and next frames.  0 if equal to the previous keyframe, 1.0 if equal to the next keyframe.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.Track.FrameTimeSort">
            <summary>
            Object representing a sorter for frame times.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Track.FrameTimeSort.Compare(System.Single,System.Single)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.TrackVector2D.CreateKey">
            <summary>
            Function to create a keyframe.
            </summary>
            <returns>The new keyframe in the correct context.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.TrackVector2D.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.TrackVector2D"/> class.
            </summary>
            <param name="property">Property that is bound to the track.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.TrackVector2D.Item(System.Single)">
            <summary>
            Property to return the key for a given frame time index.
            </summary>
            <returns>A key containing interpolated keyframe data.</returns>
        </member>
        <member name="T:GorgonLibrary.DriverChangingHandler">
            <summary>
            Event delegate called when the driver is changing.
            </summary>
            <param name="sender">Sender of this event.</param>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="T:GorgonLibrary.DriverChangedHandler">
            <summary>
            Event delegate called when the driver has changed.
            </summary>
            <param name="sender">Sender of this event.</param>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="T:GorgonLibrary.DriverChangedArgs">
            <summary>
            Arguments for driver change events.
            </summary>
        </member>
        <member name="M:GorgonLibrary.DriverChangedArgs.#ctor(GorgonLibrary.Driver,GorgonLibrary.Driver)">
            <summary>
            Constructor.
            </summary>
            <param name="fromDriver">Driver we're changing from.</param>
            <param name="toDriver">Driver we're changing to.</param>
        </member>
        <member name="P:GorgonLibrary.DriverChangedArgs.FromDriver">
            <summary>
            Property to return the driver we're changing from.
            </summary>
        </member>
        <member name="P:GorgonLibrary.DriverChangedArgs.ToDriver">
            <summary>
            Property to return the driver we're switching to.
            </summary>
        </member>
        <member name="T:GorgonLibrary.DriverChangingArgs">
            <summary>
            Arguments for driver change events.
            </summary>
        </member>
        <member name="M:GorgonLibrary.DriverChangingArgs.#ctor(GorgonLibrary.Driver,GorgonLibrary.Driver)">
            <summary>
            Constructor.
            </summary>
            <param name="fromDriver">Driver we're changing from.</param>
            <param name="toDriver">Driver we're changing to.</param>
        </member>
        <member name="P:GorgonLibrary.DriverChangingArgs.Cancel">
            <summary>
            Property to set or return whether we should cancel the action or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ShaderPassList">
            <summary>
            Object representing a list of passes within a shader technique.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Collection`1">
            <summary>
            Abstract object representing a concrete version of the base collection.
            </summary>
            <remarks>
            This collection is inherited from when a standard collection interface is desired.  Several methods have been implmented, such as Remove.  
            <para>
            This collection inherits from the BaseCollection object and just implements some of the functionality for you.
            </para>
            </remarks>
            <typeparam name="T">Type of object to store.</typeparam>
        </member>
        <member name="T:GorgonLibrary.BaseCollection`1">
            <summary>
            An abstract class representing a standard collection of objects.
            </summary>
            <remarks>
            This was designed as a point of convenience to take some of the annoyance out of inheriting a collection.
            <para>
            This class provides a simplified method of inheriting a basic SortedList collection.  It holds no benefit over the System.Collections.Generic.SortedList object, which it uses internally.
            </para>
            	<para>
            This class overloads properties to retrieve or remove an item by its index as well as by its key.  These are setup as protected methods so that the user can implement the collection however they see fit.
            </para>
            	<para>
            This class, like the other collection classes, implements the IEnumerable interface already to return an iterator interface for enumeration.
            </para>
            </remarks>
            <typeparam name="T">Type of data to store.</typeparam>
        </member>
        <member name="M:GorgonLibrary.BaseCollection`1.GetItem(System.String)">
            <summary>
            Function to retrieve an item from the list by its key.
            </summary>
            <param name="key">Key for the object to retrieve.</param>
            <returns>Item in the collection.</returns>
        </member>
        <member name="M:GorgonLibrary.BaseCollection`1.GetItem(System.Int32)">
            <summary>
            Function to retrieve an item from the list by index.
            </summary>
            <param name="index">Index of the item to retrieve.</param>
        </member>
        <member name="M:GorgonLibrary.BaseCollection`1.RemoveItem(System.Int32)">
            <summary>
            Function to remove an object from the list by index.
            </summary>
            <param name="index">Index to remove at.</param>
        </member>
        <member name="M:GorgonLibrary.BaseCollection`1.RemoveItem(System.String)">
            <summary>
            Function to remove an object from the list by key.
            </summary>
            <param name="key">Key of the object to remove.</param>
        </member>
        <member name="M:GorgonLibrary.BaseCollection`1.ClearItems">
            <summary>
            Function to clear the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.BaseCollection`1.SetItem(System.String,`0)">
            <summary>
            Function to update an item in the list by its key.
            </summary>
            <param name="key">Key of the item to set.</param>
            <param name="item">Item to set.</param>
        </member>
        <member name="M:GorgonLibrary.BaseCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Function to update an item in the list by its index.
            </summary>
            <param name="index">Index of the item to set.</param>
            <param name="item">Item to set.</param>
        </member>
        <member name="M:GorgonLibrary.BaseCollection`1.AddItem(System.String,`0)">
            <summary>
            Function to add an item to the list.
            </summary>
            <param name="key">Key of the item to add.</param>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:GorgonLibrary.BaseCollection`1.Contains(System.String)">
            <summary>
            Function to return whether a key exists in the collection or not.
            </summary>
            <param name="key">Key of the object in the collection.</param>
            <returns>TRUE if the object exists, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.BaseCollection`1.StaticArray(System.Int32,System.Int32)">
            <summary>
            Function to return the items in the collection as a static array.
            </summary>
            <param name="start">Starting index of the collection.</param>
            <param name="count">Number of items to copy.</param>
            <returns>A static array containing a copy of this collection.</returns>
        </member>
        <member name="M:GorgonLibrary.BaseCollection`1.StaticArray">
            <summary>
            Function to return the items in the collection as a static array.
            </summary>
            <returns>A static array containing a copy of this collection.</returns>
        </member>
        <member name="M:GorgonLibrary.BaseCollection`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.BaseCollection`1"/> class.
            </summary>
            <param name="defaultsize">Default size of the collection.</param>
            <param name="caseSensitiveKeys">TRUE if the keys are case sensitive, FALSE if not.</param>
        </member>
        <member name="M:GorgonLibrary.BaseCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Function to return a new enumerator object.
            </summary>
            <returns>Enumerator object.</returns>
        </member>
        <member name="M:GorgonLibrary.BaseCollection`1.GetEnumerator">
            <summary>
            Function to return a new enumerator object.
            </summary>
            <returns>Enumerator object.</returns>
        </member>
        <member name="P:GorgonLibrary.BaseCollection`1.Items">
            <summary>
            Property to return the internal list of items.
            </summary>
        </member>
        <member name="P:GorgonLibrary.BaseCollection`1.IsCaseSensitive">
            <summary>
            Property to return whether the collection keys are case sensitive or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.BaseCollection`1.Count">
            <summary>
            Property to return the number of items in the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Collection`1.Remove(System.Int32)">
            <summary>
            Function to remove an object from the list by index.
            </summary>
            <param name="index">Index to remove at.</param>
        </member>
        <member name="M:GorgonLibrary.Collection`1.Remove(System.String)">
            <summary>
            Function to remove an object from the list by key.
            </summary>
            <param name="key">Key of the object to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Collection`1.Clear">
            <summary>
            Function to clear the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Collection`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Collection`1"/> class.
            </summary>
            <param name="defaultsize">Default size of the collection.</param>
            <param name="caseSensitiveKeys">TRUE if the keys are case sensitive, FALSE if not.</param>
        </member>
        <member name="M:GorgonLibrary.Collection`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Collection`1"/> class.
            </summary>
            <param name="caseSensitiveKeys">TRUE if the keys are case sensitive, FALSE if not.</param>
        </member>
        <member name="M:GorgonLibrary.Collection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Collection`1"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Collection`1.Item(System.Int32)">
            <summary>
            Property to get or set the item at the specified index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Collection`1.Item(System.String)">
            <summary>
            Property to get or set the item with the specified key.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderPassList.Add(GorgonLibrary.Graphics.ShaderTechnique)">
            <summary>
            Function to add the passes for the technique.
            </summary>
            <param name="technique">Technique to use.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderPassList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Serialization.StreamReaderEx">
            <summary>
            Object representing a stream reader that can keep its stream open after it's closed.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.StreamReaderEx.Close">
            <summary>
            Function to close the reader and its underlying stream if KeepStreamOpen is false.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.StreamReaderEx.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="input">Input stream.</param>
            <param name="encoder">Encoding for the stream reader.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="bufferSize">Sets the buffer size.</param>
            <param name="keepStreamOpen">TRUE to keep the underlying stream open when the reader is closed, FALSE for normal behaviour.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.StreamReaderEx.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="input">Input stream.</param>
            <param name="encoder">Encoding for the stream reader.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="keepStreamOpen">TRUE to keep the underlying stream open when the reader is closed, FALSE for normal behaviour.</param>		
        </member>
        <member name="M:GorgonLibrary.Serialization.StreamReaderEx.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="input">Input stream.</param>
            <param name="encoder">Encoding for the stream reader.</param>
            <param name="keepStreamOpen">TRUE to keep the underlying stream open when the reader is closed, FALSE for normal behaviour.</param>		
        </member>
        <member name="M:GorgonLibrary.Serialization.StreamReaderEx.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="input">Input stream.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="keepStreamOpen">TRUE to keep the underlying stream open when the reader is closed, FALSE for normal behaviour.</param>		
        </member>
        <member name="M:GorgonLibrary.Serialization.StreamReaderEx.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="input">Input stream.</param>
            <param name="keepStreamOpen">TRUE to keep the underlying stream open when the reader is closed, FALSE for normal behaviour.</param>
        </member>
        <member name="P:GorgonLibrary.Serialization.StreamReaderEx.KeepStreamOpen">
            <summary>
            Property to set or return whether to keep the underlying stream open or not after the reader is closed.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.Native.MSG">
            <summary>
            Value type representing a Window message.
            </summary>
            <remarks>
            See the MSDN documentation for more detail.
            <para>
            Used to pass various messages back and forth between the OS and the app.
            </para>
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.MSG.hwnd">
            <summary>Window handle.</summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.MSG.Message">
            <summary>Message to process.</summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.MSG.wParam">
            <summary>Window message parameter 1.</summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.MSG.lParam">
            <summary>Window message parameter 2.</summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.MSG.time">
            <summary>Time message was sent?</summary>
        </member>
        <member name="F:GorgonLibrary.Internal.Native.MSG.pt">
            <summary>Mouse pointer position.</summary>
        </member>
        <member name="T:GorgonLibrary.Internal.Native.Win32API">
            <summary>
            Static class for Native Win32 methods and corresponding structures.
            </summary>
            <remarks>
            This is a grouping of any Windows API calls used by Gorgon.
            <para>
            This list is by no means complete.  The Win32 API is just massive and would probably take a lifetime to map.
            </para>
            	<para>
            These calls are considered "unsafe" and thus should be used with care.  If you don't know how to use a function, or why you want it, you probably don't need to use them.
            </para>
            	<para>
            Please note that a lot of the enumerators/structures have slightly different names than their Win32 counterparts.  This was done for the sake of readability.  This does NOT affect their results or their effect on the results of their related functionality.
            </para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Internal.Native.Win32API.ShowCursor(System.Boolean)">
            <summary>
            Function to set the visibility of the mouse cursor.
            </summary>
            <param name="bShow">TRUE to show, FALSE to hide.</param>
            <returns>-1 if no mouse is installed, 0 or greater for the number of times this function has been called with TRUE.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Native.Win32API.PeekMessage(GorgonLibrary.Internal.Native.MSG@,System.IntPtr,System.Int32,System.Int32,GorgonLibrary.Internal.Native.PeekMessageFlags)">
            <summary>
            Function to process window messages.
            </summary>
            <remarks>See the MSDN documentation for a detailed description.</remarks>
            <param name="msg">Message block to retrieve.</param>
            <param name="hwnd">Window to retrieve messages from, FALSE for all.</param>
            <param name="wFilterMin">Minimum message.</param>
            <param name="wFilterMax">Maximum message.</param>
            <param name="flags">Flags for the function.</param>
            <returns>TRUE if messages are ready for processing, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Native.Win32API.TranslateMessage(GorgonLibrary.Internal.Native.MSG@)">
            <summary>
            Function to translate windows messages.
            </summary>
            <param name="msg">Message to translate.</param>
            <returns>TRUE if successful, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Native.Win32API.DispatchMessage(GorgonLibrary.Internal.Native.MSG@)">
            <summary>
            Function to dispatch windows messages.
            </summary>
            <param name="msg">Message to dispatch.</param>
            <returns>TRUE if successful, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Native.Win32API.QueryPerformanceFrequency(System.Int64@)">
            <summary>
            Function to return the frequency of the high precision timer.
            </summary>
            <remarks>See the MSDN documentation for a detailed description.</remarks>
            <param name="PerformanceFrequency">Frequency of timer.</param>
            <returns>TRUE if system supports high precision timing, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Native.Win32API.QueryPerformanceCounter(System.Int64@)">
            <summary>
            Function to return the time from a high resolution timer.
            </summary>
            <remarks>See the MSDN documentation for a detailed description.</remarks>
            <param name="PerformanceCount">Time from the timer.</param>
            <returns>TRUE if system supports high precision timing, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Native.Win32API.timeGetTime">
            <summary>
            Function to return time from a medium precision timer.
            </summary>
            <remarks>
            See the MSDN documentation for a detailed description.
            <para>
            This timer is of lower precision than the high precision timers, do not use unless
            your system does not support high resolution timers.
            </para>
            </remarks>
            <returns>Time in milliseconds.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Native.Win32API.timeBeginPeriod(System.UInt32)">
            <summary>
            Function to start a timing session.
            </summary>
            <param name="uPeriod">Minimum resolution in milliseconds.</param>
            <returns>0 if successful, non 0 if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Native.Win32API.timeEndPeriod(System.UInt32)">
            <summary>
            Function to end a timing session.
            </summary>
            <param name="uPeriod">Minimum resolution in milliseconds.</param>
            <returns>0 if successful, non 0 if not.</returns>
        </member>
        <member name="T:GorgonLibrary.InputDevices.InputPlugIn">
            <summary>
            Abstract interface for an input plug-in.
            </summary>
        </member>
        <member name="T:GorgonLibrary.PlugIns.PlugInEntryPoint">
            <summary>
            Abstract class representing a plug-in entry point.
            </summary>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInEntryPoint.CreateImplementation(System.Object[])">
            <summary>
            Function to create a new object from the plug-in.
            </summary>
            <param name="parameters">Parameters to pass.</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInEntryPoint.GetD3DObjects">
            <summary>
            Function to return an interface to Gorgon's Direct 3D objects.
            </summary>
            <returns>An instance of the D3D objects interface.</returns>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInEntryPoint.#ctor(System.String,System.String,GorgonLibrary.PlugIns.PlugInType)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.PlugIns.PlugInEntryPoint.PlugInType">
            <summary>
            Property to return the plug-in type.
            </summary>
        </member>
        <member name="P:GorgonLibrary.PlugIns.PlugInEntryPoint.PlugInPath">
            <summary>
            Property to return the plug-in path.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.InputPlugIn.Unload">
            <summary>
            Function to unload this plug-in.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.InputPlugIn.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.InputDevices.InputPlugIn"/> class.
            </summary>
            <param name="name">The name of the plug-in.</param>
            <param name="inputDLLPath">The input DLL path.</param>
        </member>
        <member name="P:GorgonLibrary.InputDevices.InputPlugIn.Description">
            <summary>
            Property to return a description of the input interface.
            </summary>
        </member>
        <member name="T:GorgonLibrary.CompareFunctions">
            <summary>
            Enumeration for comparison functions for use with depth, stencil and alpha tests.
            </summary>
        </member>
        <member name="F:GorgonLibrary.CompareFunctions.LessThan">
            <summary>Only accept value if less than current.</summary>
        </member>
        <member name="F:GorgonLibrary.CompareFunctions.GreaterThan">
            <summary>Only accept value if greater than current.</summary>
        </member>
        <member name="F:GorgonLibrary.CompareFunctions.Equal">
            <summary>Only accept value if equal to current.</summary>
        </member>
        <member name="F:GorgonLibrary.CompareFunctions.Always">
            <summary>Always accept value.</summary>
        </member>
        <member name="F:GorgonLibrary.CompareFunctions.Never">
            <summary>Never accept value.</summary>
        </member>
        <member name="F:GorgonLibrary.CompareFunctions.LessThanOrEqual">
            <summary>Only accept value if less than or equal to current.</summary>
        </member>
        <member name="F:GorgonLibrary.CompareFunctions.GreaterThanOrEqual">
            <summary>Only accept value if greater than or equal to current.</summary>
        </member>
        <member name="F:GorgonLibrary.CompareFunctions.NotEqual">
            <summary>Only accept value if not equal.</summary>
        </member>
        <member name="T:GorgonLibrary.VSyncIntervals">
            <summary>
            Enumeration for vertical sync presentation intervals.
            </summary>
        </member>
        <member name="F:GorgonLibrary.VSyncIntervals.IntervalNone">
            <summary>Immediate presentation.</summary>
        </member>
        <member name="F:GorgonLibrary.VSyncIntervals.IntervalOne">
            <summary>Wait one retrace before presenting.</summary>
        </member>
        <member name="F:GorgonLibrary.VSyncIntervals.IntervalTwo">
            <summary>Wait two retraces before presenting.</summary>
        </member>
        <member name="F:GorgonLibrary.VSyncIntervals.IntervalThree">
            <summary>Wait three retraces before presenting.</summary>
        </member>
        <member name="F:GorgonLibrary.VSyncIntervals.IntervalFour">
            <summary>Wait four retraces before presenting.</summary>
        </member>
        <member name="T:GorgonLibrary.ClearTargets">
            <summary>
            Enumeration to indicate which targets to clear.
            </summary>
        </member>
        <member name="F:GorgonLibrary.ClearTargets.None">
            <summary>Clear nothing.</summary>
        </member>
        <member name="F:GorgonLibrary.ClearTargets.BackBuffer">
            <summary>Clear the back buffer.</summary>
        </member>
        <member name="F:GorgonLibrary.ClearTargets.DepthBuffer">
            <summary>Clear the depth buffer.</summary>
        </member>
        <member name="F:GorgonLibrary.ClearTargets.StencilBuffer">
            <summary>Clear the stencil buffer.</summary>
        </member>
        <member name="T:GorgonLibrary.BackBufferFormats">
            <summary>
            Enumeration for back buffer formats.
            </summary>
        </member>
        <member name="F:GorgonLibrary.BackBufferFormats.BufferRGB101010A2">
            <summary>32 bit color. 10 bits for Red, Green, Blue.  2 bits for Alpha.</summary>
        </member>
        <member name="F:GorgonLibrary.BackBufferFormats.BufferRGB888">
            <summary>32/24 bit color. 8 bits for Red, Green, Blue.</summary>
        </member>
        <member name="F:GorgonLibrary.BackBufferFormats.BufferRGB555">
            <summary>15/16 bit color. 5 bits for Red, Green, Blue.</summary>
        </member>
        <member name="F:GorgonLibrary.BackBufferFormats.BufferRGB565">
            <summary>16 bit color. 5 bits for Red, 6 bits for Green, 5 bits for blue.</summary>
        </member>
        <member name="F:GorgonLibrary.BackBufferFormats.BufferP8">
            <summary>8 bit paletted color.  Unlikely that this mode will be supported.</summary>
        </member>
        <member name="T:GorgonLibrary.DepthBufferFormats">
            <summary>
            Enumeration for back buffer formats.
            </summary>
        </member>
        <member name="F:GorgonLibrary.DepthBufferFormats.BufferUnknown">
            <summary>Unknown type.</summary>
        </member>
        <member name="F:GorgonLibrary.DepthBufferFormats.BufferDepth15Stencil1">
            <summary>15 bit depth buffer, 1 bit stencil.</summary>
        </member>
        <member name="F:GorgonLibrary.DepthBufferFormats.BufferDepth16">
            <summary>16 bit depth buffer.</summary>
        </member>
        <member name="F:GorgonLibrary.DepthBufferFormats.BufferDepth16Lockable">
            <summary>16 bit depth buffer, lockable.</summary>
        </member>
        <member name="F:GorgonLibrary.DepthBufferFormats.BufferLuminance16">
            <summary>16 bit luminance.</summary>
        </member>
        <member name="F:GorgonLibrary.DepthBufferFormats.BufferDepth24">
            <summary>24 bit depth buffer.</summary>
        </member>
        <member name="F:GorgonLibrary.DepthBufferFormats.BufferDepth24Stencil4">
            <summary>24 bit depth buffer, 4 bit stencil.</summary>
        </member>
        <member name="F:GorgonLibrary.DepthBufferFormats.BufferDepth24Stencil8">
            <summary>24 bit depth buffer, 8 bit stencil.</summary>
        </member>
        <member name="F:GorgonLibrary.DepthBufferFormats.BufferDepth24Stencil8Lockable">
            <summary>24 bit depth buffer, 8 bit stencil, lockable.</summary>
        </member>
        <member name="F:GorgonLibrary.DepthBufferFormats.BufferDepth32">
            <summary>32 bit depth buffer.</summary>
        </member>
        <member name="F:GorgonLibrary.DepthBufferFormats.BufferDepth32Lockable">
            <summary>32 bit depth buffer, lockable.</summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.VertexField">
            <summary>
            Fields to be used in a vertex declaration.
            </summary>
            <remarks>
            The closest comparison that can be drawn is to a standard vertex type.
            For example:
            struct MyVertex
            {
               float x,y,z; 
               DWORD color;
            };
            
            A vertex field would be equivilant to the 'float' field in MyVertex and so forth.
            The field will contain elements based on the type, for example a type of float4
            will contain 4 floating point elements, using the previous comparison, the X, Y and Z
            would be elements of the field type 'float'.
            
            This allows us to maximize our flexibility when declaring our own vertex type.  Especially
            when compared to a Fixed Vertex pipeline. 
            There is one issue however:  As stated in the DirectX docs, the actual flexibility of a
            custom vertex type is questionable depending on your cards level of vertex/pixel shader
            suppport and is as follows:
            Driver Considerations
               Pre-DirectX 9.0 Drivers
                  The input declaration must be translatable to a valid FVF (have the same order of 
                  vertex elements and their data types).
                  Gaps in texture coordinates are not allowed. This means that if there is a vertex 
                  element with (D3DDECLUSAGE_TEXCOORD, n) then there also should be a vertex element 
                  with (D3DDECLUSAGE_TEXCOORD, n-1).
               DirectX 9.0 Drivers without Pixel Shader Version 3 Support
                  The input declaration must be translatable to a valid FVF (have the same order of 
                  vertex elements and their data types).
                  Gaps in texture coordinates are allowed.
               DirectX 9.0 Drivers with Pixel Shader Version 3 Support
                  More general declarations are allowed. 
                  Vertex elements can be in arbitrary order and can have any data types.
                  Multiple vertex elements can share the same stream offset and be of a different 
                  type in the same time if D3DDEVCAPS2_VERTEXELEMENTSCANSHARESTREAMOFFSET is set by 
                  device. 
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexField.SizeOf(GorgonLibrary.Graphics.VertexFieldType)">
            <summary>
            Function to return the size in bytes of a vertex field.
            </summary>
            <param name="type">Type of the field to evaluate.</param>
            <returns>Size of the field in bytes.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexField.FieldElementCount(GorgonLibrary.Graphics.VertexFieldType)">
            <summary>
            Function to return the number of elements within a field.
            </summary>
            <param name="type">Type of this field.</param>
            <returns>The number of elements within a field.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexField.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexField.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexField.op_Equality(GorgonLibrary.Graphics.VertexField,GorgonLibrary.Graphics.VertexField)">
            <summary>
            Operator to test two vertex fields for equality.
            </summary>
            <param name="left">Left vertex field to compare.</param>
            <param name="right">Right vertex field to compare.</param>
            <returns>TRUE if left and right are equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexField.op_Inequality(GorgonLibrary.Graphics.VertexField,GorgonLibrary.Graphics.VertexField)">
            <summary>
            Operator to test two vertex fields for inequality.
            </summary>
            <param name="left">Left vertex field to compare.</param>
            <param name="right">Right vertex field to compare.</param>
            <returns>TRUE if left and right are not equal, FALSE if they are.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexField.#ctor(System.Int16,System.Int16,GorgonLibrary.Graphics.VertexFieldContext,GorgonLibrary.Graphics.VertexFieldType,System.Byte)">
            <summary>
            Constructor.
            </summary>
            <param name="stream">Stream to bind this field with.</param>
            <param name="fieldOffset">Position of the field within the field type.</param>
            <param name="context">The purpose of this field.</param>
            <param name="fieldType">Data type of the field.</param>
            <param name="index">Index of the item, only applicable to certain types of fields.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.VertexField.Offset">
            <summary>
            Property to return the offset of this field within the field type.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.VertexField.Context">
            <summary>
            Property to return the context of this field.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.VertexField.Type">
            <summary>
            Property to return the data type of the field.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.VertexField.Index">
            <summary>
            Property to return the index of this field.
            Only applicable to particular types of fields (i.e. textures).
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.VertexField.Bytes">
            <summary>
            Property to return the number of bytes occupied by this field.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.VertexField.Stream">
            <summary>
            Property to return the stream to which this element is bound.
            </summary>
        </member>
        <member name="T:GorgonLibrary.VideoMode">
            <summary>
            Structure for holding information about a video mode.
            </summary>
            <remarks>
            Since an adapter can have a whole boatload of video modes, we should
            have a system of keeping track of the available video modes.
            </remarks>
        </member>
        <member name="F:GorgonLibrary.VideoMode.Width">
            <summary>Width of this video mode.</summary>
        </member>
        <member name="F:GorgonLibrary.VideoMode.Height">
            <summary>Height of this video mode.</summary>
        </member>
        <member name="F:GorgonLibrary.VideoMode.RefreshRate">
            <summary>Refresh Rate of this video mode in Hz.</summary>
        </member>
        <member name="F:GorgonLibrary.VideoMode.Format">
            <summary>Buffer format for this video mode.</summary>
        </member>
        <member name="M:GorgonLibrary.VideoMode.Equals(System.Object)">
            <summary>
            Function to determine if another object is equal to this one.
            </summary>
            <param name="obj">Object to test.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.VideoMode.GetHashCode">
            <summary>
            Function to return a hash code for this object.
            </summary>
            <returns>Hash code of the object.</returns>
        </member>
        <member name="M:GorgonLibrary.VideoMode.ToString">
            <summary>
            Function to return a string representation of this object.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:GorgonLibrary.VideoMode.op_Equality(GorgonLibrary.VideoMode,GorgonLibrary.VideoMode)">
            <summary>
            Operator to test for equality.
            </summary>
            <param name="left">Left operand to test.</param>
            <param name="right">Right operand to test.</param>
            <returns>TRUE if items are identical, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.VideoMode.op_Inequality(GorgonLibrary.VideoMode,GorgonLibrary.VideoMode)">
            <summary>
            Operator to test for inequality.
            </summary>
            <param name="left">Left operand to test.</param>
            <param name="right">Right operand to test.</param>
            <returns>FALSE if items are identical, TRUE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.VideoMode.#ctor(System.Int32,System.Int32,System.Int32,GorgonLibrary.BackBufferFormats)">
            <summary>
            Overloaded constructor.
            </summary>
            <param name="width">Width of the video mode.</param>
            <param name="height">Height of the video mode.</param>
            <param name="refresh">RefreshRate rate of the video mode.</param>
            <param name="format">D3D Format of the video mode.</param>
        </member>
        <member name="P:GorgonLibrary.VideoMode.Bpp">
            <summary>
            Property to return the bits per pixel of the video mode.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.Viewport">
            <summary>
            Class to represent a virtual window within a rendering window.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Viewport.SetWindowDimensions(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function to set the window dimensions.
            </summary>
            <param name="left">Relative horizontal position of the window.</param>
            <param name="top">Relative vertical position of the window.</param>
            <param name="width">Relative width of the window.</param>
            <param name="height">Relative height of the window.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Viewport.SetWindowDimensions(System.Drawing.Rectangle)">
            <summary>
            Function to set the window dimensions.
            </summary>
            <param name="dimensions">Relative dimensions of the window.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Viewport.Refresh(GorgonLibrary.Graphics.RenderTarget)">
            <summary>
            Function to refresh the window.
            </summary>
            <param name="renderTarget">Render target to use.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="left">Relative horizontal position of the window.</param>
            <param name="top">Relative vertical position of the window.</param>
            <param name="width">Relative width of the window.</param>
            <param name="height">Relative height of the window.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.Viewport.UseScissorTestClipping">
            <summary>
            Property to return whether to use scissor testing for window clipping.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Viewport.View">
            <summary>
            Property to return the view port rectangle.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Viewport.Updated">
            <summary>
            Property to return whether or not the view has been updated or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Viewport.Left">
            <summary>
            Property to set or return the horizontal window position.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Viewport.Top">
            <summary>
            Property to set or return the vertical window position.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Viewport.Width">
            <summary>
            Property to set or return the width of the window.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Viewport.Height">
            <summary>
            Property to set or return the height of the window.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Viewport.ProjectionMatrix">
            <summary>
            Property to return the orthogonal projection matrix.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Viewport.Dimensions">
            <summary>
            Property to set or return the window dimensions.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Viewport.ClippedDimensions">
            <summary>
            Property to return the window dimensions clipped to the current render target.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.SpriteStateCache">
            <summary>
            Object representing a cache for sprite/text sprite render states.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.SpriteStateCache.SetBlendMode(GorgonLibrary.Graphics.BlendingModes)">
            <summary>
            Function to set the blending modes.
            </summary>
            <param name="value">Blending value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.SpriteStateCache.SetAlphaBlendMode(GorgonLibrary.Graphics.BlendingModes)">
            <summary>
            Function to set the blending modes for the alpha channel.
            </summary>
            <param name="value">Blending value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.SpriteStateCache.SetStates(GorgonLibrary.Graphics.IRenderableStates)">
            <summary>
            Function to set specific render states per sprite.
            </summary>
            <param name="renderObject">Cache to retrieve states from.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.SpriteStateCache.StateChanged(GorgonLibrary.Graphics.IRenderableStates,GorgonLibrary.Graphics.Image)">
            <summary>
            Function to return whether the state has changed or not.
            </summary>
            <param name="renderObject">Cache to retrieve states from.</param>
            <param name="image">Image used by the renderable.</param>
            <returns>TRUE if the state has changed, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.SpriteStateCache.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.SpriteStateCache.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to release all resources, FALSE to only release unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.SpriteStateCache.Dispose">
            <summary>
            Function to perform clean up.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.SpriteStateCache.DeviceLost">
            <summary>
            Function called when the device is put into a lost state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.SpriteStateCache.DeviceReset">
            <summary>
            Function called when the device is restored from a lost state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.SpriteStateCache.ForceRelease">
            <summary>
            Function called when the device is forcably destroying resources.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.DepthBufferEnabled">
            <summary>
            Property to set or return whether the depth buffer (if applicable) is enabled or not.
            </summary>
            <remarks>If the current render target does not have a depth buffer attached (i.e. <see cref="P:GorgonLibrary.Graphics.RenderTarget.UseDepthBuffer">RenderTarget.Graphics.RenderTarget</see>=false) then this property will always return FALSE.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.MaxSpritesPerBatch">
            <summary>
            Property to set or return the maximum number of sprites per batch.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalDither">
            <summary>
            Property to set or return whether to dither the images or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalBlending">
            <summary>
            Property to set or return the global sprite blending function.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalSourceBlend">
            <summary>
            Property to set or return the source blending operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalAlphaSourceBlend">
            <summary>
            Property to set or return the source blending operation for the alpha channel.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalDepthWriteEnabled">
            <summary>
            Property to set or return whether the depth buffer writing (if applicable) is enabled or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalDepthBufferBias">
            <summary>
            Property to set or return whether the depth buffer bias (if applicable).
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalDepthBufferTestFunction">
            <summary>
            Property to set or return whether the depth buffer test function (if applicable) is enabled or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalDestinationBlend">
            <summary>
            Property to set or return the destination blending operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalAlphaDestinationBlend">
            <summary>
            Property to set or return the destination blending operation for the alpha channel.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalAlphaMaskValue">
            <summary>
            Property to set or return the global sprite alpha mask value.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalAlphaMaskFunction">
            <summary>
            Property to set or return the global alpha masking function.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalSmoothing">
            <summary>
            Property to set or return the global smoothing function for sprites.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalStencilEnabled">
            <summary>
            Property to set or return whether to enable the use of the stencil buffer or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalStencilReference">
            <summary>
            Property to set or return the reference value for the stencil buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalStencilMask">
            <summary>
            Property to set or return the mask value for the stencil buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalStencilPassOperation">
            <summary>
            Property to set or return the operation for passing stencil values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalStencilFailOperation">
            <summary>
            Property to set or return the operation for the failing stencil values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalStencilZFailOperation">
            <summary>
            Property to set or return the stencil operation for the failing depth values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalStencilCompare">
            <summary>
            Property to set or return the stencil comparison function.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalHorizontalWrapMode">
            <summary>
            Property to set or return the horizontal wrapping mode to use.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.SpriteStateCache.GlobalVerticalWrapMode">
            <summary>
            Property to set or return the vertical wrapping mode to use.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.IShaderParameter">
            <summary>
            Interface defining a shader parameter.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.GetBoolean">
            <summary>
            Function to return a boolean value.
            </summary>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.GetBooleanArray(System.Int32)">
            <summary>
            Function to return a boolean value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <returns>A boolean value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.GetFloat">
            <summary>
            Function to return a floating point value.
            </summary>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.GetFloatArray(System.Int32)">
            <summary>
            Function to return a floating point value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <returns>A floating point value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.GetInteger">
            <summary>
            Function to return an integer value.
            </summary>
            <returns>An integer value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.GetIntegerArray(System.Int32)">
            <summary>
            Function to return an integer value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <returns>An integer value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.GetString">
            <summary>
            Function to return a string value.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.GetVector4D">
            <summary>
            Function to return a 4D vector value.
            </summary>
            <returns>A 4D vector value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.GetVector4DArray(System.Int32)">
            <summary>
            Function to return a 4D vector value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <returns>A 4D vector value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.GetMatrix">
            <summary>
            Function to return a matrix value.
            </summary>
            <returns>A matrix value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.GetMatrixArray(System.Int32)">
            <summary>
            Function to return a matrix value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <returns>A matrix value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.GetMatrix(System.Boolean)">
            <summary>
            Function to return a matrix value.
            </summary>
            <param name="transpose">TRUE if returning a transposed matrix, FALSE if not.</param>
            <returns>A matrix value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.GetMatrixArray(System.Int32,System.Boolean)">
            <summary>
            Function to return a matrix value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <param name="transpose">TRUE if returning a transposed matrix, FALSE if not.</param>
            <returns>A matrix value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.GetColor">
            <summary>
            Function to return a color value.
            </summary>
            <returns>A color value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.GetColorArray(System.Int32)">
            <summary>
            Function to return a color value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <returns>A color value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.GetImage(GorgonLibrary.Graphics.Image)">
            <summary>
            Function to return an image value.
            </summary>
            <param name="sourceImage">Image to use to store the shader texture.</param>		
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.GetImage">
            <summary>
            Function to return an image value.
            </summary>
            <returns>An image value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.SetValue(System.Boolean)">
            <summary>
            Function to set a boolean parameter value.
            </summary>
            <param name="value">A boolean value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.SetValue(System.Boolean[])">
            <summary>
            Function to set a boolean array parameter value.
            </summary>
            <param name="value">An array of boolean values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.SetValue(System.Single)">
            <summary>
            Function to set a floating point parameter value.
            </summary>
            <param name="value">A floating point value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.SetValue(System.Single[])">
            <summary>
            Function to set a floating point array parameter value.
            </summary>
            <param name="value">An array of floating point values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.SetValue(System.Int32)">
            <summary>
            Function to set an integer parameter value.
            </summary>
            <param name="value">An integer value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.SetValue(System.Int32[])">
            <summary>
            Function to set an integer array parameter value.
            </summary>
            <param name="value">An array of integer values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.SetValue(System.String)">
            <summary>
            Function to set a string parameter value.
            </summary>
            <param name="value">A string value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.SetValue(GorgonLibrary.Vector4D)">
            <summary>
            Function to set a 4D vector parameter value.
            </summary>
            <param name="value">A 4D vector value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.SetValue(GorgonLibrary.Vector4D[])">
            <summary>
            Function to set a 4D vector parameter array value.
            </summary>
            <param name="value">An array of 4D vector values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.SetValue(GorgonLibrary.Matrix)">
            <summary>
            Function to set an array of matrix values.
            </summary>
            <param name="value">An array of matrix values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.SetValue(GorgonLibrary.Matrix[])">
            <summary>
            Function to set an array of matrix values.
            </summary>
            <param name="value">An array of matrix values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.SetValue(System.Drawing.Color)">
            <summary>
            Function to set a color parameter value
            </summary>
            <param name="value">A color value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.SetValue(System.Drawing.Color[])">
            <summary>
            Function to set an array of color parameter values
            </summary>
            <param name="value">An array of color values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.SetValue(GorgonLibrary.Graphics.Image)">
            <summary>
            Function to set an image parameter value.
            </summary>
            <param name="image">Image to set.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderParameter.SetValue(GorgonLibrary.Graphics.RenderImage)">
            <summary>
            Function to set a render image parameter value.
            </summary>
            <param name="image">Render image to set.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.IShaderParameter.Name">
            <summary>
            Property to return the name of the shader parameter.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IShaderParameter.ArrayLength">
            <summary>
            Property to return the size of an array parameter.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IShaderParameter.ValueType">
            <summary>
            Property to return the type of the value.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IShaderParameter.Owner">
            <summary>
            Property to return the owning shader for this parameter.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IShaderParameter.IsArray">
            <summary>
            Property to return whether this value is an array or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.BoundingCircle">
            <summary>
            Value type representing a bounding circle.
            </summary>
        </member>
        <member name="F:GorgonLibrary.BoundingCircle.Empty">
            <summary>
            Property to return an empty bounding circle.
            </summary>
        </member>
        <member name="M:GorgonLibrary.BoundingCircle.Intersects(GorgonLibrary.Vector2D)">
            <summary>
            Function to determine if a point intersects the bounding circle.
            </summary>
            <param name="point">Point to test.</param>
            <returns>TRUE if the point is inside the circle, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.BoundingCircle.Intersects(System.Drawing.Rectangle)">
            <summary>
            Function to determine if a rectangle intersects with the circle.
            </summary>
            <param name="rect">Rectangle to test.</param>
            <returns>TRUE if an intersection occured, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.BoundingCircle.Intersects(GorgonLibrary.BoundingCircle)">
            <summary>
            Function to determine if a bound circle intersects with this circle.
            </summary>
            <param name="circle">Circle to test.</param>
            <returns>TRUE if an intersection occured, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.BoundingCircle.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.BoundingCircle.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:GorgonLibrary.BoundingCircle.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.BoundingCircle.op_Equality(GorgonLibrary.BoundingCircle,GorgonLibrary.BoundingCircle)">
            <summary>
            Operator to test bounding circles for equality.
            </summary>
            <param name="left">Left circle to test.</param>
            <param name="right">Right circle to test.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.BoundingCircle.op_Inequality(GorgonLibrary.BoundingCircle,GorgonLibrary.BoundingCircle)">
            <summary>
            Operator to test bounding circles for inequality.
            </summary>
            <param name="left">Left circle to test.</param>
            <param name="right">Right circle to test.</param>
            <returns>TRUE if not equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.BoundingCircle.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.BoundingCircle"/> struct.
            </summary>
            <param name="empty">TRUE to mark as empty, FALSE for non-empty.</param>
        </member>
        <member name="M:GorgonLibrary.BoundingCircle.#ctor(GorgonLibrary.Vector2D,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.BoundingCircle"/> struct.
            </summary>
            <param name="center">The center of the bounding circle.</param>
            <param name="radius">The radius of the bounding circle.</param>
        </member>
        <member name="P:GorgonLibrary.BoundingCircle.IsEmpty">
            <summary>
            Property to return whether the bounding circle is empty or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.BoundingCircle.Radius">
            <summary>
            Property to set or return the radius of the bounding circle.
            </summary>
        </member>
        <member name="P:GorgonLibrary.BoundingCircle.Center">
            <summary>
            Property to set or return the center of the bounding circle.
            </summary>
        </member>
        <member name="T:GorgonLibrary.InputDevices.InputDevice">
            <summary>
            Abstract class for input devices.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.InputDevice.BindDevice">
            <summary>
            Function to bind the input device.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.InputDevice.UnbindDevice">
            <summary>
            Function to unbind the input device.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.InputDevice.Dispose">
            <summary>
            Function to perform clean up on the object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.InputDevice.#ctor(GorgonLibrary.InputDevices.Input)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">The control that owns this device.</param>
        </member>
        <member name="P:GorgonLibrary.InputDevices.InputDevice.InputInterface">
            <summary>
            Property to return the input interface owner for this device.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.InputDevice.Acquired">
            <summary>
            Property to return whether the device is acquired or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.InputDevice.Exclusive">
            <summary>
            Property to set or return whether the window has exclusive access or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.InputDevice.AllowBackground">
            <summary>
            Property to set or return whether to allow this device to keep sending data even if the window is not focused.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.InputDevice.Enabled">
            <summary>
            Property to return whether the device is bound or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.GlyphNode">
            <summary>
            Object used to represent a glyph node.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.GlyphNode.Add(System.Drawing.Size)">
            <summary>
            Function to add a node to this node.
            </summary>
            <param name="dimensions">Dimensions of the image.</param>
            <returns>A new image node.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.GlyphNode.#ctor(GorgonLibrary.Internal.GlyphNode)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Internal.GlyphNode"/> class.
            </summary>
            <param name="parent">The parent of this node, NULL for root.</param>
        </member>
        <member name="P:GorgonLibrary.Internal.GlyphNode.ImageRect">
            <summary>
            Property to set or return the image rectangle.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.GlyphNode.ImagePath">
            <summary>
            Property to return the path to the image that occupies this area.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.GlyphNode.Parent">
            <summary>
            Property to return the image node.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.GlyphNode.Left">
            <summary>
            Property to set or return the left child node.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.GlyphNode.Right">
            <summary>
            Property to set or return the right child node.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.GlyphNode.IsLeaf">
            <summary>
            Property to return whether this node is a leaf node or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.GlyphTree">
            <summary>
            Object used to represent a spatial tree of glyphs.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.GlyphTree.Add(System.Drawing.Size)">
            <summary>
            Function to add an image to the tree.
            </summary>
            <param name="imageDims">Image dimensions.</param>
            <returns>A rectangle for the item.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.GlyphTree.#ctor(System.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Internal.GlyphTree"/> class.
            </summary>
            <param name="imageSize">Size of the image image.</param>
        </member>
        <member name="P:GorgonLibrary.Internal.GlyphTree.Root">
            <summary>
            Property to return the root image node.
            </summary>
        </member>
        <member name="T:GorgonLibrary.FileSystems.FolderFileSystem">
            <summary>
            Object representing a standard disk based filesystem.
            </summary>
        </member>
        <member name="T:GorgonLibrary.FileSystems.FileSystem">
            <summary>
            Abstract object representing a virtual filesystem.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.AddXMLEntry(System.Xml.XmlNode,GorgonLibrary.FileSystems.FileSystemPath)">
            <summary>
            Function to recursively add files to the XML index.
            </summary>
            <param name="parent">Parent XML node.</param>
            <param name="path">Path to add.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.SaveIndex(System.String)">
            <summary>
            Function to save the file index.
            </summary>
            <param name="filePath">Root of the file system on the disk.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.SaveFileData(System.String,GorgonLibrary.FileSystems.FileSystemFile)">
            <summary>
            Function to save the file data.
            </summary>
            <param name="filePath">Root of the file system on the disk.</param>
            <param name="file">File to save.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.InitializeSecurity">
            <summary>
            Function to initialize any security for the encrypted data.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.OnFileRead(System.Object,GorgonLibrary.FileSystems.FileSystemReadWriteEventArgs)">
            <summary>
            Function to fire the file read event.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.OnFileWrite(System.Object,GorgonLibrary.FileSystems.FileSystemReadWriteEventArgs)">
            <summary>
            Function to fire the file write event.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.OnDataLoad(System.Object,GorgonLibrary.FileSystems.FileSystemDataIOEventArgs)">
            <summary>
            Function to fire the data load event.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.OnDataSave(System.Object,GorgonLibrary.FileSystems.FileSystemDataIOEventArgs)">
            <summary>
            Function to fire the data save event.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.RebuildIndex">
            <summary>
            Function to reset the directory index XML.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.RebuildIndex(System.Boolean)">
            <summary>
            Function to reset the directory index XML.
            </summary>
            <param name="getFileEntries">TRUE to get all the path and file entries, FALSE to create a stub.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.ValidateIndexXML">
            <summary>
            Function to validate the index XML file.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.DecodeData(GorgonLibrary.FileSystems.FileSystemFile)">
            <summary>
            Function to load an object from the file system.
            </summary>
            <param name="file">File to read.</param>
            <returns>The raw binary data for the file.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.Clear">
            <summary>
            Function clear files and paths.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.EncodeData(GorgonLibrary.FileSystems.FileSystemPath,System.String,System.Byte[])">
            <summary>
            Function to encode object data.
            </summary>
            <param name="path">Path to add the file into.</param>
            <param name="filePath">File path.</param>
            <param name="data">Data to encode.</param>
            <returns>A new file.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.Load(GorgonLibrary.FileSystems.FileSystemFile)">
            <summary>
            Function to load an object from the file system.
            </summary>
            <param name="file">File to load.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.SaveFinalize">
            <summary>
            Function called when the save function is complete.
            </summary>
            <remarks>This function is called at the end of the save function, regardless of whether the save was successful or not.</remarks>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.SaveInitialize(System.String)">
            <summary>
            Function called when a save operation begins.
            </summary>
            <param name="filePath">Path to the file system location.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.OnPathDelete(GorgonLibrary.FileSystems.FileSystemPath)">
            <summary>
            Function used by custom file systems to perform custom actions when a path is deleted.
            </summary>
            <param name="filePath">Path to be deleted.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.OnFileDelete(GorgonLibrary.FileSystems.FileSystemFile)">
            <summary>
            Funciton used by custom file systems to perform custom actions when a file is deleted.
            </summary>
            <param name="file">File to delete.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.InitializeIndex(System.String)">
            <summary>
            Function to initialize the file system indexing.
            </summary>
            <param name="rootPath">Path to the root of the file system.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.Mount">
            <summary>
            Function to add a path and all files under it to the file system.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.IsValidForProvider(GorgonLibrary.FileSystems.FileSystemProvider,System.IO.Stream)">
            <summary>
            Function return whether a file system is valid for a given file system provider.
            </summary>
            <param name="provider">Provider to test.</param>
            <param name="fileSystemStream">Stream containing the file system root.</param>
            <returns>TRUE if the provider can support this filesystem, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.CreateAuthorization(System.Windows.Forms.Form)">
            <summary>
            Function used to create a user friendly authorization interface.
            </summary>
            <param name="owner">Form that would potentially own any dialogs we create.</param>
            <returns>A code to indicate the status.</returns>
            <remarks>You'd typically use this to create a login screen or file browser or whatever to define the authorization for the user.</remarks>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.GetAuthorization(System.Windows.Forms.Form)">
            <summary>
            Function user to get the authorization from the user.
            </summary>
            <param name="owner">Form that would potentially own any dialogs we create.</param>
            <returns>A code to indicate the status.</returns>
            <remarks>You'd typically use this to create a login screen or file browser or whatever to define the authorization for the user.</remarks>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.Create(System.String,GorgonLibrary.FileSystems.FileSystemProvider)">
            <summary>
            Function to create a file system.
            </summary>
            <param name="fileSystemName">Name of the file system.</param>
            <param name="provider">Provider for the file system.</param>
            <returns>Return the file system loaded from the provider.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.Create(System.String,System.String)">
            <summary>
            Function to create a file system.
            </summary>
            <param name="fileSystemName">Name of the file system.</param>
            <param name="provider">Name of the provider for the file system.</param>
            <returns>Return the file system loaded from the provider.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.FullPathName(System.String)">
            <summary>
            Function to adjust a pathname for use with the file system.
            </summary>
            <param name="path">Path to adjust.</param>
            <returns>Adjusted pathname.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.FullFileName(System.String)">
            <summary>
            Function to adjust a pathname for use with the file system.
            </summary>
            <param name="path">Path to adjust.</param>
            <returns>Adjusted pathname.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.GetPath(System.String)">
            <summary>
            Function to retrieve a file system path object.
            </summary>
            <param name="path">Path to return.</param>
            <returns>The file system path object.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.FileSystemSize(System.Boolean)">
            <summary>
            Function to return the size of the file system in bytes.
            </summary>
            <param name="compressed">TRUE to get compressed size, FALSE to return normal size.</param>
            <returns>Size of the file system in bytes.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.CreatePath(System.String)">
            <summary>
            Function to create a path.
            </summary>
            <param name="path">File system path to create.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.DeletePath(System.String)">
            <summary>
            Function to delete a path.
            </summary>
            <param name="path">File system path to delete.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.WriteFile(System.String,System.Byte[])">
            <summary>
            Function to add an array of byte data as a specific file type.
            </summary>
            <param name="filePath">Path and filename.</param>
            <param name="objectData">Byte array containing object data.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.ReadFile(System.String)">
            <summary>
            Function to read a file and return it as an array of binary data.
            </summary>
            <param name="filePath">Path and file name of the file.</param>
            <returns>A byte array containing the file.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.OpenFileStream(System.String,System.Boolean)">
            <summary>
            Function to open a stream into a file.
            </summary>
            <param name="filePath">File to get a stream from.</param>
            <param name="readOnly">TRUE for read-only access, FALSE if not.</param>
            <returns>A new file stream.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.OpenFileStream(System.String)">
            <summary>
            Function to open a stream into a file.
            </summary>
            <param name="filePath">File to get a stream from.</param>
            <returns>A new file stream.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.AssignRoot(System.String)">
            <summary>
            Function to assign the root of this file system.
            </summary>
            <param name="path">Path to the root of the file system.</param>
            <remarks>Path can be a folder that contains the file system XML index for a folder file system or a file (typically 
            ending with extension .gorPack) for a packed file system.</remarks>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.AssignRoot(System.IO.Stream)">
            <summary>
            Function to assign the root of this file system.
            </summary>
            <param name="fileSystemStream">The file stream that will contain the file system.</param>
            <remarks>Due to the nature of a file stream, the file system within the stream must be a packed file system.</remarks>
            <exception cref="T:System.InvalidOperationException">The file system is not a packed file system.</exception>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.Delete(System.String)">
            <summary>
            Function to remove a file from the file system.
            </summary>
            <param name="file">Path and filename of the object to delete.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.FileExists(System.String)">
            <summary>
            Function to return whether an file exists or not.
            </summary>
            <param name="filePath">Filename and path to the entry.</param>
            <returns>TRUE if entry exists, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.PathExists(System.String)">
            <summary>
            Function to return whether a path exists or not.
            </summary>
            <param name="path">Path to the check.</param>
            <returns>TRUE if the path exists, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.FindFile(System.String)">
            <summary>
            Function to search for a specific file name within the mounted paths.
            </summary>
            <param name="fileName">Name of the file to search for.</param>
            <returns>The file if found, NULL if not found.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.Save(System.IO.Stream)">
            <summary>
            Function to save the file system to a stream.
            </summary>
            <param name="fileSystemStream">Stream to save into.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.Save(System.String)">
            <summary>
            Function to save the file system.
            </summary>
            <param name="filePath">Path to save the file system into.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.#ctor(System.String,GorgonLibrary.FileSystems.FileSystemProvider)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the file system.</param>
            <param name="provider">Provider for this file system.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to release all resources, FALSE to only release unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystem.Dispose">
            <summary>
            Function to perform clean up.
            </summary>
        </member>
        <member name="E:GorgonLibrary.FileSystems.FileSystem.FileRead">
            <summary>
            File system read event.
            </summary>
        </member>
        <member name="E:GorgonLibrary.FileSystems.FileSystem.FileWrite">
            <summary>
            File system write event.
            </summary>
        </member>
        <member name="E:GorgonLibrary.FileSystems.FileSystem.DataLoad">
            <summary>
            File system data loading event.  This is called when the file data is actually being read from the disk.
            </summary>
        </member>
        <member name="E:GorgonLibrary.FileSystems.FileSystem.DataSave">
            <summary>
            File system data save event.  This is called when the file data is actually committed to the disk.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystem.FileIndexXML">
            <summary>
            Property to return the XML document containing the file index list.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystem.FileSystemHeader">
            <summary>
            Property to return the header for the file system.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystem.PurgeDeletedFiles">
            <summary>
            Property to set or return whether to purge any deleted files or paths when a folder file system is saved.
            </summary>
            <remarks>This property only applies to folder based file systems.  Packed file systems will always have their deleted items purged regardless of this setting.</remarks>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystem.Paths">
            <summary>
            Property to return the file system root path.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystem.Provider">
            <summary>
            Property to return the type of file system.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystem.AuthenticationData">
            <summary>
            Property to set or return the authentication data for the file system.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystem.IsRootInStream">
            <summary>
            Property to return whether the root of the file system is a stream or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystem.FileSystemStreamOffset">
            <summary>
            Property to set or return the offset of the file system within the stream.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystem.Item(System.String)">
            <summary>
            Property to return the a file system file.
            </summary>
            <param name="filePath">Path of the file system file.</param>
            <returns>File system file.</returns>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystem.FileCount">
            <summary>
            Property to return the number of files in the file system.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystem.Root">
            <summary>
            Property to set or return the root path of the file system.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FolderFileSystem.OnPathDelete(GorgonLibrary.FileSystems.FileSystemPath)">
            <summary>
            Function used by custom file systems to perform custom actions when a path is deleted.
            </summary>
            <param name="filePath">Path to be deleted.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FolderFileSystem.OnFileDelete(GorgonLibrary.FileSystems.FileSystemFile)">
            <summary>
            Funciton used by custom file systems to perform custom actions when a file is deleted.
            </summary>
            <param name="file">File to delete.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FolderFileSystem.EncodeData(GorgonLibrary.FileSystems.FileSystemPath,System.String,System.Byte[])">
            <summary>
            Function to encode object data.
            </summary>
            <param name="path">Path to add the file into.</param>
            <param name="filePath">File path.</param>
            <param name="data">Data to encode.</param>
            <returns>A new file system file.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FolderFileSystem.DecodeData(GorgonLibrary.FileSystems.FileSystemFile)">
            <summary>
            Function to load an object from the file system.
            </summary>
            <param name="file">File to read.</param>
            <returns>The raw binary data for the file.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FolderFileSystem.Load(GorgonLibrary.FileSystems.FileSystemFile)">
            <summary>
            Function to load an object from the file system.
            </summary>
            <param name="file">File to load.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FolderFileSystem.SaveIndex(System.String)">
            <summary>
            Function to save the file index.
            </summary>
            <param name="filePath">Root of the file system on the disk.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FolderFileSystem.SaveFinalize">
            <summary>
            Function called when the save function is complete.
            </summary>
            <remarks>This function is called at the end of the save function, regardless of whether the save was successful or not.</remarks>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FolderFileSystem.SaveFileData(System.String,GorgonLibrary.FileSystems.FileSystemFile)">
            <summary>
            Function to save the file data.
            </summary>
            <param name="filePath">Root of the file system on the disk.</param>
            <param name="file">File to save.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FolderFileSystem.IsValidForProvider(GorgonLibrary.FileSystems.FileSystemProvider,System.IO.Stream)">
            <summary>
            Function return whether a file system is valid for a given file system provider.
            </summary>
            <param name="provider">Provider to test.</param>
            <param name="fileSystemStream">Stream containing the file system root.</param>
            <returns>
            TRUE if the provider can support this filesystem, FALSE if not.
            </returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FolderFileSystem.AssignRoot(System.String)">
            <summary>
            Function to assign the root of this file system.
            </summary>
            <param name="path">Path to the root of the file system.</param>
            <remarks>Path can be a folder that contains the file system XML index for a folder file system or a file (typically
            ending with extension .gorPack) for a packed file system.</remarks>
            <exception cref="T:System.IO.DirectoryNotFoundException">Path to the file system was not found.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">The file system could not load its index file.</exception>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FolderFileSystem.#ctor(System.String,GorgonLibrary.FileSystems.FileSystemProvider)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of this file system.</param>
            <param name="provider">File system provider.</param>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FolderFileSystem.FileSystemHeader">
            <summary>
            Property to return the header for the file system.
            </summary>
            <value></value>
        </member>
        <member name="T:GorgonLibrary.FileSystems.FileSystemPath">
            <summary>
            Object representing a piece of a path for a file system.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemPath.GetAllFiles(GorgonLibrary.FileSystems.FileList)">
            <summary>
            Function to recursively grab all file entries.
            </summary>
            <param name="files">List of files.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemPath.FilesUpdated">
            <summary>
            Function to that will tell this path that its files were updated.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemPath.GetFiles">
            <summary>
            Function to return all files from this path and child paths.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemPath.Copy(System.String)">
            <summary>
            Function to create a deep copy of this path.
            </summary>
            <param name="newName">New name of the path.</param>
            <returns>A deep copy of the path.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemPath.ValidPath(System.String)">
            <summary>
            Function to return whether or not a path is valid.
            </summary>
            <param name="pathName">Name of the path to validate.</param>
            <returns>TRUE if valid, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemPath.#ctor(GorgonLibrary.FileSystems.FileSystemPath,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="parent">Parent of this path.</param>
            <param name="name">Name of the path.</param>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemPath.Name">
            <summary>
            Read-only property to return the name of this object.
            </summary>
            <value>
            A <see cref="T:System.String">string</see> containing the name of this object.
            </value>
            <remarks>The name of an object need not be unique, however if it is used as a key value for a collection then it should be unique.</remarks>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemPath.Parent">
            <summary>
            Property to return the parent of the path.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemPath.InvalidCharacters">
            <summary>
            Property to return the invalid characters for a filename.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemPath.FullPath">
            <summary>
            Property to return the full path for this path node.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemPath.Files">
            <summary>
            Property to return the list of files within the path.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemPath.ChildPaths">
            <summary>
            Property to return the paths that are under this path.
            </summary>
        </member>
        <member name="T:GorgonLibrary.FileSystems.FileSystemFileList">
            <summary>
            Object representing a list of files.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemFileList.TransformFilename(System.String)">
            <summary>
            Function to return a transformed file name.
            </summary>
            <param name="fileName">Name of the file to transform.</param>
            <returns>The transformed file name.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemFileList.RemoveItem(System.String)">
            <summary>
            Function to remove an object from the list by key.
            </summary>
            <param name="key">Key of the object to remove.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemFileList.RemoveItem(System.Int32)">
            <summary>
            Function to remove an object from the list by index.
            </summary>
            <param name="index">Index to remove at.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemFileList.ClearItems">
            <summary>
            Function to clear the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemFileList.Contains(System.String)">
            <summary>
            Function to return whether a key exists in the collection or not.
            </summary>
            <param name="key">Key of the object in the collection.</param>
            <returns>TRUE if the object exists, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemFileList.Add(System.String,System.Byte[],System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Function to add a file to the list.
            </summary>
            <param name="fileName">Filename of the file to add.</param>
            <param name="data">Data for the file.</param>
            <param name="originalSize">Original file size.</param>
            <param name="compressedSize">Compressed size if compressed.</param>
            <param name="encrypted">TRUE if encrypted, FALSE if not.</param>
            <param name="dateTime">File create/update date and time.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemFileList.#ctor(GorgonLibrary.FileSystems.FileSystemPath)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Path that owns this list.</param>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemFileList.Item(System.Int32)">
            <summary>
            Property to return the file by index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemFileList.Item(System.String)">
            <summary>
            Property to return the file with the specified key name.
            </summary>
        </member>
        <member name="T:GorgonLibrary.FileSystems.FileSystemCache">
            <summary>
            Object representing a cache for file systems.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemCache.DestroyAll">
            <summary>
            Function to remove all file systems.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemCache.#cctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemCache.FileSystems">
            <summary>
            Property to return the file systems.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.KeyVector2D">
            <summary>
            A key frame for manipulating data of the type <see cref="T:GorgonLibrary.Vector2D"/>.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.KeyFrame">
            <summary>
            Abstract object representing an animation key.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Serialization.ISerializable">
            <summary>
            Interface for serializable objects.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.ISerializable.WriteData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to persist the data into the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ISerializable.ReadData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to retrieve data from the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="P:GorgonLibrary.Serialization.ISerializable.Filename">
            <summary>
            Property to return the filename of the serializable object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Serialization.ISerializable.IsResource">
            <summary>
            Property to return whether this object is an embedded resource.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyFrame.UpdateKeyData(GorgonLibrary.Graphics.Track.NearestKeys)">
            <summary>
            Function to update the data within the key frame.
            </summary>
            <param name="keyData">Interpolated key data used to help calculate data between keys.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyFrame.Update">
            <summary>
            Function to perform an update of the bound property.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyFrame.CopyTo(System.Single)">
            <summary>
            Function to copy this key into a new time.
            </summary>
            <param name="newTime">Time index to place the copy into.</param>
            <returns>The copy of the this key.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyFrame.#ctor(System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="time">Time at which this key will reside.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyFrame.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyFrame.WriteData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to persist the data into the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyFrame.ReadData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to retrieve data from the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyFrame.BoundProperty">
            <summary>
            Property to return the bound property for the owner track.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyFrame.Owner">
            <summary>
            Property to set or return the track that owns this key.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyFrame.Time">
            <summary>
            Property to set or return the time index (in milliseconds) for this keyframe.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyFrame.DataType">
            <summary>
            Property to return the type of data stored in the key.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyFrame.GorgonLibrary#Serialization#ISerializable#Filename">
            <summary>
            Property to return the filename of the serializable object.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyFrame.GorgonLibrary#Serialization#ISerializable#IsResource">
            <summary>
            Property to return whether this object is an embedded resource.
            </summary>
            <value></value>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyVector2D.SetupSplines">
            <summary>
            Function to set up the splines.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyVector2D.UpdateKeyData(GorgonLibrary.Graphics.Track.NearestKeys)">
            <summary>
            Function to update the data within the key frame.
            </summary>
            <param name="keyData">Interpolated key data used to help calculate data between keys.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyVector2D.ReadData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to retrieve data from the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyVector2D.WriteData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to persist the data into the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyVector2D.Update">
            <summary>
            Function to perform an update of the bound property.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyVector2D.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyVector2D.#ctor(System.Single,GorgonLibrary.Vector2D)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.KeyVector2D"/> class.
            </summary>
            <param name="time">The time (in milliseconds) at which this keyframe exists within the track.</param>
            <param name="value">Value for the key.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyVector2D.Value">
            <summary>
            Property to set or return the value of the key.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyVector2D.DataType">
            <summary>
            Property to return the type of data stored in the key.
            </summary>
            <value></value>
        </member>
        <member name="T:GorgonLibrary.Graphics.AnimationList">
            <summary>
            Object representing a list of animations.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.AnimationList.Clear">
            <summary>
            Function to clear the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.AnimationList.Remove(System.Int32)">
            <summary>
            Function to remove an object from the list by index.
            </summary>
            <param name="index">Index to remove at.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.AnimationList.Remove(System.String)">
            <summary>
            Function to remove an object from the list by key.
            </summary>
            <param name="key">Key of the object to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.AnimationList.Add(GorgonLibrary.Graphics.Animation)">
            <summary>
            Function to add an animation.
            </summary>
            <param name="animation">Animation to add.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.AnimationList.Rename(System.String,System.String)">
            <summary>
            Function to rename an animation.
            </summary>
            <param name="oldName">Old name of the animation.</param>
            <param name="newName">New name of the animation.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.AnimationList.CopyTo(GorgonLibrary.Graphics.IAnimated)">
            <summary>
            Function to copy the animations in this animation list to another.
            </summary>
            <param name="destination">Animated object that will receive a copy of the animations in this list.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.AnimationList.#ctor(GorgonLibrary.Graphics.IAnimated)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.AnimationList"/> class.
            </summary>
            <param name="owner">Owner of this animation list.</param>
        </member>
        <member name="T:GorgonLibrary.Graphics.RenderTarget">
            <summary>
            Object for render targets.
            </summary>
            <remarks>
            The rendering display can be redirected into a texture rather than the back
            buffer, you can also redirect the display to another window via swap chains.  
            This is accomplished through the use of render targets.  
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Draw(GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1[])">
            <summary>
            Function to perform the actual drawing on the target.
            </summary>
            <param name="vertices">Vertices to draw.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.ConvertToImageData(GorgonLibrary.Graphics.Image,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to perform the conversion.
            </summary>
            <param name="image">Image to receive the render target data.</param>
            <param name="targetFormat">Format of the render target.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.SetColorBuffer(SlimDX.Direct3D9.Surface)">
            <summary>
            Function to set the color buffer.
            </summary>
            <param name="surface">The buffer to use.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.SetDepthBuffer(SlimDX.Direct3D9.Surface)">
            <summary>
            Function to set the depth buffer.
            </summary>
            <param name="depthBuffer">The buffer to use.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.SetBlendMode(GorgonLibrary.Graphics.BlendingModes)">
            <summary>
            Function to set the blending modes.
            </summary>
            <param name="value">Blending value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.SetAlphaBlendMode(GorgonLibrary.Graphics.BlendingModes)">
            <summary>
            Function to set the blending modes for the alpha value
            </summary>
            <param name="value">Blending value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.UpdateDepthStencilFormat(System.Boolean,System.Boolean)">
            <summary>
            Function to return a viable stencil/depth buffer.
            </summary>
            <param name="usestencil">TRUE to use a stencil, FALSE to exclude.</param>
            <param name="usedepth">TRUE to use a depth buffer, FALSE to exclude.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.SetActive">
            <summary>
            Function to set this render target and its default window as currently active.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.RestoreActive">
            <summary>
            Function to reset the target/viewport to the previous view and target.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.BeginDrawing">
            <summary>
            Function to lock a layer so that we can begin drawing.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.EndDrawing">
            <summary>
            Function to end the lock on the layer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.SetPoint(System.Single,System.Single,System.Drawing.Color,System.Single,System.Single)">
            <summary>
            Function to draw a single point.
            </summary>
            <param name="x">Starting horizontal position.</param>
            <param name="y">Starting vertical position.</param>
            <param name="color">Color for the line.</param>
            <param name="penWidth">Width of the point.</param>
            <param name="penHeight">Height of the point.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.SetPoint(System.Single,System.Single,System.Drawing.Color,GorgonLibrary.Vector2D)">
            <summary>
            Function to draw a single point.
            </summary>
            <param name="x">Starting horizontal position.</param>
            <param name="y">Starting vertical position.</param>
            <param name="color">Color for the line.</param>
            <param name="penSize">Size of the point.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.SetPoint(System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Function to draw a single point.
            </summary>
            <param name="x">Starting horizontal position.</param>
            <param name="y">Starting vertical position.</param>
            <param name="color">Color for the line.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Line(System.Single,System.Single,System.Single,System.Single,System.Drawing.Color,System.Single,System.Single)">
            <summary>
            Function to draw a line.
            </summary>
            <param name="x">Starting horizontal position.</param>
            <param name="y">Starting vertical position.</param>
            <param name="width">Width of the line.</param>
            <param name="height">Height of the line.</param>
            <param name="color">Color for the line.</param>
            <param name="penWidth">Width of the point.</param>
            <param name="penHeight">Height of the point.</param>
            <remarks>Taken from: SDL_gfx Written by Andreas Schiffler</remarks>		
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Line(System.Single,System.Single,System.Single,System.Single,System.Drawing.Color,GorgonLibrary.Vector2D)">
            <summary>
            Function to draw a line.
            </summary>
            <param name="x">Starting horizontal position.</param>
            <param name="y">Starting vertical position.</param>
            <param name="width">Width of the line.</param>
            <param name="height">Height of the line.</param>
            <param name="color">Color for the line.</param>
            <param name="penSize">Size of the pen.</param>		
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Line(System.Single,System.Single,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Function to draw a line.
            </summary>
            <param name="x">Starting horizontal position.</param>
            <param name="y">Starting vertical position.</param>
            <param name="width">Width of the line.</param>
            <param name="height">Height of the line.</param>
            <param name="color">Color for the line.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Rectangle(System.Single,System.Single,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Function to draw an unfilled rectangle.
            </summary>
            <param name="x">Starting horizontal position.</param>
            <param name="y">Starting vertical position.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="color">Color for the rectangle.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GorgonLibrary.Graphics.RenderTarget.FilledTriangle(GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,System.Drawing.Color)" -->
        <member name="M:GorgonLibrary.Graphics.RenderTarget.FilledRectangle(System.Single,System.Single,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Function to draw a filled rectangle.
            </summary>
            <param name="x">Starting horizontal position.</param>
            <param name="y">Starting vertical position.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="color">Color for the rectangle.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.HorizontalLine(System.Single,System.Single,System.Single,System.Drawing.Color,System.Single,System.Single)">
            <summary>
            Function to draw a horizontal line.
            </summary>
            <param name="x">Starting horizontal position.</param>
            <param name="y">Starting vertical position.</param>
            <param name="width">Width of the line.</param>
            <param name="color">Color for the line.</param>
            <param name="penWidth">Width of the pen.</param>
            <param name="penHeight">Height of the pen.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.HorizontalLine(System.Single,System.Single,System.Single,System.Drawing.Color,GorgonLibrary.Vector2D)">
            <summary>
            Function to draw a horizontal line.
            </summary>
            <param name="x">Starting horizontal position.</param>
            <param name="y">Starting vertical position.</param>
            <param name="width">Width of the line.</param>
            <param name="color">Color for the line.</param>
            <param name="penSize">Size of the pen.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.HorizontalLine(System.Single,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Function to draw a horizontal line.
            </summary>
            <param name="x">Starting horizontal position.</param>
            <param name="y">Starting vertical position.</param>
            <param name="width">Width of the line.</param>
            <param name="color">Color for the line.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.VerticalLine(System.Single,System.Single,System.Single,System.Drawing.Color,System.Single,System.Single)">
            <summary>
            Function to draw a horizontal line.
            </summary>
            <param name="x">Starting horizontal position.</param>
            <param name="y">Starting vertical position.</param>
            <param name="height">Height of the line.</param>
            <param name="color">Color for the line.</param>
            <param name="penWidth">Width of the pen.</param>
            <param name="penHeight">Height of the pen.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.VerticalLine(System.Single,System.Single,System.Single,System.Drawing.Color,GorgonLibrary.Vector2D)">
            <summary>
            Function to draw a horizontal line.
            </summary>
            <param name="x">Starting horizontal position.</param>
            <param name="y">Starting vertical position.</param>
            <param name="height">Height of the line.</param>
            <param name="color">Color for the line.</param>
            <param name="penSize">Size of the pen.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.VerticalLine(System.Single,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Function to draw a horizontal line.
            </summary>
            <param name="x">Starting horizontal position.</param>
            <param name="y">Starting vertical position.</param>
            <param name="height">Height of the line.</param>
            <param name="color">Color for the line.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Circle(System.Single,System.Single,System.Single,System.Drawing.Color,System.Single,System.Single)">
            <summary>
            Function to draw an unfilled circle.
            </summary>
            <param name="x">Starting horizontal position of the circle.</param>
            <param name="y">Starting vertical position of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="colorValue">Color of the circle.</param>
            <param name="penWidth">Width of the pen.</param>
            <param name="penHeight">Height of the pen.</param>
            <remarks>Taken from: Wikipedia entry on circle drawing</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Circle(System.Single,System.Single,System.Single,System.Drawing.Color,GorgonLibrary.Vector2D)">
            <summary>
            Function to draw an unfilled circle.
            </summary>
            <param name="x">Starting horizontal position of the circle.</param>
            <param name="y">Starting vertical position of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="colorValue">Color of the circle.</param>
            <param name="penSize">Size of the pen.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Circle(System.Single,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Function to draw an unfilled circle.
            </summary>
            <param name="x">Starting horizontal position of the circle.</param>
            <param name="y">Starting vertical position of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="colorValue">Color of the circle.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.FilledEllipse(System.Single,System.Single,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Function to draw a filled ellipse.
            </summary>
            <param name="x">Horizontal position of the ellipse.</param>
            <param name="y">Vertical position of the ellipse.</param>
            <param name="xradius">Horizontal radius.</param>
            <param name="yradius">Vertical radius.</param>
            <param name="colorValue">Color of the ellipse.</param>
            <remarks>Taken from: SDL_gfx Written by Andreas Schiffler</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.FilledCircle(System.Single,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Function to draw a filled circle.
            </summary>
            <param name="x">Starting horizontal position of the circle.</param>
            <param name="y">Starting vertical position of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="colorValue">Color of the circle.</param>
            <remarks>Taken from: SDL_gfx Written by Andreas Schiffler</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Ellipse(System.Single,System.Single,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Function to draw an empty ellipse.
            </summary>
            <param name="x">Horizontal position of the ellipse.</param>
            <param name="y">Vertical position of the ellipse.</param>
            <param name="xradius">Horizontal radius.</param>
            <param name="yradius">Vertical radius.</param>
            <param name="color">Color of the ellipse.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Ellipse(System.Single,System.Single,System.Single,System.Single,System.Drawing.Color,GorgonLibrary.Vector2D)">
            <summary>
            Function to draw an empty ellipse.
            </summary>
            <param name="x">Horizontal position of the ellipse.</param>
            <param name="y">Vertical position of the ellipse.</param>
            <param name="xradius">Horizontal radius.</param>
            <param name="yradius">Vertical radius.</param>
            <param name="color">Color of the ellipse.</param>
            <param name="penSize">Size of the pen.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Ellipse(System.Single,System.Single,System.Single,System.Single,System.Drawing.Color,System.Single,System.Single)">
            <summary>
            Function to draw an empty ellipse.
            </summary>
            <param name="x">Horizontal position of the ellipse.</param>
            <param name="y">Vertical position of the ellipse.</param>
            <param name="xradius">Horizontal radius.</param>
            <param name="yradius">Vertical radius.</param>
            <param name="color">Color of the ellipse.</param>
            <param name="penWidth">Width of the pen.</param>
            <param name="penHeight">Height of the pen.</param>
            <remarks>Taken from implementation of fast ellipse drawing paper for BASIC.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Refresh">
            <summary>
            Function to refresh this render window and its child windows.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Clear(System.Drawing.Color,System.Single,System.Int32)">
            <summary>
            Function to clear the screen, depth buffer and stencil buffer.
            </summary>
            <param name="color">Color to clear the backbuffer with.</param>
            <param name="depthValue">Value to overwrite the depth buffer with.</param>
            <param name="stencilValue">Value to overwrite the stencil buffer with.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Clear(System.Drawing.Color,System.Single)">
            <summary>
            Function to clear the screen, depth buffer and stencil buffer.
            </summary>
            <param name="color">Color to clear the backbuffer with.</param>
            <param name="depthValue">Value to overwrite the depth buffer with.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Clear(System.Drawing.Color)">
            <summary>
            Function to clear the screen, depth buffer and stencil buffer.
            </summary>
            <param name="color">Color to clear the backbuffer with.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Clear">
            <summary>
            Function to clear the screen, depth buffer and stencil buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Update">
            <summary>
            Function to render the scene for this target.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.CopyToImage(GorgonLibrary.Graphics.RenderImage)">
            <summary>
            Function to copy the render target into a render target image.
            </summary>
            <param name="destination">The render image that will receive the data.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.CopyToImage(GorgonLibrary.Graphics.Image)">
            <summary>
            Function to copy the render target into an image.
            </summary>
            <param name="image">Image that will receive the data.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of this render target.</param>
            <param name="width">Width of the render target.</param>
            <param name="height">Height of the render target.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to release all resources, FALSE to only release unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.Dispose">
            <summary>
            Function to perform clean up.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.DeviceLost">
            <summary>
            Function called when the device is in a lost state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.DeviceReset">
            <summary>
            Function called when the device is reset.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTarget.ForceRelease">
            <summary>
            Function to force the loss of the objects data.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.DepthBuffer">
            <summary>
            Property to return a z buffer for a swap chain.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.SurfaceBuffer">
            <summary>
            Property to return the surface for this render target.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.IsValidForMRTPostPixelShaderBlending">
            <summary>
            Property to return whether this render target is valid for post pixel shader blending.
            </summary>
            <remarks>
            If the driver supports post pixel shader blending of render targets (<see cref="P:GorgonLibrary.Driver.SupportMRTPostPixelShaderBlending">Driver.SupportMRTPostPixelShaderBlending</see> = True) 
            then this property needs to be queried to find out if the particular render target can support post pixel shader blending.
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.BorderColor">
            <summary>
            Property to set or return the color of the border when the wrapping mode is set to Border.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.DrawingPattern">
            <summary>
            Property to set or return the image used as the pattern for drawing.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.DrawingPatternOffset">
            <summary>
            Property to set or return the offset of the drawing pattern.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.ClearEachFrame">
            <summary>
            Property to set or return flags that indicate what should be cleared per frame.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.DefaultView">
            <summary>
            Property to set or return the active window.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.ProjectionMatrix">
            <summary>
            Property to return the projection matrix.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.InheritClearFlags">
            <summary>
            Property to set or return whether this render target will inherit the per frame clearing settings from Gorgon.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.UseDepthBuffer">
            <summary>
            Property to set or return whether we want to use a depth buffer or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.UseStencilBuffer">
            <summary>
            Property to set or return whether we want to use a stencil buffer or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.Width">
            <summary>
            Property to set or return the width of the render target.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.Height">
            <summary>
            Property to set or return the height of the render target.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.BackgroundColor">
            <summary>
            Property to get or set the default background color for the render target.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.PrimitiveDepth">
            <summary>
            Property to set or return the depth value for primitives being drawn.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.GorgonLibrary#Graphics#IRenderableStates#CullingMode">
            <summary>
            Property to set or return the culling mode.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.DepthWriteEnabled">
            <summary>
            Property to set or return whether to enable the depth buffer (if applicable) writing or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.DepthBufferBias">
            <summary>
            Property to set or return (if applicable) the depth buffer bias.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.DepthTestFunction">
            <summary>
            Property to set or return the depth buffer (if applicable) testing comparison function.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.WrapMode">
            <summary>
            Property to set or return the wrapping mode to use.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.HorizontalWrapMode">
            <summary>
            Property to set or return the horizontal wrapping mode to use.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.VerticalWrapMode">
            <summary>
            Property to set or return the vertical wrapping mode to use.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.Smoothing">
            <summary>
            Property to set or return the type of smoothing for the sprites.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.AlphaMaskFunction">
            <summary>
            Property to set or return the function used for alpha masking.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.AlphaMaskValue">
            <summary>
            Property to set or return the alpha value used for alpha masking.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.BlendingMode">
            <summary>
            Property to set or return the blending mode.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.SourceBlend">
            <summary>
            Property to set or return the source blending operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.DestinationBlend">
            <summary>
            Property to set or return the destination blending operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.SourceBlendAlpha">
            <summary>
            Property to set or return the source blending operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.DestinationBlendAlpha">
            <summary>
            Property to set or return the destination blending operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.StencilEnabled">
            <summary>
            Property to set or return whether to enable the use of the stencil buffer or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.StencilReference">
            <summary>
            Property to set or return the reference value for the stencil buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.StencilMask">
            <summary>
            Property to set or return the mask value for the stencil buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.StencilPassOperation">
            <summary>
            Property to set or return the operation for passing stencil values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.StencilFailOperation">
            <summary>
            Property to set or return the operation for the failing stencil values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.StencilZFailOperation">
            <summary>
            Property to set or return the stencil operation for the failing depth values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.StencilCompare">
            <summary>
            Property to set or return the stencil comparison function.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.PrimitiveStyle">
            <summary>
            Property to return the primitive style for the object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTarget.UseIndices">
            <summary>
            Property to return whether to use an index buffer or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.LogfileCannotOpenException">
            <summary>
            Cannot open log file.
            </summary>
        </member>
        <member name="M:GorgonLibrary.LogfileCannotOpenException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.LogfileCannotOpenException"/> class.
            </summary>
            <param name="fileName">Name of the log file.</param>
            <param name="ex">The inner exception.</param>
        </member>
        <member name="M:GorgonLibrary.LogfileCannotOpenException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.LogfileCannotOpenException"/> class.
            </summary>
            <param name="fileName">Name of the log file.</param>
        </member>
        <member name="T:GorgonLibrary.LogfileCannotWriteException">
            <summary>
            Cannot write to the log file.
            </summary>
        </member>
        <member name="M:GorgonLibrary.LogfileCannotWriteException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.LogfileCannotOpenException"/> class.
            </summary>
            <param name="fileName">Name of the log file.</param>
            <param name="ex">The inner exception.</param>
        </member>
        <member name="M:GorgonLibrary.LogfileCannotWriteException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.LogfileCannotOpenException"/> class.
            </summary>
            <param name="fileName">Name of the log file.</param>
        </member>
        <member name="T:GorgonLibrary.Graphics.PolygonSprite">
            <summary>
            An arbitrary n-sided polygon sprite.
            </summary>
            <remarks>This allows the user to generate an arbitrarily shaped sprite.
            <para>This is an advanced object, be sure to review how triangle primitives work in the Direct3D documentation located here: http://msdn.microsoft.com/en-us/library/bb219837(VS.85).aspx.</para></remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.RefreshBuffers">
            <summary>
            Function to refresh the vertex/index buffers.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.CalculateWidthHeight">
            <summary>
            Function to calculate the actual (untransformed) width and height of the polygon sprite.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.CalculateAABB">
            <summary>
            Function to calculate the Axis Aligned bounding box for the polygon sprite.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.UpdateDimensions">
            <summary>
            Function to update the dimensions for an object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.Draw">
            <summary>
            Function to draw the object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.SetPosition(System.Single,System.Single,System.Single)">
            <summary>
            Function to set the position of the polygon sprite.
            </summary>
            <param name="x">Horizontal position of the sprite.</param>
            <param name="y">Vertical position of the sprite.</param>
            <param name="depth">Depth of the sprite when using depth buffer.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.SetScale(System.Single,System.Single)">
            <summary>
            Function to set the scale of the polygon sprite.
            </summary>
            <param name="x">Horizontal scale.</param>
            <param name="y">Vertical scale.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.SetAxis(System.Single,System.Single)">
            <summary>
            Function to set the pivot axis of the polygon sprite.
            </summary>
            <param name="x">Horizontal position of the pivot axis.</param>
            <param name="y">Vertical position of the pivot axis.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.#ctor(System.String,GorgonLibrary.Graphics.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.PolygonSprite"/> class.
            </summary>
            <param name="name">The name of the sprite object.</param>
            <param name="image">The image to map to the polygon.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.DeviceLost">
            <summary>
            Function called when the device is in a lost state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.DeviceReset">
            <summary>
            Function called when the device is reset.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.ForceRelease">
            <summary>
            Function to force the loss of the objects data.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.NeedsUpdate">
            <summary>
            Property to set or return whether the buffers need updating.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.Width">
            <summary>
            Property to return the width of the polygon sprite.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.Height">
            <summary>
            Property to return the height of the polygon sprite.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.AABB">
            <summary>
            Property to return the AABB rectangle for the sprite.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.BoundingCircle">
            <summary>
            Property to return the bounding circle for the sprite.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.Rotation">
            <summary>
            Property to set or return the rotation (in degrees) of the polygon.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.Position">
            <summary>
            Property to set or return the position of the polygon.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.Scale">
            <summary>
            Property to set or return the scale of the polygon.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.Axis">
            <summary>
            Property to set or return the pivot axis of the polygon.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.UniformScale">
            <summary>
            Property to set or return the uniform scale of the polygon.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.Image">
            <summary>
            Property to set or return the image to map to the polygon.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.InheritDepthBias">
            <summary>
            Property to set or return whether we inherit the depth bias.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.InheritDepthWriteEnabled">
            <summary>
            Property to set or return whether we inherit the depth writing enabled flag.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.InheritDepthTestFunction">
            <summary>
            Property to set or return whether we inherit the depth testing function.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.InheritStencilEnabled">
            <summary>
            Property to set or return whether we inherit the stencil enabled flag from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.InheritStencilReference">
            <summary>
            Property to set or return whether we inherit the stencil reference from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.InheritStencilMask">
            <summary>
            Property to set or return whether we inherit the stencil mask from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.InheritStencilPassOperation">
            <summary>
            Property to set or return whether we inherit the stencil pass operation from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.InheritStencilFailOperation">
            <summary>
            Property to set or return whether we inherit the stencil failed operation from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.InheritStencilZFailOperation">
            <summary>
            Property to set or return whether we inherit the stencil z-failed operation from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.InheritStencilCompare">
            <summary>
            Property to set or return whether we inherit the stencil compare from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.InheritAlphaMaskFunction">
            <summary>
            Property to set or return whether we inherit the alpha mask function from the layer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.InheritAlphaMaskValue">
            <summary>
            Property to set or return whether we inherit the alpha mask value from the layer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.InheritHorizontalWrapping">
            <summary>
            Property to set or return whether we inherit the horizontal wrapping from the layer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.InheritVerticalWrapping">
            <summary>
            Property to set or return whether we inherit the vertical wrapping from the layer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.InheritSmoothing">
            <summary>
            Property to set or return whether to inherit the smoothing mode from the global states.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.InheritBlending">
            <summary>
            Property to set or return whether to inherit the blending mode from the global states.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.PolygonVertices">
            <summary>
            Property to return the vertex list for this polygon.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.PolygonIndices">
            <summary>
            Property to return the vertex index list for this polygon.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.PrimitiveStyle">
            <summary>
            Property to return the primitive style for the object.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.HorizontalWrapMode">
            <summary>
            Property to set or return the horizontal wrapping mode to use.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.VerticalWrapMode">
            <summary>
            Property to set or return the vertical wrapping mode to use.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.BorderColor">
            <summary>
            Property to set or return the color of the border when the wrapping mode is set to Border.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.Smoothing">
            <summary>
            Property to set or return the type of smoothing for the sprites.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.AlphaMaskFunction">
            <summary>
            Property to set or return the function used for alpha masking.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.AlphaMaskValue">
            <summary>
            Property to set or return the alpha value used for alpha masking.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.BlendingMode">
            <summary>
            Property to set or return the blending mode.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.SourceBlend">
            <summary>
            Property to set or return the source blending operation.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.DestinationBlend">
            <summary>
            Property to set or return the destination blending operation.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.SourceBlendAlpha">
            <summary>
            Property to set or return the source alpha blending operation.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.DestinationBlendAlpha">
            <summary>
            Property to set or return the destination alpha blending operation.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.StencilEnabled">
            <summary>
            Property to set or return whether to enable the use of the stencil buffer or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.StencilReference">
            <summary>
            Property to set or return the reference value for the stencil buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.StencilMask">
            <summary>
            Property to set or return the mask value for the stencil buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.StencilPassOperation">
            <summary>
            Property to set or return the operation for passing stencil values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.StencilFailOperation">
            <summary>
            Property to set or return the operation for the failing stencil values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.StencilZFailOperation">
            <summary>
            Property to set or return the stencil operation for the failing depth values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.StencilCompare">
            <summary>
            Property to set or return the stencil comparison function.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.GorgonLibrary#Graphics#IRenderableStates#UseIndices">
            <summary>
            Property to return whether to use an index buffer or not.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.GorgonLibrary#Graphics#IRenderableStates#PrimitiveStyle">
            <summary>
            Property to return the primitive style for the object.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.WrapMode">
            <summary>
            Property to set or return the wrapping mode to use.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.DepthWriteEnabled">
            <summary>
            Property to set or return whether to enable the depth buffer (if applicable) writing or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.DepthBufferBias">
            <summary>
            Property to set or return (if applicable) the depth buffer bias.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.DepthTestFunction">
            <summary>
            Property to set or return the depth buffer (if applicable) testing comparison function.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.CullingMode">
            <summary>
            Property to set or return the culling mode.
            </summary>
            <remarks>The default value is <see cref="T:GorgonLibrary.Graphics.CullingMode">CullingMode.None</see>.</remarks>
        </member>
        <member name="T:GorgonLibrary.Graphics.PolygonSprite.IndexList">
            <summary>
            A list of polygon indices.
            </summary>
        </member>
        <member name="T:GorgonLibrary.BaseDynamicArray`1">
            <summary>
            An abstract class for representing a dynamic array of objects.
            </summary>
            <remarks>
            This was designed as a point of convenience to take some of the annoyance out of inheriting a collection.
            <para>
            This class provides a simplified method of inheriting a basic list collection.  It holds no benefit over the System.Collections.Generic.List object, which it uses internally.
            </para>
            	<para>
            This class, like the other collection classes, implements the IEnumerable interface already to return an iterator interface for enumeration.
            </para>
            </remarks>
            <typeparam name="T">Type of data to store.</typeparam>
        </member>
        <member name="M:GorgonLibrary.BaseDynamicArray`1.GetItem(System.Int32)">
            <summary>
            Function to retrieve an item by its index.
            </summary>
            <param name="index">Index of the item to retrieve.</param>
        </member>
        <member name="M:GorgonLibrary.BaseDynamicArray`1.SetItem(System.Int32,`0)">
            <summary>
            Function to update an item in the list by its index.
            </summary>
            <param name="index">Index of the item to set.</param>
            <param name="item">Item to set.</param>
        </member>
        <member name="M:GorgonLibrary.BaseDynamicArray`1.RemoveItem(System.Int32)">
            <summary>
            Function to remove an object from the list by index.
            </summary>
            <param name="index">Index to remove at.</param>
        </member>
        <member name="M:GorgonLibrary.BaseDynamicArray`1.ClearItems">
            <summary>
            Function to clear the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.BaseDynamicArray`1.Contains(`0)">
            <summary>
            Function to return whether or not the array contains an instance of the specified object.
            </summary>
            <param name="item">Object to check for.</param>
            <returns>TRUE if object exists, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.BaseDynamicArray`1.StaticArray(System.Int32,System.Int32)">
            <summary>
            Function to return the items in the dynamic array as a static array.
            </summary>
            <param name="start">Starting index of the array.</param>
            <param name="count">Number of items to copy.</param>
            <returns>A static array containing a copy of this array.</returns>
        </member>
        <member name="M:GorgonLibrary.BaseDynamicArray`1.StaticArray">
            <summary>
            Function to return the items in the dynamic array as a static array.
            </summary>
            <returns>A static array containing a copy of this array.</returns>
        </member>
        <member name="M:GorgonLibrary.BaseDynamicArray`1.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="defaultsize">Default size of the collection.</param>
        </member>
        <member name="M:GorgonLibrary.BaseDynamicArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Function to return a new enumerator object.
            </summary>
            <returns>Enumerator object.</returns>
        </member>
        <member name="M:GorgonLibrary.BaseDynamicArray`1.GetEnumerator">
            <summary>
            Function to return a new enumerator object.
            </summary>
            <returns>Enumerator object.</returns>
        </member>
        <member name="P:GorgonLibrary.BaseDynamicArray`1.Items">
            <summary>
            Property to return the internal list of items.
            </summary>
        </member>
        <member name="P:GorgonLibrary.BaseDynamicArray`1.Count">
            <summary>
            Property to return the number of items in the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.IndexList.AddRange(System.Int32[])">
            <summary>
            Function to add a range of indices.
            </summary>
            <param name="items">Indices to add to the collection.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.IndexList.Remove(System.Int32)">
            <summary>
            Function to remove a vertex from the list by its index (note, this is the collection index, not the vertex index).
            </summary>
            <param name="index">Collection index of the vertex index to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.IndexList.#ctor(GorgonLibrary.Graphics.PolygonSprite)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.PolygonSprite.IndexList"/> class.
            </summary>
            <param name="polygon">Polygon that owns the indices.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.IndexList.IndexOf(System.Int32)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.IndexList.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.IndexList.System#Collections#Generic#IList{System#Int32}#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.IndexList.Add(System.Int32)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.IndexList.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.IndexList.CopyTo(System.Int32[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            The type cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.IndexList.System#Collections#Generic#ICollection{System#Int32}#Remove(System.Int32)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.IndexList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Int32"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.IndexList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.PolygonSprite.PolygonVertexList">
            <summary>
            A list of polygon vertices.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.PolygonVertexList.SetVertexPosition(System.Int32,GorgonLibrary.Vector3D)">
            <summary>
            Function to set the vertex position at the vertex specified by the index.
            </summary>
            <param name="vertexIndex">The index of the vertex to update.</param>
            <param name="position">Position of the vertex.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.PolygonVertexList.SetVertexTextureCoordinates(System.Int32,GorgonLibrary.Vector2D)">
            <summary>
            Function to set the vertex texture coordinates at the vertex specified by the index.
            </summary>
            <param name="vertexIndex">The index of the vertex to update.</param>
            <param name="coordinates">Texture coordinates of the vertex.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.PolygonVertexList.SetVertexColor(System.Int32,System.Drawing.Color)">
            <summary>
            Function to set the color of the vertex specified by the index.
            </summary>
            <param name="vertexIndex">The index of the vertex to update.</param>
            <param name="color">Color of the vertex.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.PolygonVertexList.AddRange(GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1[])">
            <summary>
            Function to add a range of vertices.
            </summary>
            <param name="items">Vertices to add to the collection.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.PolygonVertexList.AddVertex(GorgonLibrary.Vector3D,GorgonLibrary.Vector2D,System.Drawing.Color)">
            <summary>
            Function to add a vertex to the polygon.
            </summary>
            <param name="position">3D position of the vertex.  The Z value is used to interact with the depth buffer.</param>
            <param name="imageCoordinate">The relative coordinate of the image being mapped to the polygon.</param>
            <param name="diffuse">The diffuse color of the vertex.</param>
            <returns>The vertex that was added to the polygon.</returns>
            <remarks>The <paramref name="imageCoordinate"/> parameter is different from that of other objects that use image mapping (e.g. a <see cref="T:GorgonLibrary.Graphics.Sprite">Sprite</see>).
              The other objects express their image mapping in absolute image coordinates, that is if a 32x32 image is used then the image is mapped from 0 to 32 for width and/or height.
              However in this case the image mapping is relative to the image.  This means that to map the aforementioned image you would pass 0.0 to 1.0.  Where 1.0 is the width or height 
            of our image.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.PolygonVertexList.Remove(System.Int32)">
            <summary>
            Function to remove a vertex from the list by its index.
            </summary>
            <param name="index">Index of the vertex to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.PolygonVertexList.#ctor(GorgonLibrary.Graphics.PolygonSprite)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.PolygonSprite.PolygonVertexList"/> class.
            </summary>
            <param name="polygon">Polygon that owns the indices.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.PolygonVertexList.IndexOf(GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.PolygonVertexList.Insert(System.Int32,GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.PolygonVertexList.System#Collections#Generic#IList{GorgonLibrary#Graphics#VertexTypeList#PositionDiffuse2DTexture1}#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.PolygonVertexList.Add(GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.PolygonVertexList.CopyTo(GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            The type cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.PolygonVertexList.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.PolygonSprite.PolygonVertexList.Remove(GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.PolygonVertexList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.PolygonSprite.PolygonVertexList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:GorgonLibrary.Serialization.ShaderSerializer`1">
            <summary>
            Object representing a serializer for FX shader files.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Serialization.Serializer">
            <summary>
            Abstract object representing a serialization object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.WriteComment(System.String)">
            <summary>
            Function to write a comment.
            </summary>
            <param name="comment">Comment to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.WriteGroupBegin(System.String)">
            <summary>
            Function to write the start of a group of data.
            </summary>
            <param name="groupName">Name of the group.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.WriteGroupEnd">
            <summary>
            Function to write the end of the group started with WriteGroupBegin().
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.Write(System.String,System.String)">
            <summary>
            Function to write a string value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.Write(System.String,System.Char)">
            <summary>
            Function to write a character value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.Write(System.String,System.Char[],System.Int32,System.Int32)">
            <summary>
            Function to write an array of character values to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="values">Values to write.</param>
            <param name="start">Array index to start at.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.Write(System.String,System.UInt64)">
            <summary>
            Function to write an unsigned long value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.Write(System.String,System.Int64)">
            <summary>
            Function to write a long value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.Write(System.String,System.UInt32)">
            <summary>
            Function to write an unsigned integer value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.Write(System.String,System.Int32)">
            <summary>
            Function to write an integer value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.Write(System.String,System.Single)">
            <summary>
            Function to write a floating point value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.Write(System.String,System.Double)">
            <summary>
            Function to write a floating point value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.Write(System.String,System.UInt16)">
            <summary>
            Function to write an unsigned short value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.Write(System.String,System.Int16)">
            <summary>
            Function to write a short value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.Write(System.String,System.SByte)">
            <summary>
            Function to write a signed byte value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.Write(System.String,System.Byte)">
            <summary>
            Function to write a byte value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.Write(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Function to write an array of byte values to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="values">Values to write.</param>
            <param name="start">Array index to start at.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.Write(System.String,System.Boolean)">
            <summary>
            Function to write a boolean value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.ReadBool(System.String)">
            <summary>
            Function to read a boolean value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.ReadBytes(System.String,System.Int32)">
            <summary>
            Function to read an array of byte values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <param name="count">The count of bytes to read.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.ReadBytes(System.String)">
            <summary>
            Function to read an array of byte values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.ReadByte(System.String)">
            <summary>
            Function to read a byte value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.ReadSByte(System.String)">
            <summary>
            Function to read a signed byte value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.ReadInt16(System.String)">
            <summary>
            Function to read a short value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.ReadUInt16(System.String)">
            <summary>
            Function to read an unsigned short value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.ReadDouble(System.String)">
            <summary>
            Function to read a double value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.ReadSingle(System.String)">
            <summary>
            Function to read a floating point value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.ReadInt32(System.String)">
            <summary>
            Function to read an integer value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.ReadUInt32(System.String)">
            <summary>
            Function to read an unsigned integer value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.ReadInt64(System.String)">
            <summary>
            Function to read a long value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.ReadUInt64(System.String)">
            <summary>
            Function to read an unsigned long value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.ReadChars(System.String,System.Int32)">
            <summary>
            Function to read an array of character values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <param name="count">The count of characters to read.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.ReadChar(System.String)">
            <summary>
            Function to read a character value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.ReadString(System.String)">
            <summary>
            Function to read a string values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.ReadAttribute(System.String,System.String)">
            <summary>
            Function to read an attribute for an item.
            </summary>
            <param name="item">Item that contains the attribute.</param>
            <param name="attributeName">Attribute to read.</param>
            <returns>Value for the attribute.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.GotoField(System.String)">
            <summary>
            Function to move to a field within the data.
            </summary>
            <param name="name">Name of the field.</param>
            <returns>TRUE if found, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.Serialize">
            <summary>
            Function to perform serialization.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.Deserialize">
            <summary>
            Function to perform deserialization.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.#ctor(GorgonLibrary.Serialization.ISerializable,System.IO.Stream)">
            <summary>
            Constructor.
            </summary>
            <param name="serialObject">Object to serialize.</param>
            <param name="stream">Existing stream to use.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to release all resources, FALSE to only release unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.Serializer.Dispose">
            <summary>
            Function to perform clean up.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Serialization.Serializer.SerializationStream">
            <summary>
            Property to return the stream being used.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Serialization.Serializer.SerializationObject">
            <summary>
            Property to return the object that is being serialized.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Serialization.Serializer.DontCloseStream">
            <summary>
            Property to return whether or not to close the underlying stream when the reader/writer is closed.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Serialization.Serializer.Parameters">
            <summary>
            Property to return the parameter list interface.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to perform clean up of all objects.  FALSE to clean up only unmanaged objects.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.Serialize">
            <summary>
            Function to serialize an object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.Deserialize">
            <summary>
            Function to deserialize an object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.Write(System.String,System.String)">
            <summary>
            Function to write a string value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.Write(System.String,System.Char)">
            <summary>
            Function to write a character value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.Write(System.String,System.Char[],System.Int32,System.Int32)">
            <summary>
            Function to write an array of character values to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="values">Values to write.</param>
            <param name="start">Array index to start at.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.Write(System.String,System.UInt64)">
            <summary>
            Function to write an unsigned long value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.Write(System.String,System.Int64)">
            <summary>
            Function to write a long value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.Write(System.String,System.UInt32)">
            <summary>
            Function to write an unsigned integer value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.Write(System.String,System.Int32)">
            <summary>
            Function to write an integer value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.Write(System.String,System.Single)">
            <summary>
            Function to write a floating point value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.Write(System.String,System.Double)">
            <summary>
            Function to write a floating point value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.Write(System.String,System.UInt16)">
            <summary>
            Function to write an unsigned short value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.Write(System.String,System.Int16)">
            <summary>
            Function to write a short value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.Write(System.String,System.SByte)">
            <summary>
            Function to write a signed byte value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.Write(System.String,System.Byte)">
            <summary>
            Function to write a byte value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.Write(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Function to write an array of byte values to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="values">Values to write.</param>
            <param name="start">Array index to start at.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.Write(System.String,System.Boolean)">
            <summary>
            Function to write a boolean value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.ReadBool(System.String)">
            <summary>
            Function to read a boolean value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.ReadBytes(System.String,System.Int32)">
            <summary>
            Function to read an array of byte values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <param name="count">The count of bytes to read.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.ReadBytes(System.String)">
            <summary>
            Function to read an array of byte values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.ReadByte(System.String)">
            <summary>
            Function to read a byte value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.ReadSByte(System.String)">
            <summary>
            Function to read a signed byte value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.ReadInt16(System.String)">
            <summary>
            Function to read a short value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.ReadUInt16(System.String)">
            <summary>
            Function to read an unsigned short value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.ReadDouble(System.String)">
            <summary>
            Function to read a double value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.ReadSingle(System.String)">
            <summary>
            Function to read a floating point value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.ReadInt32(System.String)">
            <summary>
            Function to read an integer value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.ReadUInt32(System.String)">
            <summary>
            Function to read an unsigned integer value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.ReadInt64(System.String)">
            <summary>
            Function to read a long value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.ReadUInt64(System.String)">
            <summary>
            Function to read an unsigned long value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.ReadChars(System.String,System.Int32)">
            <summary>
            Function to read an array of character values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <param name="count">The count of characters to read.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.ReadChar(System.String)">
            <summary>
            Function to read a character value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.ReadString(System.String)">
            <summary>
            Function to read a string values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ShaderSerializer`1.#ctor(GorgonLibrary.Graphics.BaseShader{`0},System.IO.Stream)">
            <summary>
            Constructor.
            </summary>
            <param name="shader">Shader to (de)serialize.</param>
            <param name="stream">Stream to write or read data through.</param>
        </member>
        <member name="T:GorgonLibrary.Graphics.TrackFloat">
            <summary>
            Animation track used to animate floating point properties.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.TrackFloat.CreateKey">
            <summary>
            Function to create a keyframe.
            </summary>
            <returns>The new keyframe in the correct context.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.TrackFloat.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.TrackVector2D"/> class.
            </summary>
            <param name="property">Property that is bound to the track.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.TrackFloat.Item(System.Single)">
            <summary>
            Property to return the key for a given frame time index.
            </summary>
            <returns>A key containing interpolated keyframe data.</returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.KeyFloat">
            <summary>
            A key frame for manipulating data of the type <see cref="T:System.Single">float</see>.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyFloat.SetupSplines">
            <summary>
            Function to set up the splines.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyFloat.UpdateKeyData(GorgonLibrary.Graphics.Track.NearestKeys)">
            <summary>
            Function to update the data within the key frame.
            </summary>
            <param name="keyData">Interpolated key data used to help calculate data between keys.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyFloat.ReadData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to retrieve data from the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyFloat.WriteData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to persist the data into the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyFloat.Update">
            <summary>
            Function to perform an update of the bound property.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyFloat.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyFloat.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.KeyFloat"/> class.
            </summary>
            <param name="time">The time (in milliseconds) at which this keyframe exists within the track.</param>
            <param name="value">Value for the key.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyFloat.DataType">
            <summary>
            Property to return the type of data stored in the key.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyFloat.Value">
            <summary>
            Property to set or return the value of the key.
            </summary>
        </member>
        <member name="T:GorgonLibrary.LoggingLevel">
            <summary>
            Enumeration containing the logging levels.
            </summary>
        </member>
        <member name="F:GorgonLibrary.LoggingLevel.None">
            <summary>None, this will disable the log.</summary>
        </member>
        <member name="F:GorgonLibrary.LoggingLevel.Simple">
            <summary>This will only pass messages marked as simple.</summary>
        </member>
        <member name="F:GorgonLibrary.LoggingLevel.Intermediate">
            <summary>This will only pass messages marked as intermediate.</summary>
        </member>
        <member name="F:GorgonLibrary.LoggingLevel.Verbose">
            <summary>This will only pass messages marked as verbose.</summary>
        </member>
        <member name="F:GorgonLibrary.LoggingLevel.All">
            <summary>This will print all messages regardless of level.</summary>
        </member>
        <member name="T:GorgonLibrary.Logger">
            <summary>
            An object representing a logging interface.
            </summary>
            <remarks>
            Logging information can be output to the trace console, or to a file or both.
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Logger.Print(System.String,System.String,GorgonLibrary.LoggingLevel,System.Object[])">
            <summary>
            Print a line to the logfile.
            </summary>
            <param name="section">Section that the line pertains to.</param>
            <param name="formatSpecifier">Format specifier for the line.</param>
            <param name="level">Level that this message falls under.</param>
            <param name="arguments">List of optional arguments.</param>
        </member>
        <member name="M:GorgonLibrary.Logger.Print(System.String,GorgonLibrary.LoggingLevel,System.Object[])">
            <summary>
            Print a line to the logfile.
            </summary>
            <param name="formatSpecifier">Format specifier for the line.</param>
            <param name="level">Level that this message falls under.</param>
            <param name="arguments">List of optional arguments.</param>
        </member>
        <member name="M:GorgonLibrary.Logger.Close">
            <summary>
            Function to close the log file.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Logger.Open">
            <summary>
            Function to open the log file.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Logger.#ctor(System.String)">
            <summary>
            Constructor.		
            </summary>
            <param name="appname">File name for the log file.</param>
        </member>
        <member name="M:GorgonLibrary.Logger.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="appname">File name for the log file.</param>
            <param name="path">File path for the file. NULL to force the console.</param>
        </member>
        <member name="M:GorgonLibrary.Logger.Dispose(System.Boolean)">
            <summary>
            Function to remove resources.
            </summary>
            <param name="disposing">TRUE if we're removing managed resources and unmanaged, FALSE if only unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.Logger.Dispose">
            <summary>
            Function to clean up.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Logger.LogFilterLevel">
            <summary>
            Property to set or return the filtering level of this log.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Logger.UseConsole">
            <summary>
            Property to set or return whether the messages go to the console or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.MinMaxRange">
            <summary>
            Value type for storing a minimum and maximum value.
            </summary>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.Shrink(System.Int32)">
            <summary>
            Function to shrink by a particular amount.
            </summary>
            <param name="amount">Amount to shrink values by.</param>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.Expand(System.Int32)">
            <summary>
            Function to expand by a particular amount.
            </summary>
            <param name="amount">Amount to expand values by.</param>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.InRange(System.Int32,System.Boolean)">
            <summary>
            Function to determine if a value falls within the range.
            </summary>
            <param name="value">Value to check.</param>
            <param name="inclusive">TRUE to include the minimum/maximum values, FALSE to include only between the two values.</param>
            <returns>TRUE if in the range, FALSE if outside.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.InRange(System.Int32)">
            <summary>
            Function to determine if a value falls within the range.
            </summary>
            <param name="value">Value to check.</param>
            <returns>TRUE if in the range, FALSE if outside.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.InRange(GorgonLibrary.MinMaxRange,System.Boolean)">
            <summary>
            Function to determine if a value falls within the range.
            </summary>
            <param name="value">Value to check.</param>
            <param name="inclusive">TRUE to include the minimum/maximum values, FALSE to include only between the two values.</param>
            <returns>TRUE if in the range, FALSE if outside.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.InRange(GorgonLibrary.MinMaxRange)">
            <summary>
            Function to determine if a value falls within the range.
            </summary>
            <param name="value">Value to check.</param>
            <returns>TRUE if in the range, FALSE if outside.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.Add(GorgonLibrary.MinMaxRange,GorgonLibrary.MinMaxRange)">
            <summary>
            Function to add together two ranges.
            </summary>
            <param name="range1">First range to add.</param>
            <param name="range2">Second range to add.</param>
            <returns>Sum of the two ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.Subtract(GorgonLibrary.MinMaxRange,GorgonLibrary.MinMaxRange)">
            <summary>
            Function to subtract two ranges.
            </summary>
            <param name="range1">First range to subtract.</param>
            <param name="range2">Second range to subtract.</param>
            <returns>Difference between the two ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.Multiply(GorgonLibrary.MinMaxRange,GorgonLibrary.MinMaxRange)">
            <summary>
            Function to multiply together two ranges.
            </summary>
            <param name="range1">First range to multiply.</param>
            <param name="range2">Second range to multiply.</param>
            <returns>Product of the two ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.Divide(GorgonLibrary.MinMaxRange,GorgonLibrary.MinMaxRange)">
            <summary>
            Function to divide two ranges.
            </summary>
            <param name="range1">First range to divide.</param>
            <param name="range2">Second range to divide.</param>
            <returns>Quotient of the two ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.Round(GorgonLibrary.MinMaxRangeF)">
            <summary>
            Function to round, up or down, a floating point min max range to an integer min max range.
            </summary>
            <param name="range">Floating point range to round.</param>
            <returns>Rounded integer range.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.op_Addition(GorgonLibrary.MinMaxRange,GorgonLibrary.MinMaxRange)">
            <summary>
            Operator for addition.
            </summary>
            <param name="range1">First range to add.</param>
            <param name="range2">Second range to add.</param>
            <returns>Sum of the two ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.op_Subtraction(GorgonLibrary.MinMaxRange,GorgonLibrary.MinMaxRange)">
            <summary>
            Operator to subtract two ranges.
            </summary>
            <param name="range1">First range to subtract.</param>
            <param name="range2">Second range to subtract.</param>
            <returns>Difference between the two ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.op_Multiply(GorgonLibrary.MinMaxRange,GorgonLibrary.MinMaxRange)">
            <summary>
            Operator to multiply together two ranges.
            </summary>
            <param name="range1">First range to multiply.</param>
            <param name="range2">Second range to multiply.</param>
            <returns>Product of the two ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.op_Division(GorgonLibrary.MinMaxRange,GorgonLibrary.MinMaxRange)">
            <summary>
            Operator to divide two ranges.
            </summary>
            <param name="range1">First range to divide.</param>
            <param name="range2">Second range to divide.</param>
            <returns>Quotient of the two ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.op_Implicit(System.Drawing.Point)~GorgonLibrary.MinMaxRange">
            <summary>
            Operator to convert a Point structure to a min/max structure.
            </summary>
            <param name="point">Point to convert.</param>
            <returns>Min max range.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.op_Explicit(GorgonLibrary.Vector2D)~GorgonLibrary.MinMaxRange">
            <summary>
            Operator to convert a 2D vector structure to a min/max structure.
            </summary>
            <param name="vector">Vector to convert.</param>
            <returns>Min max range.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.op_Explicit(GorgonLibrary.MinMaxRangeF)~GorgonLibrary.MinMaxRange">
            <summary>
            Operator to convert a floating point min/max structure to an integer min/max structure.
            </summary>
            <param name="minmax">Floating point min/max structure to convert..</param>
            <returns>Integer min max range.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.op_Implicit(System.Drawing.Size)~GorgonLibrary.MinMaxRange">
            <summary>
            Operator to convert a Size structure to a min/max structure.
            </summary>
            <param name="size">Size to convert.</param>
            <returns>Min max range.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.op_Implicit(GorgonLibrary.MinMaxRange)~System.Drawing.Point">
            <summary>
            Operator to convert a min/max structure to a Point structure.
            </summary>
            <param name="minmax">Min/max to convert.</param>
            <returns>Point containing min/max values..</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.op_Implicit(GorgonLibrary.MinMaxRange)~System.Drawing.Size">
            <summary>
            Operator to convert a min/max structure to a Size structure.
            </summary>
            <param name="minmax">Min/max to convert.</param>
            <returns>Size containing min/max values..</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.op_Implicit(GorgonLibrary.MinMaxRange)~GorgonLibrary.Vector2D">
            <summary>
            Operator to convert a min/max structure to a 2D vector structure.
            </summary>
            <param name="minmax">Min/max to convert.</param>
            <returns>Vector containing min/max values..</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
        </member>
        <member name="M:GorgonLibrary.MinMaxRange.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="empty">TRUE if structure is empty, FALSE if not.</param>
        </member>
        <member name="P:GorgonLibrary.MinMaxRange.Maximum">
            <summary>
            Property to set or return the maximum value.
            </summary>
        </member>
        <member name="P:GorgonLibrary.MinMaxRange.Minimum">
            <summary>
            Property to set or return the Minimum value.
            </summary>
        </member>
        <member name="P:GorgonLibrary.MinMaxRange.Empty">
            <summary>
            Property to return an empty range.
            </summary>
        </member>
        <member name="P:GorgonLibrary.MinMaxRange.IsEmpty">
            <summary>
            Property to return whether this structure is empty or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.MinMaxRange.Range">
            <summary>
            Property to return the range (distance between the minimum and maximum values.
            </summary>
        </member>
        <member name="T:GorgonLibrary.MinMaxRangeF">
            <summary>
            Value type for storing a minimum and maximum floating point value.
            </summary>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.Shrink(System.Single)">
            <summary>
            Function to shrink by a particular amount.
            </summary>
            <param name="amount">Amount to shrink values by.</param>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.Expand(System.Single)">
            <summary>
            Function to expand by a particular amount.
            </summary>
            <param name="amount">Amount to expand values by.</param>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.InRange(System.Single,System.Boolean)">
            <summary>
            Function to determine if a value falls within the range.
            </summary>
            <param name="value">Value to check.</param>
            <param name="inclusive">TRUE to include the minimum/maximum values, FALSE to include only between the two values.</param>
            <returns>TRUE if in the range, FALSE if outside.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.InRange(System.Single)">
            <summary>
            Function to determine if a value falls within the range.
            </summary>
            <param name="value">Value to check.</param>
            <returns>TRUE if in the range, FALSE if outside.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.InRange(GorgonLibrary.MinMaxRangeF,System.Boolean)">
            <summary>
            Function to determine if a value falls within the range.
            </summary>
            <param name="value">Value to check.</param>
            <param name="inclusive">TRUE to include the minimum/maximum values, FALSE to include only between the two values.</param>
            <returns>TRUE if in the range, FALSE if outside.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.InRange(GorgonLibrary.MinMaxRangeF)">
            <summary>
            Function to determine if a value falls within the range.
            </summary>
            <param name="value">Value to check.</param>
            <returns>TRUE if in the range, FALSE if outside.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.Add(GorgonLibrary.MinMaxRangeF,GorgonLibrary.MinMaxRangeF)">
            <summary>
            Function to add together two ranges.
            </summary>
            <param name="range1">First range to add.</param>
            <param name="range2">Second range to add.</param>
            <returns>Sum of the two ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.Subtract(GorgonLibrary.MinMaxRangeF,GorgonLibrary.MinMaxRangeF)">
            <summary>
            Function to subtract two ranges.
            </summary>
            <param name="range1">First range to subtract.</param>
            <param name="range2">Second range to subtract.</param>
            <returns>Difference between the two ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.Multiply(GorgonLibrary.MinMaxRangeF,GorgonLibrary.MinMaxRangeF)">
            <summary>
            Function to multiply together two ranges.
            </summary>
            <param name="range1">First range to multiply.</param>
            <param name="range2">Second range to multiply.</param>
            <returns>Product of the two ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.Divide(GorgonLibrary.MinMaxRangeF,GorgonLibrary.MinMaxRangeF)">
            <summary>
            Function to divide two ranges.
            </summary>
            <param name="range1">First range to divide.</param>
            <param name="range2">Second range to divide.</param>
            <returns>Quotient of the two ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.op_Equality(GorgonLibrary.MinMaxRangeF,GorgonLibrary.MinMaxRangeF)">
            <summary>
            Operator for equality testing.
            </summary>
            <param name="range1">First range to test.</param>
            <param name="range2">Second range to test.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.op_Inequality(GorgonLibrary.MinMaxRangeF,GorgonLibrary.MinMaxRangeF)">
            <summary>
            Operator for inequality testing.
            </summary>
            <param name="range1">First range to test.</param>
            <param name="range2">Second range to test.</param>
            <returns>TRUE if not equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.op_Addition(GorgonLibrary.MinMaxRangeF,GorgonLibrary.MinMaxRangeF)">
            <summary>
            Operator for addition.
            </summary>
            <param name="range1">First range to add.</param>
            <param name="range2">Second range to add.</param>
            <returns>Sum of the two ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.op_Subtraction(GorgonLibrary.MinMaxRangeF,GorgonLibrary.MinMaxRangeF)">
            <summary>
            Operator to subtract two ranges.
            </summary>
            <param name="range1">First range to subtract.</param>
            <param name="range2">Second range to subtract.</param>
            <returns>Difference between the two ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.op_Multiply(GorgonLibrary.MinMaxRangeF,GorgonLibrary.MinMaxRangeF)">
            <summary>
            Operator to multiply together two ranges.
            </summary>
            <param name="range1">First range to multiply.</param>
            <param name="range2">Second range to multiply.</param>
            <returns>Product of the two ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.op_Division(GorgonLibrary.MinMaxRangeF,GorgonLibrary.MinMaxRangeF)">
            <summary>
            Operator to divide two ranges.
            </summary>
            <param name="range1">First range to divide.</param>
            <param name="range2">Second range to divide.</param>
            <returns>Quotient of the two ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.op_Implicit(GorgonLibrary.MinMaxRange)~GorgonLibrary.MinMaxRangeF">
            <summary>
            Operator to convert an integer min max range structure to a floating point min/max structure.
            </summary>
            <param name="minmax">Integer range to convert.</param>
            <returns>Floating point min max range.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.op_Implicit(System.Drawing.PointF)~GorgonLibrary.MinMaxRangeF">
            <summary>
            Operator to convert a PointF structure to a min/max structure.
            </summary>
            <param name="point">PointF to convert.</param>
            <returns>Min max range.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.op_Implicit(GorgonLibrary.Vector2D)~GorgonLibrary.MinMaxRangeF">
            <summary>
            Operator to convert a 2D vector structure to a min/max structure.
            </summary>
            <param name="vector">Vector to convert.</param>
            <returns>Min max range.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.op_Implicit(System.Drawing.SizeF)~GorgonLibrary.MinMaxRangeF">
            <summary>
            Operator to convert a SizeF structure to a min/max structure.
            </summary>
            <param name="size">SizeF to convert.</param>
            <returns>Min max range.</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.op_Implicit(GorgonLibrary.MinMaxRangeF)~System.Drawing.PointF">
            <summary>
            Operator to convert a min/max structure to a PointF structure.
            </summary>
            <param name="minmax">Min/max to convert.</param>
            <returns>PointF containing min/max values..</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.op_Implicit(GorgonLibrary.MinMaxRangeF)~System.Drawing.SizeF">
            <summary>
            Operator to convert a min/max structure to a SizeF structure.
            </summary>
            <param name="minmax">Min/max to convert.</param>
            <returns>SizeF containing min/max values..</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.op_Implicit(GorgonLibrary.MinMaxRangeF)~GorgonLibrary.Vector2D">
            <summary>
            Operator to convert a min/max structure to a 2D vector structure.
            </summary>
            <param name="minmax">Min/max to convert.</param>
            <returns>Vector containing min/max values..</returns>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.#ctor(System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
        </member>
        <member name="M:GorgonLibrary.MinMaxRangeF.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="empty">TRUE if structure is empty, FALSE if not.</param>
        </member>
        <member name="P:GorgonLibrary.MinMaxRangeF.Maximum">
            <summary>
            Property to set or return the maximum value.
            </summary>
        </member>
        <member name="P:GorgonLibrary.MinMaxRangeF.Minimum">
            <summary>
            Property to set or return the Minimum value.
            </summary>
        </member>
        <member name="P:GorgonLibrary.MinMaxRangeF.Empty">
            <summary>
            Property to return an empty range.
            </summary>
        </member>
        <member name="P:GorgonLibrary.MinMaxRangeF.IsEmpty">
            <summary>
            Property to return whether this structure is empty or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.MinMaxRangeF.Range">
            <summary>
            Property to return the range (distance between the minimum and maximum values.
            </summary>
        </member>
        <member name="T:GorgonLibrary.FileSystems.Design.formAuthentication">
            <summary>
            Form used to present authentication to the file system editor.
            </summary>
        </member>
        <member name="F:GorgonLibrary.FileSystems.Design.formAuthentication.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.Design.formAuthentication.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.Design.formAuthentication.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.Design.formAuthentication.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.FileSystems.Design.formAuthentication"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.Design.formAuthentication.AuthorizationData">
            <summary>
            Property to set or return the authorization data object.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.TrackInt32">
            <summary>
            Animation track used to animate floating point properties.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.TrackInt32.CreateKey">
            <summary>
            Function to create a keyframe.
            </summary>
            <returns>The new keyframe in the correct context.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.TrackInt32.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.TrackVector2D"/> class.
            </summary>
            <param name="property">Property that is bound to the track.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.TrackInt32.Item(System.Single)">
            <summary>
            Property to return the key for a given frame time index.
            </summary>
            <returns>A key containing interpolated keyframe data.</returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.TrackByte">
            <summary>
            Animation track used to animate byte properties.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.TrackByte.CreateKey">
            <summary>
            Function to create a keyframe.
            </summary>
            <returns>The new keyframe in the correct context.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.TrackByte.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.TrackByte"/> class.
            </summary>
            <param name="property">Property that is bound to the track.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.TrackByte.Item(System.Single)">
            <summary>
            Property to return the key for a given frame time index.
            </summary>
            <returns>A key containing interpolated keyframe data.</returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.KeyInt32">
            <summary>
            A key frame for manipulating data of the type <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyInt32.SetupSplines">
            <summary>
            Function to set up the splines.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyInt32.UpdateKeyData(GorgonLibrary.Graphics.Track.NearestKeys)">
            <summary>
            Function to update the data within the key frame.
            </summary>
            <param name="keyData">Interpolated key data used to help calculate data between keys.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyInt32.ReadData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to retrieve data from the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyInt32.WriteData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to persist the data into the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyInt32.Update">
            <summary>
            Function to perform an update of the bound property.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyInt32.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyInt32.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.KeyInt32"/> class.
            </summary>
            <param name="time">The time (in milliseconds) at which this keyframe exists within the track.</param>
            <param name="value">Value for the key.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyInt32.DataType">
            <summary>
            Property to return the type of data stored in the key.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyInt32.Value">
            <summary>
            Property to set or return the value of the key.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.RenderTargetList">
            <summary>
            List of render targets.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTargetList.Add(GorgonLibrary.Graphics.RenderTarget)">
            <summary>
            Function to add a target.
            </summary>
            <param name="target">Target to add.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTargetList.Remove(System.Int32)">
            <summary>
            Function to remove an object from the list by index.
            </summary>
            <param name="index">Index to remove at.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTargetList.Remove(System.String)">
            <summary>
            Function to remove an object from the list by key.
            </summary>
            <param name="key">Key of the object to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTargetList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTargetList.Item(System.Int32)">
            <summary>
            Property to return a render target by index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTargetList.Item(System.String)">
            <summary>
            Property to return a render target by name.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Driver">
            <summary>
            Object containing information about a video driver.
            </summary>
            <remarks>
            Since there can possibly be more than one video device in your machine, Direct3D needs to know
            which device it'll be using for rendering and the capabilities of said driver.
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Driver.FindStencil">
            <summary>
            Function to find out if there's a stencil buffer or not.
            </summary>		
            <returns>TRUE if a stencil was found, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Driver.GetDriverDetails">
            <summary>
            Function to retrieve driver details.
            </summary>
            <summary>
            Function to return the driver details.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Driver.ValidImageFormat(GorgonLibrary.Graphics.ImageBufferFormats,GorgonLibrary.BackBufferFormats,System.Boolean)">
            <summary>
            Function to return whether this format can be used for hardware accelerated rendering.
            </summary>
            <param name="display">Format of the display to check.</param>
            <param name="backbuffer">Back buffer format.</param>
            <param name="windowed">TRUE if we're going to be windowed, FALSE if not.</param>
            <returns>TRUE if this format can be used, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Driver.ValidBackBufferFormat(GorgonLibrary.BackBufferFormats,GorgonLibrary.BackBufferFormats,System.Boolean)">
            <summary>
            Function to return whether this back buffer format can be used for hardware accelerated rendering.
            </summary>
            <param name="display">Format of the display to check.</param>
            <param name="backbuffer">Back buffer format.</param>
            <param name="windowed">TRUE if we're going to be windowed, FALSE if not.</param>
            <returns>TRUE if this format can be used, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Driver.ValidImageFormat(GorgonLibrary.Graphics.ImageBufferFormats,GorgonLibrary.Graphics.ImageType)">
            <summary>
            Function to return whether a image format is supported given a specific image type.
            </summary>
            <param name="format">Format to check.</param>
            <param name="type">Type of image.</param>
            <returns>TRUE if valid, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Driver.ValidDesktopFormat(GorgonLibrary.BackBufferFormats)">
            <summary>
            Function to determine if we can convert between a specified format and the desktop format.
            </summary>
            <param name="sourceformat">Format to convert from.</param>
            <returns>TRUE if supported, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Driver.DesktopFormatSupported(GorgonLibrary.VideoMode)">
            <summary>
            Function to return whether rendering in the desktop format is allowed.
            </summary>
            <param name="mode">Backbuffer video mode.</param>
            <returns>TRUE if supported, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Driver.DepthFormatSupported(GorgonLibrary.BackBufferFormats,GorgonLibrary.DepthBufferFormats)">
            <summary>
            Function to check for the availability of a particular depth/stencil buffer.
            </summary>
            <param name="backBuffer">Back buffer format.</param>
            <param name="depthBuffer">Depth buffer format.</param>
            <returns>TRUE if supported, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Driver.DepthBufferAvailable(GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to determine if a depth buffer can be used with a specific image format.
            </summary>
            <param name="format">Format to compare.</param>
            <returns>TRUE if available, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Driver.StencilBufferAvailable(GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to determine if a stencil buffer can be used with a specific image format.
            </summary>
            <param name="format">Format to compare.</param>
            <returns>TRUE if available, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Driver.DepthFormatSupported(GorgonLibrary.Graphics.ImageBufferFormats,GorgonLibrary.DepthBufferFormats)">
            <summary>
            Function to check for the availability of a particular depth/stencil buffer.
            </summary>
            <param name="backBuffer">Back buffer format.</param>
            <param name="depthBuffer">Depth buffer format.</param>
            <returns>TRUE if supported, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Driver.GetHashCode">
            <summary>
            Function to return a hash code for this object.
            </summary>
            <returns>Hash code of the object.</returns>
        </member>
        <member name="M:GorgonLibrary.Driver.ToString">
            <summary>
            Function to return a string representation of this object.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:GorgonLibrary.Driver.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="driverIndex">Index ordinal of the video adapter.</param>
        </member>
        <member name="P:GorgonLibrary.Driver.DeviceType">
            <summary>
            Property to return the device type.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.DeviceName">
            <summary>
            Property to return windows device name.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.Description">
            <summary>
            Property to return device description.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.DriverName">
            <summary>
            Property to return driver name.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.GUID">
            <summary>
            Property to return GUID of the device.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.ID">
            <summary>
            Property to return the device ID.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.Version">
            <summary>
            Property to return the version of the driver.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.Revision">
            <summary>
            Property to return the revision of the device.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.Vendor">
            <summary>
            Property to return the vendor ID of the device.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.Whql">
            <summary>
            Property to return the WHQL status.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SubSystem">
            <summary>
            Property to return the sub system ID.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.VideoModes">
            <summary>
            Property to return the video mode list for this device.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.DriverIndex">
            <summary>
            Property to return the ordinal index of this driver.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.HardwareAccelerated">
            <summary>
            Property to return whether this device is hardware accelerated or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.HardwareTransformAndLighting">
            <summary>
            Property to return whether this device has transform and lighting acceleration.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.MaximumStreamCount">
            <summary>
            Property to return the number of maximum streams for this driver.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportIndex32">
            <summary>
            Property to return whether the driver supports 32 bit indices or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportWBuffer">
            <summary>
            Property to return whether the driver supports W Buffers or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportSeparableAlphaBlend">
            <summary>
            Property to return whether the device supports separate blending for alpha and color channels.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.MaximumSimultaneousRenderTargets">
            <summary>
            Property to return the maximum number of simultaneous render targets.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.MaximumTextureStages">
            <summary>
            Property to return the maximum number of texture stages.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.MaximumBlendingStages">
            <summary>
            Property to return the maximum number of blending stages.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.MaximumPointSize">
            <summary>
            Property to return the maximum size for vertex points.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.MaximumLightCount">
            <summary>
            Property to return the maximum number of lights this device supports.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.MaximumTextureWidth">
            <summary>
            Property to return the maximum texture width.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.MaximumTextureHeight">
            <summary>
            Property to return the maximum texture height.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportZBufferTesting">
            <summary>
            Property to return whether z buffer testing is supported or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportAlternateHSR">
            <summary>
            Property to return whether alternate hidden surface removal is supported.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportDithering">
            <summary>
            Property to return whether dithering is supported.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportDynamicTextures">
            <summary>
            Property to return whether dynamic textures are supported.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportAutoGeneratingMipMaps">
            <summary>
            Property to return whether mip maps can be automatically generated.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.PresentIntervalSupport">
            <summary>
            Property to return the level of presentation interval support.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportResourceManagement">
            <summary>
            Property to return whether the device supports resource management.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportAnisotropicFiltering">
            <summary>
            Property to return whether the anisotropic filtering is supported.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportVertexBufferInSystemMemory">
            <summary>
            Property to return if vertex buffers in system memory can received TnL acceleration.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportVertexBufferInVideoMemory">
            <summary>
            Property to return if vertex buffers in video memory can received TnL acceleration.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportSeperateTextureMemories">
            <summary>
            Property to return if seperate texture memory can be used.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportNonSquareTexture">
            <summary>
            Property to return if the device supports non-square textures.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportNonPowerOfTwoTexture">
            <summary>
            Property to return whether this device supports non power of two textures.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportNonPowerOfTwoTextureConditional">
            <summary>
            Property to return if this device supports non power of two textures (with conditions).
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportTextureAlpha">
            <summary>
            Property to return whether the device supports alpha in textures.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportWrappingAddress">
            <summary>
            Property to return whether the device supports texture wrapping.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportClampingAddress">
            <summary>
            Property to return whether the device supports texture clamping.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportMirrorAddress">
            <summary>
            Property to return whether the device supports texture mirroring.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportMirrorOnceAddress">
            <summary>
            Property to return whether the device supports texture mirroring once.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportBorderAddress">
            <summary>
            Property to return whether the device supports texture borders.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportIndependentUVAddressing">
            <summary>
            Property to return whether the device supports independent UV addressing.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportBlendingFactor">
            <summary>
            Property to return whether the driver supports blending factors or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportBlendingInverseSourceAlpha">
            <summary>
            Property to return whether the card supports blending inverse source alpha.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportBlendingDestinationAlpha">
            <summary>
            Property to return whether the card supports blending the destination alpha.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportBlendingBothInverseSourceAlpha">
            <summary>
            Property to return whether the card supports blending both inverse source alpha.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportBlendingDestinationColor">
            <summary>
            Property to return whether the card supports blending the destination color.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportBlendingInverseDestinationAlpha">
            <summary>
            Property to return whether the card supports blending the inverse destination alpha.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportBlendingInverseDestinationColor">
            <summary>
            Property to return whether the card supports blending the inverse destination color.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportBlendingInverseSourceColor">
            <summary>
            Property to return whether the card supports blending the inverse source color.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportBlendingOne">
            <summary>
            Property to return whether the card supports blending the constant color.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportBlendingZero">
            <summary>
            Property to return whether the card supports blending passthrough.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportBlendingSourceAlpha">
            <summary>
            Property to return whether the card supports blending the source alpha.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportBlendingSourceColor">
            <summary>
            Property to return whether the card supports blending the source color.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportBlendingSourceAlphaSaturation">
            <summary>
            Property to return whether the card supports blending the source alpha saturation..
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportScissorTesting">
            <summary>
            Property to return whether the card supports scissor tests.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.PixelShaderVersion">
            <summary>
            Property to return what version of pixel shaders the card supports.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.VertexShaderVersion">
            <summary>
            Property to return what version of vertex shaders the card supports.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportStencilKeep">
            <summary>
            Property to return whether the device supports the stencil keep operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportStencilDecrement">
            <summary>
            Property to return whether the device supports the stencil decrement operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportStencilDecrementSaturate">
            <summary>
            Property to return whether the device supports the stencil decrement/saturate operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportStencilIncrement">
            <summary>
            Property to return whether the device supports the stencil increment operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportStencilIncrementSaturate">
            <summary>
            Property to return whether the device supports the stencil increment/saturate operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportStencilInvert">
            <summary>
            Property to return whether the device supports the stencil invert operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportStencilReplace">
            <summary>
            Property to return whether the device supports the stencil replace operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportTwoSidedStencil">
            <summary>
            Property to return whether the device supports the two sided stencil operations.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportStencilZero">
            <summary>
            Property to return whether the device supports the stencil zero operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportStencil">
            <summary>
            Property to return whether the device supports a stencil buffer or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportMRTIndependentBitDepths">
            <summary>
            Property to return whether the device supports independent bit depths when rendering to multiple render targets.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Driver.SupportMRTPostPixelShaderBlending">
            <summary>
            Property to return whether the device supports post pixel shader blending operations.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Serialization.XMLSerializer">
            <summary>
            Object representing an XML serializer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to perform clean up of all objects.  FALSE to clean up only unmanaged objects.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.Serialize">
            <summary>
            Function to serialize an object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.Deserialize">
            <summary>
            Function to deserialize an object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.WriteComment(System.String)">
            <summary>
            Function to write a comment.
            </summary>
            <param name="comment">Comment to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.WriteGroupBegin(System.String)">
            <summary>
            Function to write the start of a group of data.
            </summary>
            <param name="groupName">Name of the group.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.WriteGroupEnd">
            <summary>
            Function to write the end of the group started with WriteGroupBegin().
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.Write(System.String,System.String)">
            <summary>
            Function to write a string value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.Write(System.String,System.Char)">
            <summary>
            Function to write a character value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.Write(System.String,System.Char[],System.Int32,System.Int32)">
            <summary>
            Function to write an array of character values to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="values">Values to write.</param>
            <param name="start">Array index to start at.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.Write(System.String,System.UInt64)">
            <summary>
            Function to write an unsigned long value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.Write(System.String,System.Int64)">
            <summary>
            Function to write a long value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.Write(System.String,System.UInt32)">
            <summary>
            Function to write an unsigned integer value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.Write(System.String,System.Int32)">
            <summary>
            Function to write an integer value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.Write(System.String,System.Single)">
            <summary>
            Function to write a floating point value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.Write(System.String,System.Double)">
            <summary>
            Function to write a floating point value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.Write(System.String,System.UInt16)">
            <summary>
            Function to write an unsigned short value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.Write(System.String,System.Int16)">
            <summary>
            Function to write a short value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.Write(System.String,System.SByte)">
            <summary>
            Function to write a signed byte value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.Write(System.String,System.Byte)">
            <summary>
            Function to write a byte value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.Write(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Function to write an array of byte values to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="values">Values to write.</param>
            <param name="start">Array index to start at.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.Write(System.String,System.Boolean)">
            <summary>
            Function to write a boolean value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.ReadAttribute(System.String,System.String)">
            <summary>
            Function to read an attribute for an item.
            </summary>
            <param name="item">Item that contains the attribute.</param>
            <param name="attributeName">Attribute to read.</param>
            <returns>Value for the attribute.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.ReadBool(System.String)">
            <summary>
            Function to read a boolean value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.ReadBytes(System.String,System.Int32)">
            <summary>
            Function to read an array of byte values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <param name="count">The count of bytes to read.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.ReadBytes(System.String)">
            <summary>
            Function to read an array of byte values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.ReadByte(System.String)">
            <summary>
            Function to read a byte value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.ReadSByte(System.String)">
            <summary>
            Function to read a signed byte value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.ReadInt16(System.String)">
            <summary>
            Function to read a short value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.ReadUInt16(System.String)">
            <summary>
            Function to read an unsigned short value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.ReadDouble(System.String)">
            <summary>
            Function to read a double value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.ReadSingle(System.String)">
            <summary>
            Function to read a floating point value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.ReadInt32(System.String)">
            <summary>
            Function to read an integer value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.ReadUInt32(System.String)">
            <summary>
            Function to read an unsigned integer value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.ReadInt64(System.String)">
            <summary>
            Function to read a long value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.ReadUInt64(System.String)">
            <summary>
            Function to read an unsigned long value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.ReadChars(System.String,System.Int32)">
            <summary>
            Function to read an array of character values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <param name="count">The count of characters to read.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.ReadChar(System.String)">
            <summary>
            Function to read a character value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.ReadString(System.String)">
            <summary>
            Function to read a string values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.GotoField(System.String)">
            <summary>
            Function to move to a field within the data.
            </summary>
            <param name="name">Name of the field.</param>
            <returns>TRUE if found, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.XMLSerializer.#ctor(GorgonLibrary.Serialization.ISerializable,System.IO.Stream)">
            <summary>
            Constructor.
            </summary>
            <param name="serialObject">Object to serialize.</param>
            <param name="stream">Stream to write or read data through.</param>
        </member>
        <member name="T:GorgonLibrary.Serialization.StreamWriterEx">
            <summary>
            Object representing a stream writer that can keep its stream open after it's closed.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.StreamWriterEx.Close">
            <summary>
            Function to close the writer and its underlying stream if KeepStreamOpen is false.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.StreamWriterEx.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="output">Output stream.</param>
            <param name="encoder">Encoding for the stream writer.</param>
            <param name="keepStreamOpen">TRUE to keep the underlying stream open when the writer is closed, FALSE for normal behaviour.</param>
            <param name="bufferSize">Sets the buffer size.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.StreamWriterEx.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="output">Output stream.</param>
            <param name="encoder">Encoding for the stream writer.</param>
            <param name="keepStreamOpen">TRUE to keep the underlying stream open when the writer is closed, FALSE for normal behaviour.</param>		
        </member>
        <member name="M:GorgonLibrary.Serialization.StreamWriterEx.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="output">Output stream.</param>
            <param name="keepStreamOpen">TRUE to keep the underlying stream open when the writer is closed, FALSE for normal behaviour.</param>
        </member>
        <member name="P:GorgonLibrary.Serialization.StreamWriterEx.KeepStreamOpen">
            <summary>
            Property to set or return whether to keep the underlying stream open or not after the writer is closed.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Serialization.BinaryWriterEx">
            <summary>
            Object representing a binary writer that can keep its stream open after it's closed.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinaryWriterEx.Close">
            <summary>
            Function to close the writer and its underlying stream if KeepStreamOpen is false.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinaryWriterEx.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="output">Output stream.</param>
            <param name="encoder">Encoding for the binary writer.</param>
            <param name="keepStreamOpen">TRUE to keep the underlying stream open when the writer is closed, FALSE for normal behaviour.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinaryWriterEx.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="output">Output stream.</param>
            <param name="keepStreamOpen">TRUE to keep the underlying stream open when the writer is closed, FALSE for normal behaviour.</param>
        </member>
        <member name="P:GorgonLibrary.Serialization.BinaryWriterEx.KeepStreamOpen">
            <summary>
            Property to set or return whether to keep the underlying stream open or not after the writer is closed.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ImageList">
            <summary>
            Object representing a list of images.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ImageList.Add(GorgonLibrary.Graphics.Image)">
            <summary>
            Function to add an image to the list.
            </summary>
            <param name="image">Image to add.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ImageList.Remove(System.String)">
            <summary>
            Function to remove an image by name from the list.
            </summary>
            <param name="imageName">Name of the image to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ImageList.Remove(System.Int32)">
            <summary>
            Function to remove an image by its index.
            </summary>
            <param name="index">Index of the image to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ImageList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ImageList.Item(System.Int32)">
            <summary>
            Property to return an image by index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ImageList.Item(System.String)">
            <summary>
            Property to return an image by its key.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.FontList">
            <summary>
            Object representing a list of fonts.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.FontList.Add(GorgonLibrary.Graphics.Font)">
            <summary>
            Function to add a font to the list.
            </summary>
            <param name="font">Font to add.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.FontList.Remove(System.String)">
            <summary>
            Function to remove a font by name from the list.
            </summary>
            <param name="fontName">Name of the font to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.FontList.Remove(System.Int32)">
            <summary>
            Function to remove an font by its index.
            </summary>
            <param name="index">Index of the font to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.FontList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.FontList.Item(System.Int32)">
            <summary>
            Property to return an font by index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.FontList.Item(System.String)">
            <summary>
            Property to return an font by its key.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.FontShadowDirection">
            <summary>
            Direction of the font shadow.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FontShadowDirection.UpperLeft">
            <summary>Upper left corner.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FontShadowDirection.MiddleLeft">
            <summary>Middle left.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FontShadowDirection.LowerLeft">
            <summary>Lower left corner.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FontShadowDirection.UpperMiddle">
            <summary>Upper middle.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FontShadowDirection.LowerMiddle">
            <summary>Lower middle.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FontShadowDirection.UpperRight">
            <summary>Upper right corner.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FontShadowDirection.MiddleRight">
            <summary>Middle right.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FontShadowDirection.LowerRight">
            <summary>Lower right corner.</summary>
        </member>
        <member name="T:GorgonLibrary.SortedCollection`1">
            <summary>
            Object representing a collection that can be sorted by an arbitrary sorter.
            </summary>
            <typeparam name="T">Type of data to store in the collection.</typeparam>
        </member>
        <member name="M:GorgonLibrary.SortedCollection`1.AddItem(System.String,`0)">
            <summary>
            Function to add an item to the collection.
            </summary>
            <param name="key">Key for the item.</param>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:GorgonLibrary.SortedCollection`1.ClearItems">
            <summary>
            Function to clear the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.SortedCollection`1.RemoveItem(System.Int32)">
            <summary>
            Function to remove an object from the list by index.
            </summary>
            <param name="index">Index to remove at.</param>
        </member>
        <member name="M:GorgonLibrary.SortedCollection`1.RemoveItem(System.String)">
            <summary>
            Function to remove an object from the list by key.
            </summary>
            <param name="key">Key of the object to remove.</param>
        </member>
        <member name="M:GorgonLibrary.SortedCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Function to sort the array.
            </summary>
        </member>
        <member name="M:GorgonLibrary.SortedCollection`1.Sort">
            <summary>
            Function to sort the array.
            </summary>
        </member>
        <member name="M:GorgonLibrary.SortedCollection`1.GetEnumerator">
            <summary>
            Function to return a new enumerator object.
            </summary>
            <returns>Enumerator object.</returns>
        </member>
        <member name="M:GorgonLibrary.SortedCollection`1.GetKeySortedEnumerator">
            <summary>
            Function to return a new unsorted enumerator object.
            </summary>
            <returns>Enumerator object.</returns>
        </member>
        <member name="M:GorgonLibrary.SortedCollection`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.SortedCollection`1"/> class.
            </summary>
            <param name="defaultsize">Default size of the collection.</param>
            <param name="comparer">Object used to perform the comparsion for sorting.</param>
            <param name="caseSensitiveKeys">TRUE if the keys are case sensitive, FALSE if not.</param>
        </member>
        <member name="M:GorgonLibrary.SortedCollection`1.#ctor(System.Collections.Generic.IComparer{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.SortedCollection`1"/> class.
            </summary>
            <param name="comparer">Object used to perform the comparsion for sorting.</param>
            <param name="caseSensitiveKeys">TRUE if the keys are case sensitive, FALSE if not.</param>
        </member>
        <member name="M:GorgonLibrary.SortedCollection`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.SortedCollection`1"/> class.
            </summary>
            <param name="comparer">Object used to perform the comparsion for sorting.</param>
        </member>
        <member name="P:GorgonLibrary.SortedCollection`1.Item(System.Int32)">
            <summary>
            Property to return an item by index.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.RenderStates">
            <summary>
            Object representing the various renderstates.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetScissorTest(System.Boolean)">
            <summary>
            Function to enable/disable scissor testing.
            </summary>
            <param name="value">TRUE to enable, FALSE to disable.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetScissorRectangle(System.Drawing.Rectangle)">
            <summary>
            Function to set the scissor test rectangle.
            </summary>
            <param name="value">Rectangle to use for scissor testing.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetAlphaTestFunction(GorgonLibrary.CompareFunctions)">
            <summary>
            Function to set the alpha testing function.
            </summary>
            <param name="value">Function used for testing.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetAlphaTestValue(System.Int32)">
            <summary>
            Function to set the alpha testing reference value.
            </summary>
            <param name="value">Value to use for testing.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetAlphaTestEnabled(System.Boolean)">
            <summary>
            Function to set whether or not the alpha testing enabled.
            </summary>
            <param name="value">TRUE to enable, FALSE to disable.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetSourceBlendOperation(GorgonLibrary.Graphics.AlphaBlendOperation)">
            <summary>
            Function to set the source alpha blending operation.
            </summary>
            <param name="value">Blend operation for the source.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetDestinationBlendOperation(GorgonLibrary.Graphics.AlphaBlendOperation)">
            <summary>
            Function to set the destination alpha blending operation.
            </summary>
            <param name="value">Blend operation for the destination.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetSourceAlphaOperation(GorgonLibrary.Graphics.AlphaBlendOperation)">
            <summary>
            Function to set the source alpha blending operation.
            </summary>
            <param name="value">Blend operation for the source.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetDestinationAlphaOperation(GorgonLibrary.Graphics.AlphaBlendOperation)">
            <summary>
            Function to set the destination alpha blending operation.
            </summary>
            <param name="value">Blend operation for the destination.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetAlphaBlendEnabled(System.Boolean)">
            <summary>
            Function to set whether alpha blending is enabled or not.
            </summary>
            <param name="value">TRUE to enable, FALSE to disable.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetCullMode(GorgonLibrary.Graphics.CullingMode)">
            <summary>
            Function to set the culling mode.
            </summary>
            <param name="value">Culling mode to set.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetVertexPointSize(System.Single)">
            <summary>
            Function to set the vertex point size.
            </summary>
            <param name="value">Size of the vertex point.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetNormalize(System.Boolean)">
            <summary>
            Function to set the re-normalize flag.
            </summary>
            <param name="value">TRUE to renormalize the normals, FALSE to leave them alone.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetDepthBufferEnabled(System.Boolean)">
            <summary>
            Function to set the depth buffer enabled flag.
            </summary>
            <param name="value">TRUE to enable, FALSE to disable.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetShadingMode(GorgonLibrary.Internal.ShadingMode)">
            <summary>
            Function to set the shading mode.
            </summary>
            <param name="value">Shading mode.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetDepthBufferWriteEnabled(System.Boolean)">
            <summary>
            Function to set the depth buffer writing enabled flag.
            </summary>
            <param name="value">TRUE to enable, FALSE to disable.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetLightingEnabled(System.Boolean)">
            <summary>
            Function to set the lighting enabled flag.
            </summary>
            <param name="value">TRUE to enable, FALSE to disable.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetSpecularEnabled(System.Boolean)">
            <summary>
            Function to set the specular highlighting enabled flag.
            </summary>
            <param name="value">TRUE to enable, FALSE to disable.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetDepthBufferBias(System.Single)">
            <summary>
            Function to set the depth buffer bias.
            </summary>
            <param name="value">Depth buffer bias value.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetDepthBufferCompareFunction(GorgonLibrary.CompareFunctions)">
            <summary>
            Function to set the depth buffer comparison function.
            </summary>
            <param name="value">Depth buffer comparison function.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetDrawingMode(GorgonLibrary.Internal.DrawingMode)">
            <summary>
            Function to set the drawing mode.
            </summary>
            <param name="value">The triangle drawing mode.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetDrawLastPixel(System.Boolean)">
            <summary>
            Function to set whether the last pixel should be drawn or not.
            </summary>
            <param name="value">TRUE to enable, FALSE to disable.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetStencilEnabled(System.Boolean)">
            <summary>
            Function to set whether the stencil buffer is enabled or not.
            </summary>
            <param name="value">TRUE to enable, FALSE if not.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetStencilReference(System.Int32)">
            <summary>
            Function to set the stencil buffer reference value.
            </summary>
            <param name="value">Reference value for the stencil buffer.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetStencilMask(System.Int32)">
            <summary>
            Function to set the stencil buffer mask value.
            </summary>
            <param name="value">Mask value for the stencil buffer.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetStencilPassOperation(GorgonLibrary.Graphics.StencilOperations)">
            <summary>
            Function to set the pass stencil operation.
            </summary>
            <param name="value">Operation for pass.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetStencilFailOperation(GorgonLibrary.Graphics.StencilOperations)">
            <summary>
            Function to set the fail stencil operation.
            </summary>
            <param name="value">Operation for fail.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetStencilZFailOperation(GorgonLibrary.Graphics.StencilOperations)">
            <summary>
            Function to set the z-fail stencil operation.
            </summary>
            <param name="value">Operation for z-fail.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetStencilCompare(GorgonLibrary.CompareFunctions)">
            <summary>
            Function to set the comparison stencil operation.
            </summary>
            <param name="value">Comparison operation.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetDitherEnabled(System.Boolean)">
            <summary>
            Function to set whether dithering is enabled or not.
            </summary>
            <param name="value">TRUE to enable, FALSE to disable.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.CopyStates(GorgonLibrary.Internal.RenderStates)">
            <summary>
            Function to copy the render states from another render state object.
            </summary>
            <param name="copy">Object to copy.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.SetStates">
            <summary>
            Function to set the render states.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.RenderStates.#ctor(GorgonLibrary.Internal.RenderStates)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Internal.RenderStates"/> class.
            </summary>
            <param name="copy">The renderstates to copy into this object.</param>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.DeviceReady">
            <summary>
            Property to return whether the device is ready or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.Device">
            <summary>
            Property to return the device object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.PropertyShouldSetState">
            <summary>
            Property to set or return whether setting the properties should affect the states or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.StencilEnable">
            <summary>
            Property to set or return whether to enable the stencil buffer or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.StencilReference">
            <summary>
            Property to set or return the reference value for the stencil buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.StencilMask">
            <summary>
            Property to set or return the mask value for the stencil buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.StencilPassOperation">
            <summary>
            Property to set or return the operation for passing stencil values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.StencilFailOperation">
            <summary>
            Property to set or return the operation for the failing stencil values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.StencilZFailOperation">
            <summary>
            Property to set or return the stencil operation for the failing depth values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.StencilCompare">
            <summary>
            Property to set or return the stencil comparison function.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.ScissorTesting">
            <summary>
            Property to set or return whether scissor testing is enabled.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.ScissorRectangle">
            <summary>
            Property to set or return the scissor test rectangle.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.DrawLastPixel">
            <summary>
            Property to set or return whether D3D should draw the last pixel in a primitive operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.CullingMode">
            <summary>
            Property to set or return the culling mode used.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.Normalize">
            <summary>
            Property to set or return whether the scene should be renormalized.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.DepthBufferEnabled">
            <summary>
            Property to set or return whether the depth buffer is enabled or disabled.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.DepthBufferWriteEnabled">
            <summary>
            Property to set or return whether we can write to the depth buffer or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.LightingEnabled">
            <summary>
            Property to set or return whether lighting is enabled or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.ShadingMode">
            <summary>
            Property to set or return the shading mode.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.DepthTestFunction">
            <summary>
            Property to set or return the depth buffer test comparison function.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.DepthBias">
            <summary>
            Property to set or return the depth buffer biasing.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.SpecularEnabled">
            <summary>
            Property to set or return whether specular hilights are enabled or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.DrawingMode">
            <summary>
            Property to return or set the drawing mode for the scene.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.PointSize">
            <summary>
            Property to set or return the size of individual vertex points.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.AlphaBlendEnabled">
            <summary>
            Property to set or return whether alpha blending is enabled or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.SourceAlphaBlendOperation">
            <summary>
            Property to set the source alpha blending operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.DestinationAlphaBlendOperation">
            <summary>
            Property to set the destination alpha blending operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.SourceAlphaOperation">
            <summary>
            Property to set the source alpha blending operation for the alpha channel.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.DestinationAlphaOperation">
            <summary>
            Property to set the destination alpha blending operation for the alpha channel.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.AlphaTestFunction">
            <summary>
            Property to set or return the function used for alpha testing.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.AlphaTestValue">
            <summary>
            Property to set or return the reference value used for alpha testing.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.AlphaTestEnabled">
            <summary>
            Property to set or return whether alpha testing is enabled or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.RenderStates.DitheringEnabled">
            <summary>
            Property to set or return whether dithering is enabled or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Serialization.ImageSerializer">
            <summary>
            Object representing a serializer for binary image files.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to perform clean up of all objects.  FALSE to clean up only unmanaged objects.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.Serialize">
            <summary>
            Function to serialize an object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.Deserialize">
            <summary>
            Function to deserialize an object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.Write(System.String,System.String)">
            <summary>
            Function to write a string value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.Write(System.String,System.Char)">
            <summary>
            Function to write a character value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.Write(System.String,System.Char[],System.Int32,System.Int32)">
            <summary>
            Function to write an array of character values to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="values">Values to write.</param>
            <param name="start">Array index to start at.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.Write(System.String,System.UInt64)">
            <summary>
            Function to write an unsigned long value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.Write(System.String,System.Int64)">
            <summary>
            Function to write a long value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.Write(System.String,System.UInt32)">
            <summary>
            Function to write an unsigned integer value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.Write(System.String,System.Int32)">
            <summary>
            Function to write an integer value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.Write(System.String,System.Single)">
            <summary>
            Function to write a floating point value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.Write(System.String,System.Double)">
            <summary>
            Function to write a floating point value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.Write(System.String,System.UInt16)">
            <summary>
            Function to write an unsigned short value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.Write(System.String,System.Int16)">
            <summary>
            Function to write a short value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.Write(System.String,System.SByte)">
            <summary>
            Function to write a signed byte value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.Write(System.String,System.Byte)">
            <summary>
            Function to write a byte value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.Write(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Function to write an array of byte values to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="values">Values to write.</param>
            <param name="start">Array index to start at.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.Write(System.String,System.Boolean)">
            <summary>
            Function to write a boolean value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.ReadBool(System.String)">
            <summary>
            Function to read a boolean value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.ReadBytes(System.String,System.Int32)">
            <summary>
            Function to read an array of byte values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <param name="count">The count of bytes to read.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.ReadBytes(System.String)">
            <summary>
            Function to read an array of byte values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.ReadByte(System.String)">
            <summary>
            Function to read a byte value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.ReadSByte(System.String)">
            <summary>
            Function to read a signed byte value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.ReadInt16(System.String)">
            <summary>
            Function to read a short value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.ReadUInt16(System.String)">
            <summary>
            Function to read an unsigned short value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.ReadDouble(System.String)">
            <summary>
            Function to read a double value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.ReadSingle(System.String)">
            <summary>
            Function to read a floating point value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.ReadInt32(System.String)">
            <summary>
            Function to read an integer value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.ReadUInt32(System.String)">
            <summary>
            Function to read an unsigned integer value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.ReadInt64(System.String)">
            <summary>
            Function to read a long value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.ReadUInt64(System.String)">
            <summary>
            Function to read an unsigned long value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.ReadChars(System.String,System.Int32)">
            <summary>
            Function to read an array of character values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <param name="count">The count of characters to read.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.ReadChar(System.String)">
            <summary>
            Function to read a character value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.ReadString(System.String)">
            <summary>
            Function to read a string values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.ImageSerializer.#ctor(GorgonLibrary.Graphics.Image,System.IO.Stream)">
            <summary>
            Constructor.
            </summary>
            <param name="image">Image to (de)serialize.</param>
            <param name="stream">Stream to write or read data through.</param>
        </member>
        <member name="T:GorgonLibrary.Graphics.PrimaryRenderWindow">
            <summary>
            Object representing the primary rendering window.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.RenderWindow">
            <summary>
            A render window allows us to receive output.
            </summary>
            <remarks>
            This is where the final output of the rendering will be sent and displayed.  This can be a form or control.
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.RenderWindow._presentParameters">
            <summary>Render target presentation parameters.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.RenderWindow._ownerForm">
            <summary>Form that owns the owning control.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.RenderWindow._requestedVideoMode">
            <summary>Video mode that we requested.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.RenderWindow._currentVideoMode">
            <summary>Video mode for render window.</summary>		
        </member>
        <member name="F:GorgonLibrary.Graphics.RenderWindow._owner">
            <summary>Owning control of this render window.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.RenderWindow._VSyncInterval">
            <summary>Vertical sync intervals.</summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.CreateSwapChain(GorgonLibrary.VideoMode,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Function to create a swap chain render target.
            </summary>
            <param name="mode">Mode to use.</param>
            <param name="usedepth">TRUE to use a depth buffer, FALSE to exclude.</param>
            <param name="usestencil">TRUE to use a stencil buffer, FALSE to exclude.</param>
            <param name="resize">TRUE if resizing, FALSE if not.</param>
            <param name="preserveBackBuffer">TRUE to preserve the contents of the back buffer when the target is updated, FALSE to discard.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.SetDepthStencil(System.Boolean,System.Boolean)">
            <summary>
            Function to set whether to use a depth and/or stencil buffer.
            </summary>
            <param name="useDepth">TRUE to use a depth buffer, FALSE to exclude.</param>
            <param name="useStencil">TRUE to use a stencil buffer, FALSE to exclude.  If the depth buffer is FALSE, then this is automatically FALSE.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.SetDimensions(System.Int32,System.Int32)">
            <summary>
            Function to set the width and height of the target.
            </summary>
            <param name="width">Width to set.</param>
            <param name="height">Height to set.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.D3DFlip">
            <summary>
            Function to perform a flip of the D3D buffers.
            </summary>
            <returns>A result code if the device is in a lost state.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.OnOwnerResized(System.Object,System.EventArgs)">
            <summary>
            Function to handle a resize of the owner.
            </summary>
            <param name="sender">Sender of this event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.UpdateDepthStencilFormat(System.Boolean,System.Boolean)">
            <summary>
            Function to return a viable stencil/depth buffer.
            </summary>
            <param name="usestencil">TRUE to use a stencil, FALSE to exclude.</param>
            <param name="usedepth">TRUE to use a depth buffer, FALSE to exclude.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.SetPresentParams(GorgonLibrary.VideoMode,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Function to set the presentation parameters for Direct3D.
            </summary>
            <param name="mode">Video mode to use.</param>
            <param name="usewindow">TRUE to use windowed mode, FALSE to use fullscreen.</param>
            <param name="resize">TRUE if we're resizing the window, FALSE if not.</param>
            <param name="resizewidth">If resize is TRUE, take video mode width from this.</param>
            <param name="resizeheight">If resize is TRUE, take video mode height from this.</param>
            <param name="preserveBackBuffer">TRUE to preserve the contents of the back buffer when the target is updated, FALSE to discard.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.Update">
            <summary>
            Function to render the scene for this target.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.CopyToImage(GorgonLibrary.Graphics.RenderImage)">
            <summary>
            Function to copy the render target into a render target image.
            </summary>
            <param name="destination">The render image that will receive the data.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.CopyToImage(GorgonLibrary.Graphics.Image)">
            <summary>
            Function to copy the render target into an image.
            </summary>
            <param name="image">Image that will receive the data.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.#ctor(System.String,System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.RenderWindow"/> class.
            </summary>
            <param name="name">Name of this swap chain.</param>
            <param name="owner">Owning window of this render target.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.#ctor(System.String,System.Windows.Forms.Control,System.Int32,System.Int32,GorgonLibrary.BackBufferFormats,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.RenderWindow"/> class.
            </summary>
            <param name="name">Name of this swap chain.</param>
            <param name="owner">Owning window of this render target.</param>
            <param name="width">Width of the render window.</param>
            <param name="height">Height of the render window.</param>
            <param name="format">Back buffer format of the render window.</param>
            <param name="useDepth">TRUE to use a depth buffer, FALSE to exclude.</param>
            <param name="useStencil">TRUE to use a stencil buffer, FALSE to exclude.</param>
            <param name="preserveBackBuffer">TRUE to preserve the contents of the back buffer when the target is updated, FALSE to discard.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.#ctor(System.String,System.Windows.Forms.Control,System.Int32,System.Int32,GorgonLibrary.BackBufferFormats,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.RenderWindow"/> class.
            </summary>
            <param name="name">Name of this swap chain.</param>
            <param name="owner">Owning window of this render target.</param>
            <param name="width">Width of the render window.</param>
            <param name="height">Height of the render window.</param>
            <param name="format">Back buffer format of the render window.</param>
            <param name="useDepth">TRUE to use a depth buffer, FALSE to exclude.</param>
            <param name="preserveBackBuffer">TRUE to preserve the contents of the back buffer when the target is updated, FALSE to discard.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.#ctor(System.String,System.Windows.Forms.Control,System.Int32,System.Int32,GorgonLibrary.BackBufferFormats,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.RenderWindow"/> class.
            </summary>
            <param name="name">Name of this swap chain.</param>
            <param name="owner">Owning window of this render target.</param>
            <param name="width">Width of the render window.</param>
            <param name="height">Height of the render window.</param>
            <param name="format">Back buffer format of the render window.</param>
            <param name="preserveBackBuffer">TRUE to preserve the contents of the back buffer when the target is updated, FALSE to discard.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.#ctor(System.String,System.Windows.Forms.Control,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.RenderWindow"/> class.
            </summary>
            <param name="name">Name of this swap chain.</param>
            <param name="owner">Owning window of this render target.</param>
            <param name="width">Width of the render window.</param>
            <param name="height">Height of the render window.</param>
            <param name="preserveBackBuffer">TRUE to preserve the contents of the back buffer when the target is updated, FALSE to discard.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.#ctor(System.String,System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.RenderWindow"/> class.
            </summary>
            <param name="name">Name of this swap chain.</param>
            <param name="owner">Owning window of this render target.</param>
            <param name="preserveBackBuffer">TRUE to preserve the contents of the back buffer when the target is updated, FALSE to discard.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to release all resources, FALSE to only release unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.DeviceLost">
            <summary>
            Function called when device is lost.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.ForceRelease">
            <summary>
            Function to force the loss of data associated with this object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderWindow.DeviceReset">
            <summary>
            Function called when device is reset.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderWindow.SwapChain">
            <summary>
            Property to return the swap chain.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderWindow.IsValidForMRTPostPixelShaderBlending">
            <summary>
            Property to return whether this render target is valid for post pixel shader blending.
            </summary>
            <value></value>
            <remarks>
            If the driver supports post pixel shader blending of render targets (<see cref="P:GorgonLibrary.Driver.SupportMRTPostPixelShaderBlending">Driver.SupportMRTPostPixelShaderBlending</see> = True)
            then this property needs to be queried to find out if the particular render target can support post pixel shader blending.
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderWindow.VSyncInterval">
            <summary>
            Property to return the presentation interval.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderWindow.DepthBufferFormat">
            <summary>
            Property to return the format of the depth buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderWindow.Owner">
            <summary>
            Property to return the owning control of this swap chain.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderWindow.OwnerForm">
            <summary>
            Property to return the owning form of the owning control.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderWindow.UseDepthBuffer">
            <summary>
            Property to return whether the swap chain has a depth buffer attached or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderWindow.UseStencilBuffer">
            <summary>
            Property to return whether the swap chain has a stencil buffer attached or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderWindow.Height">
            <summary>
            Property to set or return the height of the render target.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderWindow.Width">
            <summary>
            Property to set or return the width of the render target.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderWindow.Mode">
            <summary>
            Property to return the currently set video mode.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PrimaryRenderWindow.DrawStats">
            <summary>
            Function to draw frame statistics.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PrimaryRenderWindow.DrawLogo">
            <summary>
            Function to draw the logo.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PrimaryRenderWindow.SaveFormSettings">
            <summary>
            Function to save the settings for a form.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PrimaryRenderWindow.RestoreFormSettings">
            <summary>
            Function to restore settings for an owner form.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PrimaryRenderWindow.ResetMode(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Function to toggle windowed or fullscreen mode.
            </summary>
            <param name="resize">TRUE if we're resizing, FALSE if not.</param>
            <param name="resizewidth">New width if we're resizing.</param>
            <param name="resizeheight">New height if we're resizing.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PrimaryRenderWindow.D3DFlip">
            <summary>
            Function to perform a flip of the D3D buffers.
            </summary>
            <returns>
            A result code if the device is in a lost state.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.PrimaryRenderWindow.OnOwnerResized(System.Object,System.EventArgs)">
            <summary>
            Function to handle a resize of the owner.
            </summary>
            <param name="sender">Sender of this event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PrimaryRenderWindow.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to release all resources, FALSE to only release unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PrimaryRenderWindow.SetPresentParams(GorgonLibrary.VideoMode,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Function to set the presentation parameters for Direct3D.
            </summary>
            <param name="mode">Video mode to use.</param>
            <param name="usewindow">TRUE to use windowed mode, FALSE to use fullscreen.</param>
            <param name="resize">TRUE if we're resizing the window, FALSE if not.</param>
            <param name="resizewidth">If resize is TRUE, take video mode width from this.</param>
            <param name="resizeheight">If resize is TRUE, take video mode height from this.</param>
            <param name="preserveBackBuffer">TRUE to preserve the contents of the back buffer when the target is updated, FALSE to discard.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PrimaryRenderWindow.SetMode(GorgonLibrary.VideoMode,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GorgonLibrary.VSyncIntervals)">
            <summary>
            Function to set the video mode for the render window.
            </summary>
            <param name="mode">Mode to use.</param>
            <param name="windowed">TRUE to use windowed mode, FALSE to use full screen</param>
            <param name="usedepth">TRUE to use a depth buffer, FALSE to exclude.</param>
            <param name="usestencil">TRUE to use a stencil buffer, FALSE to exclude.</param>		
            <param name="dontCreate">TRUE to force the device to reset, rather than recreate.</param>
            <param name="vSyncInterval">V-sync interval for presentation.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PrimaryRenderWindow.ResetLostDevice">
            <summary>
            Function to reset a device that's in a lost state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PrimaryRenderWindow.Update">
            <summary>
            Function to render the scene for this target.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PrimaryRenderWindow.DeviceReset">
            <summary>
            Function called when device is reset.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PrimaryRenderWindow.#ctor(System.Windows.Forms.Control)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Control that will own this render target window.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.PrimaryRenderWindow.DeviceNotReset">
            <summary>
            Property to set or return if the device has been reset yet or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PrimaryRenderWindow.Device">
            <summary>
            Property to return the D3D device object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PrimaryRenderWindow.ClearEachFrame">
            <summary>
            Property to set or return flags that indicate what should be cleared per frame.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PrimaryRenderWindow.FormSettings">
            <summary>
            Property to return the stored form settings.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PrimaryRenderWindow.Windowed">
            <summary>
            Property to set or return whether this render window is full screen or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.PrimaryRenderWindow.WinSettings">
            <summary>
            Structure to save the control/form settings.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PrimaryRenderWindow.WinSettings.Caption">
            <summary>
            Caption of the control.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PrimaryRenderWindow.WinSettings.MinimizeBox">
            <summary>
            Minimize box present.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PrimaryRenderWindow.WinSettings.MaximizeBox">
            <summary>
            Maximize box present.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PrimaryRenderWindow.WinSettings.ControlBox">
            <summary>
            Maximize box present.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PrimaryRenderWindow.WinSettings.TopMost">
            <summary>
            Top most form.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PrimaryRenderWindow.WinSettings.Style">
            <summary>
            Form border style.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PrimaryRenderWindow.WinSettings.Left">
            <summary>
            Form X position.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PrimaryRenderWindow.WinSettings.Top">
            <summary>
            Form Y position.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PrimaryRenderWindow.WinSettings.Width">
            <summary>
            Form width.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.PrimaryRenderWindow.WinSettings.Height">
            <summary>
            Form height.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.BaseShader`1">
            <summary>
            Base shader for single vertex/pixel shaders (i.e. non-FX).
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.Shader">
            <summary>
            Base class for shaders.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.IShaderRenderer">
            <summary>
            Defines a shader used in the rendering process.
            </summary>
            <remarks>This defines the component of a shader that can be applied to the rendering of a scene.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderRenderer.GetDefinedConstants">
            <summary>
            Function to retrieve the pre-defined constant parameters from a shader.
            </summary>
            <remarks>
            A shader can contain pre-defined constant values that the library will update automatically.  This is done to cut down on some redundant code that the user will
            typically always have to perform when calling a shader.  For example, the user may have 3 shaders and each time a shader is used the current sprite image would have to 
            be set by the user each time the image changed for each sprite.  Additionally, passing the transformations (i.e. rotation, scaling and translation) to the shader 
            is also more work than it needs to be.
            <para>To use this "default" functionality your shader will have to implement one of these constants:
            <list type="table">
            <listheader>
            <term>Constant type and name</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>float4x4 _projectionMatrix</term>
            <description>The current projection <see cref="T:GorgonLibrary.Matrix">matrix</see> defined by the current <see cref="T:GorgonLibrary.Graphics.Viewport">Viewport</see>.  Use this to transform vertices in a vertex shader into screen space.</description>
            </item>
            <item>
            <term>Texture _spriteImage</term>
            <description>This is the currently active <see cref="T:GorgonLibrary.Graphics.Image">image</see> (at index 0 in the texture stage) for a given <see cref="T:GorgonLibrary.Graphics.Sprite">Sprite</see> or series of sprites.</description>
            </item>
            </list>
            </para>
            <para>The constants are case sensitive and as such must be declared exactly as shown in the table above with the leading underscore character.  If the constant is not
            named properly it will not be used as a default.</para>
            <para>To test whether the default constants are available, check the return value of <see cref="P:GorgonLibrary.Graphics.IShaderRenderer.HasProjectionMatrix">HasProjectionMatrix</see> 
            or <see cref="P:GorgonLibrary.Graphics.IShaderRenderer.HasSpriteImage">HasSpriteImage</see> and if
            these properties return TRUE, then the constant has been implemented.</para>
            <para>This function is meant to be called internally by the shader.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderRenderer.GetDefinedParameter(GorgonLibrary.Graphics.PredefinedShaderConstants)">
            <summary>
            Function to return the parameter associated with the predefiend constant.
            </summary>
            <param name="constant">Predefined constant representing the parameter.</param>
            <returns>The parameter interface for the <paramref name="constant"/>.</returns>
            <remarks>The function will return the associated parameter object for a given pre-defined constant.  The constant should be defined in the shader as one of:
            <list type="table">
            <listheader>
            <term>Constant type and name</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>float4x4 _projectionMatrix</term>
            <description>The current projection <see cref="T:GorgonLibrary.Matrix">matrix</see> defined by the current <see cref="T:GorgonLibrary.Graphics.Viewport">Viewport</see>.  Use this to transform vertices in a vertex shader into screen space.</description>
            </item>
            <item>
            <term>Texture _spriteImage</term>
            <description>This is the currently active <see cref="T:GorgonLibrary.Graphics.Image">image</see> (at index 0 in the texture stage) for a given <see cref="T:GorgonLibrary.Graphics.Sprite">Sprite</see> or series of sprites.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderRenderer.Begin">
            <summary>
            Function to begin the rendering with the shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderRenderer.Render(GorgonLibrary.Graphics.PrimitiveStyle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function to render with the shader.
            </summary>
            <param name="primitiveStyle">Type of primitive to render.</param>
            <param name="vertexStart">Starting vertex to render.</param>
            <param name="vertexCount">Number of vertices to render.</param>
            <param name="indexStart">Starting index to render.</param>
            <param name="indexCount">Number of indices to render.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.IShaderRenderer.End">
            <summary>
            Function to end rendering with the shader.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IShaderRenderer.HasProjectionMatrix">
            <summary>
            Property to return whether a projection matrix is available in the shader.
            </summary>
            <remarks>This shader constant should be represented in the shader as: <c>float4x4 _projectionMatrix</c>.  If this constant is found, this value will return TRUE.
            <para>If this is available the library will automatically assign a value to the constant for use in the shader.  This will contain a copy of the current projection <see cref="T:GorgonLibrary.Matrix">matrix</see> 
            used by the current <see cref="T:GorgonLibrary.Graphics.Viewport">viewport</see>.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.IShaderRenderer.HasSpriteImage">
            <summary>
            Property to return whether a sprite image is available in the shader.
            </summary>
            <remarks>This shader constant should be represented in the shader as: <c>Texture _spriteImage</c>.  If this constant is found, this value will return TRUE.
            <para>If this is available the library will automatically assign a value to the constant for use in the shader.  This will typically be the current image used by a <see cref="T:GorgonLibrary.Graphics.Sprite">sprite</see> 
            or a series of sprites (if using the same image).</para></remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.Shader.GetParameters">
            <summary>
            Function to retrieve the parameters for a shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Shader.OnRenderBegin">
            <summary>
            Function called before the rendering begins with this shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Shader.OnRender(GorgonLibrary.Graphics.PrimitiveStyle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function called when rendering with this shader.
            </summary>
            <param name="primitiveStyle">Type of primitive to render.</param>
            <param name="vertexStart">Starting vertex to render.</param>
            <param name="vertexCount">Number of vertices to render.</param>
            <param name="indexStart">Starting index to render.</param>
            <param name="indexCount">Number of indices to render.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Shader.OnRenderEnd">
            <summary>
            Function called after the rendering ends with this shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Shader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.Shader"/> class.
            </summary>
            <param name="name">Name for this object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the name parameter is NULL or a zero length string.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Shader.GorgonLibrary#Graphics#IShaderRenderer#GetDefinedConstants">
            <summary>
            Function to retrieve the pre-defined constant parameters from a shader.
            </summary>
            <remarks>
            A shader can contain pre-defined constant values that the library will update automatically.  This is done to cut down on some redundant code that the user will
            typically always have to perform when calling a shader.  For example, the user may have 3 shaders and each time a shader is used the current sprite image would have to
            be set by the user each time the image changed for each sprite.  Additionally, passing the transformations (i.e. rotation, scaling and translation) to the shader
            is also more work than it needs to be.
            <para>To use this "default" functionality your shader will have to implement one of these constants:
            <list type="table">
            			<listheader>
            				<term>Constant type and name</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>float4x4 _projectionMatrix</term>
            				<description>The current projection <see cref="T:GorgonLibrary.Matrix">matrix</see> defined by the current <see cref="T:GorgonLibrary.Graphics.Viewport">Viewport</see>.  Use this to transform vertices in a vertex shader into screen space.</description>
            			</item>
            			<item>
            				<term>Texture _spriteImage</term>
            				<description>This is the currently active <see cref="T:GorgonLibrary.Graphics.Image">image</see> (at index 0 in the texture stage) for a given <see cref="T:GorgonLibrary.Graphics.Sprite">Sprite</see> or series of sprites.</description>
            			</item>
            		</list>
            	</para>
            	<para>The constants are case sensitive and as such must be declared exactly as shown in the table above with the leading underscore character.  If the constant is not
            named properly it will not be used as a default.</para>
            	<para>To test whether the default constants are available, check the return value of <see cref="P:GorgonLibrary.Graphics.IShaderRenderer.HasProjectionMatrix">HasProjectionMatrix</see>
            or <see cref="P:GorgonLibrary.Graphics.IShaderRenderer.HasSpriteImage">HasSpriteImage</see> and if
            these properties return TRUE, then the constant has been implemented.</para>
            	<para>This function is meant to be called internally by the shader.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.Shader.GetDefinedParameter(GorgonLibrary.Graphics.PredefinedShaderConstants)">
            <summary>
            Function to return the parameter associated with the predefiend constant.
            </summary>
            <param name="constant">Predefined constant representing the parameter.</param>
            <returns>
            The parameter interface for the <paramref name="constant"/>.
            </returns>
            <remarks>The function will return the associated parameter object for a given pre-defined constant.  The constant should be defined in the shader as one of:
            <list type="table">
            		<listheader>
            			<term>Constant type and name</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>float4x4 _projectionMatrix</term>
            			<description>The current projection <see cref="T:GorgonLibrary.Matrix">matrix</see> defined by the current <see cref="T:GorgonLibrary.Graphics.Viewport">Viewport</see>.  Use this to transform vertices in a vertex shader into screen space.</description>
            		</item>
            		<item>
            			<term>Texture _spriteImage</term>
            			<description>This is the currently active <see cref="T:GorgonLibrary.Graphics.Image">image</see> (at index 0 in the texture stage) for a given <see cref="T:GorgonLibrary.Graphics.Sprite">Sprite</see> or series of sprites.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.Shader.GorgonLibrary#Graphics#IShaderRenderer#Begin">
            <summary>
            Function to begin the rendering with the shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Shader.GorgonLibrary#Graphics#IShaderRenderer#Render(GorgonLibrary.Graphics.PrimitiveStyle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function to render with the shader.
            </summary>
            <param name="primitiveStyle">Type of primitive to render.</param>
            <param name="vertexStart">Starting vertex to render.</param>
            <param name="vertexCount">Number of vertices to render.</param>
            <param name="indexStart">Starting index to render.</param>
            <param name="indexCount">Number of indices to render.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Shader.GorgonLibrary#Graphics#IShaderRenderer#End">
            <summary>
            Function to end rendering with the shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Shader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Shader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Shader.DeviceLost">
            <summary>
            Function called when the device is in a lost state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Shader.DeviceReset">
            <summary>
            Function called when the device is reset.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Shader.ForceRelease">
            <summary>
            Function to force the loss of the objects data.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Shader.Compiled">
            <summary>
            Property to set or return the compiled byte code for the shader.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Shader.IsBinary">
            <summary>
            Property to return whether this shader is a binary (no source code) shader.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Shader.IsCompiled">
            <summary>
            Property to return whether the shader has been compiled yet or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Shader.ShaderSource">
            <summary>
            Property to set or return the source code for this shader.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Shader.Parameters">
            <summary>
            Property to return the parameters for this shader.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Shader.HasProjectionMatrix">
            <summary>
            Property to return whether a projection matrix is available in the shader.
            </summary>
            <remarks>This shader constant should be represented in the shader as: <c>float4x4 _projectionMatrix</c>.  If this constant is found, this value will return TRUE.
            <para>If this is available the library will automatically assign a value to the constant for use in the shader.  This will contain a copy of the current projection <see cref="T:GorgonLibrary.Matrix">matrix</see> 
            used by the current <see cref="T:GorgonLibrary.Graphics.Viewport">viewport</see>.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Shader.HasSpriteImage">
            <summary>
            Property to return whether a sprite image is available in the shader.
            </summary>
            <remarks>This shader constant should be represented in the shader as: <c>Texture _spriteImage</c>.  If this constant is found, this value will return TRUE.
            <para>If this is available the library will automatically assign a value to the constant for use in the shader.  This will typically be the current image used by a <see cref="T:GorgonLibrary.Graphics.Sprite">sprite</see> 
            or a series of sprites (if using the same image).</para></remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.ShaderProfile(System.Version)">
            <summary>
            Function to retrieve the shader target profile.
            </summary>
            <param name="target">Version of the profile.</param>
            <returns>The shader target profile.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.ShaderFromStream(System.String,System.String,System.Version,GorgonLibrary.FileSystems.FileSystem,System.Resources.ResourceManager,System.IO.Stream,GorgonLibrary.Graphics.ShaderCompileOptions,System.Boolean,System.Int32)">
            <summary>
            Function to return an arbitrary object from a stream.
            </summary>
            <param name="name">Object name or path.</param>
            <param name="function">Entry point function name.</param>
            <param name="target">Target shader profile.</param>
            <param name="fileSystem">A file system that contains the object.</param>
            <param name="resources">A resource manager that is used to load the file(s).</param>
            <param name="stream">Stream that contains the object.</param>
            <param name="flags">Shader compilation flags.</param>
            <param name="isXML">TRUE if the stream contains XML data, FALSE if not.</param>
            <param name="bytes">Number of bytes to deserialize.</param>
            <returns>The object contained within the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.GetParameters">
            <summary>
            Function to retrieve the parameters for a shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.OnWriteData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function called when the shader is serialized.
            </summary>
            <param name="serializer">Serializer used to write the data.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.OnReadData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function called when the shader is deserialized.
            </summary>
            <param name="serializer">Deserializer used to read the data.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.CreateShader">
            <summary>
            Function called to create the actual shader object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.DestroyShader">
            <summary>
            Function called to destroy the shader object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.FromFile(System.String,System.String,System.Version,GorgonLibrary.Graphics.ShaderCompileOptions,System.Boolean)">
            <summary>
            Function to load a Shader from disk.
            </summary>
            <param name="filename">Filename of the Shader to load.</param>
            <param name="entryFunction">Name of the entry point function.</param>
            <param name="profile">Shader profile to use.</param>
            <param name="flags">Shader compilation flags.</param>
            <param name="binary">TRUE if the file is binary, FALSE if not.</param>
            <returns>The loaded shader.</returns>
            <remarks>
            <para>The target parameter can be vs_1_1, vs_2_0, vs_2_a, vs_2_b, vs_2_sw, vs_3_0 or vs_3_sw for <see cref="T:GorgonLibrary.Graphics.VertexShader">vertex shaders</see> or ps_2_0, ps_2_a, ps_2_b, ps_2_sw, ps_3_0, or ps_3_sw for <see cref="T:GorgonLibrary.Graphics.PixelShader">pixel shaders</see>.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.FromFileSystem(GorgonLibrary.FileSystems.FileSystem,System.String,System.String,System.Version,GorgonLibrary.Graphics.ShaderCompileOptions,System.Boolean)">
            <summary>
            Function to return the shader from a file system.
            </summary>
            <param name="fileSystem">File system to use.</param>
            <param name="filename">File name and path of the shader.</param>
            <param name="entryFunction">Name of the entry point function.</param>
            <param name="profile">Shader profile to use.</param>
            <param name="flags">Shader compilation flags.</param>
            <param name="binary">TRUE if the shader is a compiled binary, FALSE if not.</param>
            <returns>The shader within the file system.</returns>
            <remarks>
            <para>The target parameter can be vs_1_1, vs_2_0, vs_2_a, vs_2_b, vs_2_sw, vs_3_0 or vs_3_sw for <see cref="T:GorgonLibrary.Graphics.VertexShader">vertex shaders</see> or ps_2_0, ps_2_a, ps_2_b, ps_2_sw, ps_3_0, or ps_3_sw for <see cref="T:GorgonLibrary.Graphics.PixelShader">pixel shaders</see>.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.FromResource(System.String,System.Resources.ResourceManager,System.String,System.Version,GorgonLibrary.Graphics.ShaderCompileOptions,System.Boolean)">
            <summary>
            Function to load an shader from resources.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="resourceManager">Resource manager to use.</param>
            <param name="entryFunction">Name of the entry point function.</param>
            <param name="profile">Shader profile to use.</param>
            <param name="flags">Shader compilation flags.</param>
            <param name="binary">TRUE if the shader is a compiled binary, FALSE if not.</param>
            <returns>The loaded shader.</returns>
            <remarks>
            <para>The target parameter can be vs_1_1, vs_2_0, vs_2_a, vs_2_b, vs_2_sw, vs_3_0 or vs_3_sw for <see cref="T:GorgonLibrary.Graphics.VertexShader">vertex shaders</see> or ps_2_0, ps_2_a, ps_2_b, ps_2_sw, ps_3_0, or ps_3_sw for <see cref="T:GorgonLibrary.Graphics.PixelShader">pixel shaders</see>.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.FromResource(System.String,System.String,System.Version,GorgonLibrary.Graphics.ShaderCompileOptions,System.Boolean)">
            <summary>
            Function to load an shader from resources.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="entryFunction">Name of the entry point function.</param>
            <param name="profile">Shader profile to use.</param>
            <param name="flags">Flags for shader compilation.</param>
            <param name="binary">TRUE if the shader is a compiled binary, FALSE if not.</param>
            <returns>The loaded shader.</returns>
            <remarks>
            <para>The target parameter can be vs_1_1, vs_2_0, vs_2_a, vs_2_b, vs_2_sw, vs_3_0 or vs_3_sw for <see cref="T:GorgonLibrary.Graphics.VertexShader">vertex shaders</see> or ps_2_0, ps_2_a, ps_2_b, ps_2_sw, ps_3_0, or ps_3_sw for <see cref="T:GorgonLibrary.Graphics.PixelShader">pixel shaders</see>.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.FromStream(System.String,System.String,System.Version,System.IO.Stream,GorgonLibrary.Graphics.ShaderCompileOptions,System.Int32,System.Boolean)">
            <summary>
            Function to load an shader from a stream.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="stream">Stream to use for loading.</param>	
            <param name="entryFunction">Name of the entry point function.</param>
            <param name="profile">Shader profile to use.</param>
            <param name="flags">Shader compilation flags.</param>
            <param name="bytes">Size in bytes of the data.</param>
            <param name="binary">TRUE if the shader is a compiled binary, FALSE if not.</param>
            <returns>The loaded shader.</returns>
            <remarks>
            <para>The target parameter can be vs_1_1, vs_2_0, vs_2_a, vs_2_b, vs_2_sw, vs_3_0 or vs_3_sw for <see cref="T:GorgonLibrary.Graphics.VertexShader">vertex shaders</see> or ps_2_0, ps_2_a, ps_2_b, ps_2_sw, ps_3_0, or ps_3_sw for <see cref="T:GorgonLibrary.Graphics.PixelShader">pixel shaders</see>.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Function to save the shader to a stream.
            </summary>
            <param name="stream">Stream to send the shader into.</param>
            <param name="binary">TRUE to save as binary, FALSE to save as text.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.Save(System.String,System.Boolean)">
            <summary>
            Function to save the shader to a file.
            </summary>
            <param name="filename">Filename/path of the shader.</param>
            <param name="binary">TRUE to save as binary, FALSE to save as text.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.Save(GorgonLibrary.FileSystems.FileSystem,System.String,System.Boolean)">
            <summary>
            Function to save the shader to a file system file.
            </summary>
            <param name="fileSystem">Filesystem to save the shader into.</param>
            <param name="filename">Name of the file.</param>
            <param name="binary">TRUE to save as binary, FALSE to save as text.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.DeviceReset">
            <summary>
            Function called when the device is reset.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.DeviceLost">
            <summary>
            Function called when the device is in a lost state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.ForceRelease">
            <summary>
            Function to force the loss of the objects data.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.SetFunction(GorgonLibrary.Graphics.ShaderFunction)">
            <summary>
            Function to bind a function as the entry point to this shader.
            </summary>
            <param name="function">Function to bind.</param>
            <remarks>The function target must be one of vs_2_0, vs_2_a, vs_2_b, vs_3_0, ps_2_0, ps_2_a, ps_2_b, or ps_3_0.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.CompileShaderImplementation(System.String,System.Version,GorgonLibrary.Graphics.ShaderCompileOptions)">
            <summary>
            Function to compile the shader source code.
            </summary>
            <param name="functionName">Name of the function to compile.</param>
            <param name="target">Shader target version.</param>
            <param name="flags">Options to use for compilation.</param>
            <remarks>See <see cref="T:GorgonLibrary.Graphics.ShaderCompileOptions"/> for more information about the compile time options.
            <para>The target parameter can be vs_1_1, vs_2_0, vs_2_a, vs_2_b, vs_2_sw, vs_3_0 or vs_3_sw for <see cref="T:GorgonLibrary.Graphics.VertexShader">vertex shaders</see> or ps_2_0, ps_2_a, ps_2_b, ps_2_sw, ps_3_0, or ps_3_sw for <see cref="T:GorgonLibrary.Graphics.PixelShader">pixel shaders</see>.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.#ctor(System.String,GorgonLibrary.Graphics.ShaderFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.BaseShader`1"/> class.
            </summary>
            <param name="name">Name for this object.</param>
            <param name="function">Function to bind to the shader as an entry point.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the name parameter is NULL or a zero length string.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.GorgonLibrary#Serialization#ISerializable#WriteData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to persist the data into the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.BaseShader`1.GorgonLibrary#Serialization#ISerializable#ReadData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to retrieve data from the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.BaseShader`1.Samplers">
            <summary>
            Property to return the samplers bound to the shader.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.BaseShader`1.Function">
            <summary>
            Property to set or return the shader function.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.BaseShader`1.IsCompiled">
            <summary>
            Property to return whether the shader has been compiled yet or not.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.BaseShader`1.Filename">
            <summary>
            Property to return the filename of the serializable object.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.BaseShader`1.IsResource">
            <summary>
            Property to return whether this object is an embedded resource.
            </summary>
            <value></value>
        </member>
        <member name="T:GorgonLibrary.Graphics.RenderableChildren">
            <summary>
            Object representing a list of child objects for sprites.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderableChildren.ClearItems">
            <summary>
            Function to clear items from the list.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderableChildren.RemoveItem(System.Int32)">
            <summary>
            Function to remove an object from the list by index.
            </summary>
            <param name="index">Index to remove at.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderableChildren.RemoveItem(System.String)">
            <summary>
            Function to remove an object from the list by key.
            </summary>
            <param name="key">Key of the object to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderableChildren.Remove(GorgonLibrary.Graphics.Renderable)">
            <summary>
            Function to remove an object from the list by reference.
            </summary>
            <param name="child">Child object to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderableChildren.Add(GorgonLibrary.Graphics.Renderable,GorgonLibrary.Vector2D)">
            <summary>
            Function to add a child object.
            </summary>
            <param name="child">Child to add.</param>
            <param name="offset">Offset of the child from the parent.</param>        
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderableChildren.Add(GorgonLibrary.Graphics.Renderable)">
            <summary>
            Function to add a child object.
            </summary>
            <param name="child">Child to add.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderableChildren.#ctor(GorgonLibrary.Graphics.Renderable)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Owning object.</param>
        </member>
        <member name="T:GorgonLibrary.PlugIns.PlugInFactory">
            <summary>
            Object to repesent a list of plugins.
            </summary>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInFactory.SetComparisonKey(System.Byte[])">
            <summary>
            Function to set the key to use for comparison with the assembly public key.
            </summary>
            <param name="publicKey">An array of bytes containing the data for the public key to use in a comparison or NULL.</param>
            <remarks>This function allows us to compare the public key for a specific plug-in against what we have stored here.  With this we can filter plug-ins that are not signed by the owner of the public key.  This adds a small measure of security.
            <para>Passing NULL as the key will allow any signed assembly plug-in to load.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInFactory.Load(System.Reflection.Assembly,System.String,System.Object[],System.Boolean)">
            <summary>
            Function to load a plug-in.
            </summary>
            <param name="pluginModule">Module containing the plug-in.</param>
            <param name="pluginName">Name of the plug-in to create.</param>
            <param name="parameters">Constructor parameters.</param>
            <param name="mustBeSigned">TRUE to require that the plug-in be signed, FALSE to load any plug-in.</param>
            <returns>The plug-in interface.</returns>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInFactory.Load(System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>
            Function to load a plug-in.
            </summary>
            <param name="pluginModule">Module containing the plug-in.</param>
            <param name="pluginName">Name of the plug-in to create.</param>
            <param name="mustBeSigned">TRUE to indicate that the plug-in must be signed, FALSE to load any plug-in.</param>
            <returns>The plug-in interface.</returns>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInFactory.Load(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Function to load a plug-in.
            </summary>
            <param name="pluginModule">Module containing the plug-in.</param>
            <param name="mustBeSigned">TRUE to indicate that the plug-in must be signed, FALSE to load any plug-in.</param>
            <returns>The plug-in interface.</returns>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInFactory.Load(System.String,System.String,System.Object[],System.Boolean)">
            <summary>
            Function to load a plug-in.
            </summary>
            <param name="pluginDLL">Path to the DLL containing the plug-in.</param>
            <param name="pluginName">Name of the plug-in to create.</param>
            <param name="parameters">Parameters for construction.</param>
            <param name="mustBeSigned">TRUE to indicate that the plug-in must be signed, FALSE to load any plug-in.</param>
            <returns>The plug-in interface.</returns>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInFactory.Load(System.String,System.String,System.Boolean)">
            <summary>
            Function to load a plug-in.
            </summary>
            <param name="pluginDLL">Path to the DLL containing the plug-in.</param>
            <param name="pluginName">Name of the plug-in to create.</param>
            <param name="mustBeSigned">TRUE to indicate that the plug-in must be signed, FALSE to load any plug-in.</param>
            <returns>Object wrapped in the plug-in.</returns>        
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInFactory.Load(System.String,System.Boolean)">
            <summary>
            Function to load multiple plug-ins from a plug-in DLL.
            </summary>
            <param name="pluginDLL">Path to the DLL containing the plug-ins.</param>        
            <param name="mustBeSigned">TRUE to indicate that the plug-in must be signed, FALSE to load any plug-in.</param>
            <returns>The loaded plug-in.</returns>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInFactory.Unload(System.String)">
            <summary>
            Function to destroy a plug-in.
            </summary>
            <param name="plugInName">Name of the plug-in to unload.</param>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInFactory.DestroyAll">
            <summary>
            Function to remove all plug-ins.
            </summary>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInFactory.#cctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.PlugIns.PlugInFactory.PlugIns">
            <summary>
            Property to return the list of previously loaded plug-ins.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Vector2D">
            <summary>
            Value type to represent a 2 dimensional vector.
            </summary>
            <remarks>
            Vector mathematics are commonly used in graphical 3D applications.  And other
            spatial related computations.
            This type provides us a convenient way to use vectors and their operations.
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Vector2D.X">
            <summary>
            Horizontal position of the vector.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Vector2D.Y">
            <summary>
            Vertical position of the vector.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Vector2D.Angle">
            <summary>
            Function to return the angle between two vectors in radians.
            </summary>
            <returns>The angle between the vector components in radians.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.Angle(GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Function to return the angle between two vectors in radians.
            </summary>
            <param name="vector1">First vector.</param>
            <param name="vector2">Second vector.</param>
            <returns>The angle between the vectors in radians.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.Negate(GorgonLibrary.Vector2D)">
            <summary>
            Function to return a negated vector.
            </summary>
            <param name="left">Vector to negate.</param>
            <returns>A negated vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.Add(GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Function to add two vectors together.
            </summary>
            <param name="left">Left vector to add.</param>
            <param name="right">Right vector to add.</param>
            <returns>The total of the two vectors.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.Subtract(GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Function to subtract two vectors from each other.
            </summary>
            <param name="left">Left vector to subtract.</param>
            <param name="right">Right vector to subtract.</param>
            <returns>The difference between the two vectors.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.Divide(GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Function to divide a vector by another vector.
            </summary>
            <param name="dividend">The vector to be divided.</param>
            <param name="divisor">The vector that will divide the dividend.</param>
            <returns>The quotient vector.</returns>
            <exception cref="T:System.DivideByZeroException">One of the components of the divisor was 0.</exception>
        </member>
        <member name="M:GorgonLibrary.Vector2D.Divide(GorgonLibrary.Vector2D,System.Single)">
            <summary>
            Function to divide a vector by a floating point value.
            </summary>
            <param name="dividend">The vector to be divided.</param>
            <param name="divisor">The vector that will divide the dividend.</param>
            <returns>The quotient vector.</returns>
            <exception cref="T:System.DivideByZeroException">One of the divisor was 0.</exception>
        </member>
        <member name="M:GorgonLibrary.Vector2D.Multiply(GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Function to multiply two vectors together.
            </summary>
            <param name="left">Left vector to multiply.</param>
            <param name="right">Right vector to multiply.</param>
            <returns>The product of the two vectors.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.Multiply(GorgonLibrary.Vector2D,System.Single)">
            <summary>
            Function to multiply a vector by a floating point value.
            </summary>
            <param name="left">Left vector to multiply.</param>
            <param name="right">Value to multiply by.</param>
            <returns>The product of the two vectors.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.DotProduct(GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Function to perform a dot product between this and another vector.
            </summary>
            <param name="left">Left vector to use in the dot product operation.</param>
            <param name="right">Right vector to use in the dot product operation.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.Normalize(GorgonLibrary.Vector2D)">
            <summary>
            Function to normalize the vector.
            </summary>
            <param name="vector">Vector to normalize.</param>
            <returns>A normalized vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.Normalize">
            <summary>
            Function to normalize this vector.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Vector2D.CrossProduct(GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Function to perform a cross product between this and another vector.
            </summary>
            <param name="vector1">Vector to perform the cross product with.</param>
            <param name="vector2">Vector to perform the cross product with.</param>
            <returns>A new vector containing the cross product.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.Equals(System.Object)">
            <summary>
            Function to compare this vector to another object.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.GetHashCode">
            <summary>
            Function to return the hash code for this object.
            </summary>
            <returns>The hash code for this object.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.ToString">
            <summary>
            Function to return the textual representation of this object.
            </summary>
            <returns>A string containing the type and values of the object.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_Equality(GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Operator to perform equality tests.
            </summary>
            <param name="left">Vector to compare.</param>
            <param name="right">Vector to compare with.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_Inequality(GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Operator to perform inequality tests.
            </summary>
            <param name="left">Vector to compare.</param>
            <param name="right">Vector to compare with.</param>
            <returns>TRUE if not equal, FALSE if they are.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_LessThan(GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Operator to perform a test to see if the left is less than the right.
            </summary>
            <param name="left">Left vector to compare.</param>
            <param name="right">Right vector to compare.</param>
            <returns>TRUE if left is less than right, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_GreaterThan(GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Operator to perform a test to see if the left is greater than the right.
            </summary>
            <param name="left">Left vector to compare.</param>
            <param name="right">Right vector to compare.</param>
            <returns>TRUE if left is greater than right, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_LessThanOrEqual(GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Operator to perform a test to see if the left is less or equal to the right.
            </summary>
            <param name="left">Left vector to compare.</param>
            <param name="right">Right vector to compare.</param>
            <returns>TRUE if left is less than right, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_GreaterThanOrEqual(GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Operator to perform a test to see if the left is greater or equal to the right.
            </summary>
            <param name="left">Left vector to compare.</param>
            <param name="right">Right vector to compare.</param>
            <returns>TRUE if left is greater than right, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_Addition(GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Operator to perform addition upon two vectors.
            </summary>
            <param name="left">Vector to add to.</param>
            <param name="right">Vector to add with.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_Subtraction(GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Operator to perform subtraction upon two vectors.
            </summary>
            <param name="left">Vector to subtract.</param>
            <param name="right">Vector to subtract with.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_UnaryNegation(GorgonLibrary.Vector2D)">
            <summary>
            Operator to negate a vector.
            </summary>
            <param name="left">Vector to negate.</param>
            <returns>A negated vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_Multiply(GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Operator to multiply two vectors together.
            </summary>
            <param name="left">Vector to multiply.</param>
            <param name="right">Vector to multiply by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_Multiply(GorgonLibrary.Vector2D,System.Single)">
            <summary>
            Operator to multiply a vector by a scalar value.
            </summary>
            <param name="left">Vector to multiply with.</param>
            <param name="scalar">Scalar value to multiply by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_Multiply(System.Single,GorgonLibrary.Vector2D)">
            <summary>
            Operator to multiply a vector by a scalar value.
            </summary>
            <param name="scalar">Scalar value to multiply by.</param>
            <param name="right">Vector to multiply with.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_Division(GorgonLibrary.Vector2D,System.Single)">
            <summary>
            Operator to divide a vector by a scalar value.
            </summary>
            <param name="left">Vector to divide.</param>
            <param name="scalar">Scalar value to divide by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_Division(GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Operator to divide a vector by another vector.
            </summary>
            <param name="left">Vector to divide.</param>
            <param name="right">Vector to divide by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_Implicit(GorgonLibrary.Vector3D)~GorgonLibrary.Vector2D">
            <summary>
            Operator to convert a 3D vector into a 2D vector.
            </summary>
            <param name="vector">3D gorgon vector.</param>
            <returns>A new 2D vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_Implicit(System.Drawing.Point)~GorgonLibrary.Vector2D">
            <summary>
            Operator to convert a System.Drawing.Point to a 2D vector.
            </summary>
            <param name="point">System.Drawing.Point to convert.</param>
            <returns>A new 2D vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_Implicit(System.Drawing.PointF)~GorgonLibrary.Vector2D">
            <summary>
            Operator to convert a System.Drawing.PointF to a 2D vector.
            </summary>
            <param name="point">System.Drawing.PointF to convert.</param>
            <returns>A new 2D vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_Implicit(System.Drawing.Size)~GorgonLibrary.Vector2D">
            <summary>
            Operator to convert a System.Drawing.Size to a 2D vector.
            </summary>
            <param name="point">System.Drawing.Size to convert.</param>
            <returns>A new 2D vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_Implicit(System.Drawing.SizeF)~GorgonLibrary.Vector2D">
            <summary>
            Operator to convert a System.Drawing.SizeF to a 2D vector.
            </summary>
            <param name="point">System.Drawing.SizeF to convert.</param>
            <returns>A new 2D vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_Explicit(GorgonLibrary.Vector2D)~System.Drawing.Point">
            <summary>
            Operator to convert a 2D vector to a System.Drawing.Point.
            </summary>
            <param name="vector">2D gorgon vector.</param>
            <returns>A new point with the values from the vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_Implicit(GorgonLibrary.Vector2D)~System.Drawing.PointF">
            <summary>
            Operator to convert a 2D vector to a System.Drawing.PointF.
            </summary>
            <param name="vector">2D gorgon vector.</param>
            <returns>A new point with the values from the vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_Explicit(GorgonLibrary.Vector2D)~System.Drawing.Size">
            <summary>
            Operator to convert a 2D vector to a System.Drawing.Size.
            </summary>
            <param name="vector">2D gorgon vector.</param>
            <returns>A new point with the values from the vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.op_Implicit(GorgonLibrary.Vector2D)~System.Drawing.SizeF">
            <summary>
            Operator to convert a 2D vector to a System.Drawing.SizeF.
            </summary>
            <param name="vector">2D gorgon vector.</param>
            <returns>A new point with the values from the vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector2D.#ctor(System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="x">Horizontal position of the vector.</param>
            <param name="y">Vertical posiition of the vector.</param>
        </member>
        <member name="M:GorgonLibrary.Vector2D.#ctor(System.Drawing.PointF)">
            <summary>
            Constructor.
            </summary>
            <param name="point">System.Drawing.PointF to initialize with.</param>
        </member>
        <member name="M:GorgonLibrary.Vector2D.#ctor(System.Drawing.Point)">
            <summary>
            Constructor.
            </summary>
            <param name="point">System.Drawing.Point to initialize with.</param>
        </member>
        <member name="M:GorgonLibrary.Vector2D.#ctor(System.Drawing.Size)">
            <summary>
            Constructor.
            </summary>
            <param name="size">System.Drawing.Size to initialize with.</param>
        </member>
        <member name="M:GorgonLibrary.Vector2D.#ctor(System.Drawing.SizeF)">
            <summary>
            Constructor.
            </summary>
            <param name="size">System.Drawing.SizeF to initialize with.</param>
        </member>
        <member name="P:GorgonLibrary.Vector2D.Length">
            <summary>
            Property to return the length of this vector.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector2D.LengthSquare">
            <summary>
            Property to return the length of this vector squared.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector2D.InverseLength">
            <summary>
            Property to return the inverse length of this vector.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector2D.Zero">
            <summary>
            Property to return a zeroed vector.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector2D.Unit">
            <summary>
            Property to return a unit vector (1,1,1).
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector2D.UnitX">
            <summary>
            Property to return a unit vector for the X axis (1,0,0).
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector2D.UnitY">
            <summary>
            Property to return a unit vector for the Y axis (0,1,0).
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.FontCache">
            <summary>
            Class to represent a cache for fonts.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.FontCache.AddGDIFontFromMemory(System.String,System.IntPtr,System.Int32)">
            <summary>
            Function to add a GDI font to the internal private collection.
            </summary>
            <param name="familyName">Family name to load.</param>
            <param name="fontPtr">Pointer to the font data.</param>
            <param name="sizeInBytes">Size of the font in bytes.</param>
            <returns>The font family contained within the pointer.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.FontCache.DestroyAll">
            <summary>
            Function to destroy all the loaded fonts.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.FontCache.#cctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.FontCache.Fonts">
            <summary>
            Property to return the loaded fonts.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.Glyph">
            <summary>
            Object representing a glyph for a font.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.Glyph.GetGlyphSize">
            <summary>
            Function to retrieve the glyph size.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.Glyph.#ctor(System.Char,System.Drawing.Font,GorgonLibrary.Graphics.Image,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Internal.Glyph"/> class.
            </summary>
            <param name="character">The character that this glyph will represent.</param>
            <param name="gdiFont">Font to be used.</param>
            <param name="glyphImage">Image used to store the glyph.</param>
            <param name="glyphDimensions">Glyph dimensions.</param>
            <param name="imageDimensions">The dimensions of the glyph on the image.</param>
        </member>
        <member name="P:GorgonLibrary.Internal.Glyph.GlyphImage">
            <summary>
            Property to return the image that owns the glyph.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.Glyph.ImageDimensions">
            <summary>
            Property to return the dimensions of the glyph on the image.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.Glyph.GlyphDimensions">
            <summary>
            Property to return the glyph dimensions.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.Glyph.Size">
            <summary>
            Property to return actual glyph size.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.Glyph.GlyphCharacter">
            <summary>
            Property to return the character represented by this glyph.
            </summary>
        </member>
        <member name="T:GorgonLibrary.FileSystems.IAuthData">
            <summary>
            Interface to define an authentication type.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.IAuthData.Data">
            <summary>
            Property to set or return the authentication data.
            </summary>
        </member>
        <member name="T:GorgonLibrary.FileSystems.FileSystemInfoAttribute">
            <summary>
            Attribute for defining file system information.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemInfoAttribute.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="description">Description of the filesystem type.</param>
            <param name="iscompressed">TRUE if the file system compresses its data, FALSE if not.</param>
            <param name="ispackfile">TRUE if the file system is a pack file, FALSE if folder based.</param>
            <param name="isencrypted">TRUE if the file system is encrypted, FALSE if not.</param>
            <param name="fileSystemID">ID of the file system.</param>
            <param name="fileExtensions">File extensions associated with this provider.</param>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemInfoAttribute.ID">
            <summary>
            Property to return the ID of the file system type.
            </summary>
            <remarks>The ID of the file system is used to determine which file system provider should be used.  This ID is hardcoded to each provider plug-in, and is written to the file system header.</remarks>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemInfoAttribute.Description">
            <summary>
            Property to return the name of the file system description.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemInfoAttribute.IsCompressed">
            <summary>
            Property to return whether the file system is compressed or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemInfoAttribute.IsPackFile">
            <summary>
            Property to return whether the file system is a pack file or a folder based file system.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemInfoAttribute.IsEncrypted">
            <summary>
            Property to return whether the file system is encrypted or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemInfoAttribute.FileExtensions">
            <summary>
            Property to return the file extensions associated with this provider.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.IndexBuffer">
            <summary>
            Object to hold index data.
            </summary>
            <remarks>
            An index buffer is used to store the ordering of indices.
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Internal.IndexBuffer.CreateIndexBuffer">
            <summary>
            Function to create the index buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.IndexBuffer.GetDataStream(SlimDX.Direct3D9.LockFlags)">
            <summary>
            Function to retrieve the datastream for a locked object.
            </summary>
            <param name="lockFlags">Flags used in locking.</param>
            <returns>A data stream for a locked buffer.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.IndexBuffer.Release">
            <summary>
            Function to unlock and destroy the index buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.IndexBuffer.Unlock">
            <summary>
            Function to unlock a locked buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.IndexBuffer.Refresh">
            <summary>
            Function to (re)create the index buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.IndexBuffer.Lock(System.Int32,System.Int32,GorgonLibrary.Internal.BufferLockFlags)">
            <summary>
            Function to lock the buffer for writing.
            </summary>
            <param name="indexoffset">Index to start at.</param>
            <param name="indexcount">Number of indices to count.</param>
            <param name="flags">Flags for locking.</param>
            <remarks>This function will lock by index, and account for index size.</remarks>
        </member>
        <member name="M:GorgonLibrary.Internal.IndexBuffer.Lock(System.Int32,GorgonLibrary.Internal.BufferLockFlags)">
            <summary>
            Function to lock the buffer for writing.
            </summary>
            <param name="indexcount">Number of indices to count.</param>
            <param name="flags">Flags for locking.</param>
            <remarks>This function will lock by index, and account for index size.</remarks>
        </member>
        <member name="M:GorgonLibrary.Internal.IndexBuffer.Lock(GorgonLibrary.Internal.BufferLockFlags)">
            <summary>
            Function to lock the buffer for writing.
            </summary>
            <param name="flags">Flags for locking.</param>
            <remarks>
            This function will lock by index, and account for index size.  This function will
            also lock the entire buffer.</remarks>
        </member>
        <member name="M:GorgonLibrary.Internal.IndexBuffer.#ctor(GorgonLibrary.Internal.IndexBufferType,System.Int32,GorgonLibrary.Internal.BufferUsages)">
            <summary>
            Constructor.
            </summary>
            <param name="indextype">Type of index buffer to use.</param>
            <param name="numindices">Total number of indices for this buffer.</param>		
            <param name="bufferusage">Usage flags for the buffer.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.IndexBuffer.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to dispose all resources, FALSE to only release unmanaged.</param>
        </member>
        <member name="P:GorgonLibrary.Internal.IndexBuffer.D3DIndexBuffer">
            <summary>
            Property to return the Direct 3D index buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.IndexBuffer.IndexCount">
            <summary>
            Property to set or get the number of indices for this buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.IndexBuffer.IndexType">
            <summary>
            Property to set or get the size of each index in the buffer in bytes.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.IndexBuffer.LockOffset">
            <summary>
            Property to return the lock offset in indices.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.IndexBuffer.LockLength">
            <summary>
            Property to return the length of locked data in indices.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.TrackImage">
            <summary>
            Animation track used to animate byte properties.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.TrackImage.CreateKey">
            <summary>
            Function to create a keyframe.
            </summary>
            <returns>The new keyframe in the correct context.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.TrackImage.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.TrackImage"/> class.
            </summary>
            <param name="property">Property that is bound to the track.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.TrackImage.InterpolationMode">
            <summary>
            Property to set or return the interpolation mode for the track.
            </summary>
            <remarks>Image tracks don't use interpolation, and thus only use InterpolationMode.None.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.TrackImage.Item(System.Single)">
            <summary>
            Property to return the key for a given frame time index.
            </summary>
            <returns>A key containing interpolated keyframe data.</returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.TrackColor">
            <summary>
            Animation track used to animate color properties.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.TrackColor.CreateKey">
            <summary>
            Function to create a keyframe.
            </summary>
            <returns>The new keyframe in the correct context.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.TrackColor.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.TrackColor"/> class.
            </summary>
            <param name="property">Property that is bound to the track.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.TrackColor.Item(System.Single)">
            <summary>
            Property to return the key for a given frame time index.
            </summary>
            <returns>A key containing interpolated keyframe data.</returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.KeyImage">
            <summary>
            A key frame dealing with images on renderable objects.
            </summary>
            <remarks>This class can only be used on a <see cref="T:GorgonLibrary.Graphics.Renderable"/> object.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyImage.UpdateKeyData(GorgonLibrary.Graphics.Track.NearestKeys)">
            <summary>
            Function to update the data within the key frame.
            </summary>
            <param name="keyData">Interpolated key data used to help calculate data between keys.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyImage.Update">
            <summary>
            Function to perform an update of the bound property.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyImage.ReadData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to retrieve data from the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyImage.WriteData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to persist the data into the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyImage.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyImage.#ctor(System.Single,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.KeyImage"/> class.
            </summary>
            <param name="time">The time (in milliseconds) at which this keyframe exists within the track.</param>
            <param name="deferred">The name of the deferred image.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyImage.#ctor(System.Single,GorgonLibrary.Graphics.Image,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            
            </summary>
            <param name="time">The time (in milliseconds) at which this keyframe exists within the track.</param>
            <param name="image">Image to bind to the key.</param>
            <param name="offset">The starting offset into the image to use when drawing.</param>
            <param name="size">The width and height of the area to use when drawing.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyImage.#ctor(System.Single,GorgonLibrary.Graphics.Image,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.KeyImage"/> class.
            </summary>
            <param name="time">The time (in milliseconds) at which this keyframe exists within the track.</param>
            <param name="image">Image to bind to the key.</param>
            <param name="x">The horizontal offset into the image to start at when drawing.</param>
            <param name="y">The vertical offset into the image to start at when drawing.</param>
            <param name="width">The width of the area to use when drawing.</param>
            <param name="height">The height of the area to use when drawing.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyImage.#ctor(System.Single,GorgonLibrary.Graphics.Image,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.KeyImage"/> class.
            </summary>
            <param name="time">The time (in milliseconds) at which this keyframe exists within the track.</param>
            <param name="image">Image to bind to the key.</param>
            <param name="imageRegion">The region of the image to use when drawing.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyImage.#ctor(System.Single,GorgonLibrary.Graphics.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.KeyImage"/> class.
            </summary>
            <param name="time">The time (in milliseconds) at which this keyframe exists within the track.</param>
            <param name="image">Image to bind to the key.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyImage.DataType">
            <summary>
            Property to return the type of data stored in the key.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyImage.Owner">
            <summary>
            Property to set or return the track that owns this key.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyImage.Image">
            <summary>
            Property to set or return the image for the key.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyImage.ImageOffset">
            <summary>
            Property to set or return the image offset for the key.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyImage.ImageSize">
            <summary>
            Property to set or return the image size for the key.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.KeyColor">
            <summary>
            A key frame for manipulating data of the type <see cref="T:System.Drawing.Color"/>
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyColor.UpdateKeyData(GorgonLibrary.Graphics.Track.NearestKeys)">
            <summary>
            Function to update the data within the key frame.
            </summary>
            <param name="keyData">Interpolated key data used to help calculate data between keys.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyColor.ReadData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to retrieve data from the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyColor.WriteData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to persist the data into the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyColor.Update">
            <summary>
            Function to perform an update of the bound property.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyColor.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyColor.#ctor(System.Single,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.KeyColor"/> class.
            </summary>
            <param name="time">The time (in milliseconds) at which this keyframe exists within the track.</param>
            <param name="value">Color value for the key.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyColor.DataType">
            <summary>
            Property to return the type of data stored in the key.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyColor.Value">
            <summary>
            Property to set or return the value of the key.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.VertexType">
            <summary>
            Vertex declaration system.
            From here we can set up our custom vertices.
            </summary>
            <remarks>
            Not all models are created equal.  Some will contain position data, and color information, some
            will contain texture coordinates, normals, etc...  This will allow us to manage different types
            of vertices so that we can efficiently use mesh data.
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.CreateField(System.Int16,System.Int16,GorgonLibrary.Graphics.VertexFieldContext,GorgonLibrary.Graphics.VertexFieldType)">
            <summary>
            Function to add a field to this vertex.
            </summary>
            <param name="stream">Stream to bind this field with.</param>
            <param name="fieldOffset">Offset of this field within the vertex type..</param>
            <param name="context">Context of this field.</param>
            <param name="fieldType">Data type of the field.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.CreateField(System.Int16,System.Int16,GorgonLibrary.Graphics.VertexFieldContext,GorgonLibrary.Graphics.VertexFieldType,System.Byte)">
            <summary>
            Function to add a field to this vertex.
            </summary>
            <param name="stream">Stream to bind this field with.</param>
            <param name="fieldOffset">Offset of this field within the vertex type..</param>
            <param name="context">Context of this field.</param>
            <param name="fieldType">Data type of the field.</param>
            <param name="index">Index of the field, only required for certain types.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.Remove(System.Int32)">
            <summary>
            Function to remove a field from the vertex.
            </summary>
            <param name="index">Index of the field to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.Remove(System.Int16,GorgonLibrary.Graphics.VertexFieldContext)">
            <summary>
            Function to remove a field from the vertex.
            </summary>
            <param name="stream">Stream to which the field is bound.</param>
            <param name="context">Context of the field we wish to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.UpdateField(System.Int16,System.Int32,System.Int16,GorgonLibrary.Graphics.VertexFieldContext,GorgonLibrary.Graphics.VertexFieldType,System.Byte)">
            <summary>
            Function to update a vertex _fields[i].
            </summary>
            <param name="stream">Stream to which the field is bound.</param>
            <param name="fieldIndex">Index of the field to update</param>
            <param name="fieldOffset">Offset within the buffer.</param>
            <param name="context">Context of this field.</param>
            <param name="fieldType">Data type of the field.</param>
            <param name="index">Index of the field, only required for certain types.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.UpdateField(System.Int16,System.Int32,System.Int16,GorgonLibrary.Graphics.VertexFieldContext,GorgonLibrary.Graphics.VertexFieldType)">
            <summary>
            Function to update a vertex _fields[i].
            </summary>
            <param name="stream">Stream to which the field is bound.</param>
            <param name="fieldIndex">Index of the field to update</param>
            <param name="fieldOffset">Offset within the buffer.</param>
            <param name="context">Context of this field.</param>
            <param name="fieldType">Data type of the field.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.InsertField(System.Int16,System.Int32,System.Int16,GorgonLibrary.Graphics.VertexFieldContext,GorgonLibrary.Graphics.VertexFieldType)">
            <summary>
            Function to insert a vertex field at a specified index.
            </summary>
            <param name="stream">Stream to which the field will be bound.</param>
            <param name="fieldIndex">Index after which to insert.</param>
            <param name="fieldOffset">Offset of the field in the buffer.</param>
            <param name="context">Context of this field.</param>
            <param name="fieldType">Data type of this field.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.InsertField(System.Int16,System.Int32,System.Int16,GorgonLibrary.Graphics.VertexFieldContext,GorgonLibrary.Graphics.VertexFieldType,System.Byte)">
            <summary>
            Function to insert a vertex field at a specified index.
            </summary>
            <param name="stream">Stream to which the field will be bound.</param>
            <param name="fieldIndex">Index after which to insert.</param>
            <param name="fieldOffset">Offset of the field in the buffer.</param>
            <param name="context">Context of this field.</param>
            <param name="fieldType">Data type of this field.</param>
            <param name="index">Index of the vertex field, required for certain fields.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.HasFieldContext(System.Int16,GorgonLibrary.Graphics.VertexFieldContext)">
            <summary>
            Function to retrieve whether this vertex definition contains a field of a particular context type.
            </summary>
            <param name="stream">Stream to check.</param>
            <param name="context">Context to check for.</param>
            <returns>TRUE if context exists, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.HasFieldContext(GorgonLibrary.Graphics.VertexFieldContext)">
            <summary>
            Function to retrieve whether this vertex definition contains a field of a particular context type.
            </summary>
            <param name="context">Context to check for.</param>
            <returns>TRUE if context exists, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.HasFieldType(System.Int16,GorgonLibrary.Graphics.VertexFieldType)">
            <summary>
            Function to retrieve whether this vertex definition has a particular field type.
            </summary>
            <param name="stream">Stream to check.</param>
            <param name="fieldType">Type of data to check for.</param>
            <returns>TRUE if the type is present, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.VertexSize(System.Int16)">
            <summary>
            Function to return the size of the vertex in bytes, _fieldsd on stream.
            </summary>
            <param name="stream">Stream index to check.</param>
            <returns>Size of the vertex in bytes.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.Invalidate">
            <summary>
            Function to invalidate the declaration.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.Clone">
            <summary>
            Function to clone this vertex type.
            </summary>
            <returns>A copy of this vertex type.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.Contains(GorgonLibrary.Graphics.VertexField)">
            <summary>
            Property to return whether a field exists within this type or not.
            </summary>
            <param name="field">Field value.</param>
            <returns>TRUE if it exists, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to dispose all resources, FALSE to only release unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexType.Dispose">
            <summary>
            Function to perform clean up.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.VertexType.D3DVertexDeclaration">
            <summary>
            Property to create and return the Direct 3D vertex declaration.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.VertexType.NeedsUpdate">
            <summary>
            Property to return whether this type has changed or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.VertexType.Count">
            <summary>
            Property to return the number of fields in the list.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.VertexType.Item(System.Int32)">
            <summary>
            Property to return a vertex field by its index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.VertexType.Item(GorgonLibrary.Graphics.VertexFieldContext)">
            <summary>
            Property to return a vertex field by its context.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.VertexType.Item(System.Int32,System.Int32)">
            <summary>
            Property to return a vertex field by its index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.VertexType.Item(GorgonLibrary.Graphics.VertexFieldContext,System.Int32)">
            <summary>
            Property to return a vertex field by its context.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.IndexCache`1">
            <summary>
            Index cache system.
            </summary>
            <remarks>
            This object will store our indices so that we may read them and modify them
            at any time.  
            </remarks>
        </member>
        <member name="T:GorgonLibrary.Internal.IDataCache`1">
            <summary>
            Interface defining a cache of data.
            </summary>
            <remarks>
            This is a common interface for objects that implement data caching, such as vertex cache or index cache.  The implementor object will use this to keep a copy of object data in memory for update before sending to a destination buffer (e.g. a <seealso cref="T:GorgonLibrary.Internal.VertexBuffer">VertexBuffer</seealso>).
            <para>
            While it is possible to read data back from a <see cref="T:GorgonLibrary.Internal.VertexBuffer">vertex</see>/<see cref="T:GorgonLibrary.Internal.IndexBuffer">index buffer</see>, it is complex and not a recommended procedure for performance reasons.
            </para>
            	<para>
            Objects that implement this interface should have a buffer of data that will receive the contents of the cache.  This keeps the cache atomic ensuring that we either get the data to its destination or not at all.
            </para>
            	<para>
            The usefulness of this type of object is apparent when one needs to update a batch of vertices (e.g. software skinning) and send those to a write-only buffer.  This will avoid the overhead of having to open the <see cref="T:GorgonLibrary.Internal.VertexBuffer">vertex buffer</see> for reading (if it's even allowed to do so), read the data and modify it, then write the data back to the buffer.
            </para>
            	<para>
            Note that there is a performance penalty in that your data size will be larger since it has to hold a seperate copy of the data.
            </para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Internal.IDataCache`1.Update(System.Boolean)">
            <summary>
            Function to update the necessary buffers with the current information held in the cache.
            </summary>
            <remarks>This function is used to send the data to the destination buffer(s).</remarks>
            <param name="isRestoring">TRUE if this is being called due to a device restoration, FALSE if not.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.IDataCache`1.Release">
            <summary>
            Function to release the underlying data buffers.
            </summary>
            <remarks>
            Use this function to clear out any of the destination data buffers.
            <para>
            Use this with care as it will invalidate any data buffers that are being referenced elsewhere.
            </para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Internal.IDataCache`1.WriteData(System.Int32,System.Int32,System.Int32,`0[])">
            <summary>
            Function to write data to the cache.
            </summary>
            <param name="sourceStart">Start of the data in the source array of data.</param>
            <param name="destinationStart">Start in the destination buffer to write at.</param>
            <param name="length">Length of data to write.</param>
            <param name="data">Data to write.</param>
        </member>
        <member name="P:GorgonLibrary.Internal.IDataCache`1.Count">
            <summary>
            Property to set or return the number of items within the cache.
            </summary>
            <remarks>
            Use this to set the size of the data cache (size is the number of elements, e.g. vertices, and NOT bytes).
            <para>For a vertex cache, which will have multiple streams, this will represent the number of vertices, and not the exact size of the stream.</para>
            </remarks>
            <value>An integer containing a total count of the items within the cache.</value>
        </member>
        <member name="P:GorgonLibrary.Internal.IDataCache`1.NeedsUpdate">
            <summary>
            Read only property to determine if the underlying buffers need to be updated.
            </summary>
            <value>Returns TRUE if an update is necessary, FALSE if not.</value>
        </member>
        <member name="P:GorgonLibrary.Internal.IDataCache`1.BufferUsage">
            <summary>
            Property to set or return the usage of the buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.IDataCache`1.CachedData">
            <summary>
            Property to return the array of cached data.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.IDataCache`1.DataWritten">
            <summary>
            Property to return the amount of data written to the buffer already.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.IDataCache`1.DataOffset">
            <summary>
            Property to return the start of the data in the buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.IndexCache`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.IndexCache`1.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to release all resources, FALSE to remove only unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.IndexCache`1.Dispose">
            <summary>
            Function to perform clean up.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.IndexCache`1.DeviceLost">
            <summary>
            Function that's called when the device enters a lost state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.IndexCache`1.ForceRelease">
            <summary>
            Function to force the loss of the data for the index cache.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.IndexCache`1.DeviceReset">
            <summary>
            Function to that's called when the device enters a reset state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.IndexCache`1.WriteData(System.Int32,System.Int32,System.Int32,`0[])">
            <summary>
            Function to write data to the cache.
            </summary>
            <param name="sourceStart">Start of the data in the source array of data.</param>
            <param name="destinationStart">Start in the destination buffer to write at.</param>
            <param name="length">Length of data to write.</param>
            <param name="data">Data to write.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.IndexCache`1.Update(System.Boolean)">
            <summary>
            Function to update the index buffer with the current information held in the cache.
            </summary>
            <param name="isRestoring">TRUE if this is being called due to a device restoration, FALSE if not.</param>
            <remarks>This function is used to send the data to the index buffer.</remarks>
        </member>
        <member name="M:GorgonLibrary.Internal.IndexCache`1.Release">
            <summary>
            Function to release the underlying index buffer.
            </summary>
            <remarks>
            Use this function to clear out the index buffer.
            <para>
            Use this with care as it will invalidate any index buffers that are being referenced elsewhere.
            </para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Internal.IndexCache`1.IndexBufferType">
            <summary>
            Property to set or return the index buffer type to use.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.IndexCache`1.IndexBuffer">
            <summary>
            Property to return the index buffer for this cache.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.IndexCache`1.BufferUsage">
            <summary>
            Property to set or return the usage of the index buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.IndexCache`1.CachedData">
            <summary>
            Property to return an array of index data.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.IndexCache`1.Count">
            <summary>
            Property to set or return the number of indices within the cache.
            </summary>
            <value>
            An integer containing a total count of the indices within the cache.
            </value>
            <remarks>
            Use this to set the size of the index cache (size is the number of indices, and NOT bytes).
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Internal.IndexCache`1.NeedsUpdate">
            <summary>
            Read only property to determine if the underlying index buffer needs to be updated.
            </summary>
            <value>Returns TRUE if an update is necessary, FALSE if not.</value>
        </member>
        <member name="P:GorgonLibrary.Internal.IndexCache`1.DataWritten">
            <summary>
            Property to return the amount of data written to the buffer already.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.IndexCache`1.DataOffset">
            <summary>
            Property to return the start of the data in the buffer.
            </summary>
        </member>
        <member name="T:GorgonLibrary.PlugIns.PlugInAttribute">
            <summary>
            Attribute used to determine which assembly is considered a plug-in.
            </summary>
        </member>
        <member name="T:GorgonLibrary.TimingData">
            <summary>
            Object for timing data like FPS, # of frames, etc...
            </summary>
        </member>
        <member name="M:GorgonLibrary.TimingData.GetFps">
            <summary>
            Function to calculate the frames per second.
            </summary>
        </member>
        <member name="M:GorgonLibrary.TimingData.Reset">
            <summary>
            Function to reset the timing data.
            </summary>
        </member>
        <member name="M:GorgonLibrary.TimingData.Update">
            <summary>
            Function to update the timing values.
            </summary>
            <returns>TRUE if no delay is required, FALSE if the user should implement a delay.</returns>
        </member>
        <member name="M:GorgonLibrary.TimingData.#ctor(GorgonLibrary.PreciseTimer)">
            <summary>
            Constructor.
            </summary>
            <param name="timer">Timer to use for data.</param>
        </member>
        <member name="M:GorgonLibrary.TimingData.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:GorgonLibrary.TimingData.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to release all resources, FALSE to only release unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.TimingData.Dispose">
            <summary>
            Function to perform clean up.
            </summary>
        </member>
        <member name="P:GorgonLibrary.TimingData.FrameDrawTime">
            <summary>
            Property to return the amount of time to draw a frame in milliseconds.
            </summary>
        </member>
        <member name="P:GorgonLibrary.TimingData.AverageFps">
            <summary>
            Property to return the average Frames Per Second.
            </summary>
        </member>
        <member name="P:GorgonLibrary.TimingData.HighestFps">
            <summary>
            Property to return the highest Frames Per Second.
            </summary>
        </member>
        <member name="P:GorgonLibrary.TimingData.LowestFps">
            <summary>
            Property to return the lowest Frames Per Second.
            </summary>
        </member>
        <member name="P:GorgonLibrary.TimingData.CurrentFps">
            <summary>
            Property to return the current Frames Per Second.
            </summary>
        </member>
        <member name="P:GorgonLibrary.TimingData.FrameCount">
            <summary>
            Property to return the current number of frames drawn.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ImageShader">
            <summary>
            Object representing an image shader interface.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ImageShader.ShaderProfile(System.Version)">
            <summary>
            Function to retrieve the shader target profile.
            </summary>
            <param name="target">Version of the profile.</param>
            <returns>The shader target profile.</returns>
            <remarks>For a texture shader this is always tx_1_0.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.ImageShader.OnRenderBegin">
            <summary>
            Function called before the rendering begins with this shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ImageShader.OnRender(GorgonLibrary.Graphics.PrimitiveStyle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function called when rendering with this shader.
            </summary>
            <param name="primitiveStyle">Type of primitive to render.</param>
            <param name="vertexStart">Starting vertex to render.</param>
            <param name="vertexCount">Number of vertices to render.</param>
            <param name="indexStart">Starting index to render.</param>
            <param name="indexCount">Number of indices to render.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ImageShader.OnRenderEnd">
            <summary>
            Function called after the rendering ends with this shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ImageShader.CreateShader">
            <summary>
            Function called to create the actual shader object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ImageShader.DestroyShader">
            <summary>
            Function called to destroy the shader object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ImageShader.CompileShader(System.String,GorgonLibrary.Graphics.ShaderCompileOptions)">
            <summary>
            Function to compile the shader source code.
            </summary>
            <param name="functionName">Name of the function to compile.</param>
            <param name="flags">Options to use for compilation.</param>
            <remarks>See <see cref="T:GorgonLibrary.Graphics.ShaderCompileOptions"/> for more information about the compile time options.
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.ImageShader.SetDefaultValues">
            <summary>
            Function to set the default values.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ImageShader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.ImageShader"/> class.
            </summary>
            <param name="name">Name of the image shader.</param>		
        </member>
        <member name="M:GorgonLibrary.Graphics.ImageShader.#ctor(System.String,GorgonLibrary.Graphics.ShaderFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.ImageShader"/> class.
            </summary>
            <param name="name">Name for this object.</param>
            <param name="function">Function to bind to the shader as an entry point.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the name parameter is NULL or a zero length string.</exception>
        </member>
        <member name="P:GorgonLibrary.Graphics.ImageShader.D3DShader">
            <summary>
            Property to return the D3D shader.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Vector3D">
            <summary>
            Value type to represent a 3 dimensional vector.
            </summary>
            <remarks>
            Vector mathematics are commonly used in graphical 3D applications.  And other
            spatial related computations.
            This valuetype provides us a convienient way to use vectors and their operations.
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Vector3D.X">
            <summary>
            Horizontal position of the vector.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Vector3D.Y">
            <summary>
            Vertical position of the vector.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Vector3D.Z">
            <summary>
            Depth position of the vector.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Vector3D.DotProduct(GorgonLibrary.Vector3D)">
            <summary>
            Function to perform a dot product between this and another vector.
            </summary>
            <param name="vector">Vector to get the dot product against.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.CrossProduct(GorgonLibrary.Vector3D)">
            <summary>
            Function to perform a cross product between this and another vector.
            </summary>
            <param name="vector">Vector to perform the cross product against.</param>
            <returns>Vector containin the cross product.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.Normalize">
            <summary>
            Function to normalize the vector.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Vector3D.Floor(GorgonLibrary.Vector3D)">
            <summary>
            Function to set this vector to the lowest values of the vector passed, if the values are lower.
            </summary>
            <param name="compare">Vector to compare.</param>
        </member>
        <member name="M:GorgonLibrary.Vector3D.Ceiling(GorgonLibrary.Vector3D)">
            <summary>
            Function to set this vector to the highest values of the vector passed, if the values are higher.
            </summary>
            <param name="compare">Vector to compare.</param>
        </member>
        <member name="M:GorgonLibrary.Vector3D.Equals(System.Object)">
            <summary>
            Function to compare this vector to another object.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.GetHashCode">
            <summary>
            Function to return the hash code for this object.
            </summary>
            <returns>The hash code for this object.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.ToString">
            <summary>
            Function to return the textual representation of this object.
            </summary>
            <returns>A string containing the type and values of the object.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.Add(GorgonLibrary.Vector3D,GorgonLibrary.Vector3D)">
            <summary>
            Function to perform addition upon two vectors.
            </summary>
            <param name="left">Vector to add to.</param>
            <param name="right">Vector to add with.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.Subtract(GorgonLibrary.Vector3D,GorgonLibrary.Vector3D)">
            <summary>
            Function to perform subtraction upon two vectors.
            </summary>
            <param name="left">Vector to subtract.</param>
            <param name="right">Vector to subtract with.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.Negate(GorgonLibrary.Vector3D)">
            <summary>
            Function to return a negated vector.
            </summary>
            <param name="left">Vector to negate.</param>
            <returns>A negated vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.Divide(GorgonLibrary.Vector3D,System.Single)">
            <summary>
            Function to divide a vector by a scalar value.
            </summary>
            <param name="left">Vector to divide.</param>
            <param name="scalar">Scalar value to divide by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.Divide(GorgonLibrary.Vector3D,GorgonLibrary.Vector3D)">
            <summary>
            Function to divide a vector by another vector.
            </summary>
            <param name="left">Vector to divide.</param>
            <param name="right">Vector to divide by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.Multiply(GorgonLibrary.Vector3D,GorgonLibrary.Vector3D)">
            <summary>
            Function to multiply two vectors together.
            </summary>
            <param name="left">Vector to multiply.</param>
            <param name="right">Vector to multiply by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.Multiply(GorgonLibrary.Vector3D,System.Single)">
            <summary>
            Function to multiply a vector by a scalar value.
            </summary>
            <param name="left">Vector to multiply with.</param>
            <param name="scalar">Scalar value to multiply by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.Multiply(System.Single,GorgonLibrary.Vector3D)">
            <summary>
            Function to multiply a vector by a scalar value.
            </summary>
            <param name="scalar">Scalar value to multiply by.</param>
            <param name="right">Vector to multiply with.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.op_Equality(GorgonLibrary.Vector3D,GorgonLibrary.Vector3D)">
            <summary>
            Operator to perform equality tests.
            </summary>
            <param name="left">Vector to compare.</param>
            <param name="right">Vector to compare with.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.op_Inequality(GorgonLibrary.Vector3D,GorgonLibrary.Vector3D)">
            <summary>
            Operator to perform inequality tests.
            </summary>
            <param name="left">Vector to compare.</param>
            <param name="right">Vector to compare with.</param>
            <returns>TRUE if not equal, FALSE if they are.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.op_LessThan(GorgonLibrary.Vector3D,GorgonLibrary.Vector3D)">
            <summary>
            Operator to perform a test to see if the left is less than the right.
            </summary>
            <param name="left">Left vector to compare.</param>
            <param name="right">Right vector to compare.</param>
            <returns>TRUE if left is less than right, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.op_GreaterThan(GorgonLibrary.Vector3D,GorgonLibrary.Vector3D)">
            <summary>
            Operator to perform a test to see if the left is greater than the right.
            </summary>
            <param name="left">Left vector to compare.</param>
            <param name="right">Right vector to compare.</param>
            <returns>TRUE if left is greater than right, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.op_LessThanOrEqual(GorgonLibrary.Vector3D,GorgonLibrary.Vector3D)">
            <summary>
            Operator to perform a test to see if the left is less or equal to the right.
            </summary>
            <param name="left">Left vector to compare.</param>
            <param name="right">Right vector to compare.</param>
            <returns>TRUE if left is less than right, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.op_GreaterThanOrEqual(GorgonLibrary.Vector3D,GorgonLibrary.Vector3D)">
            <summary>
            Operator to perform a test to see if the left is greater or equal to the right.
            </summary>
            <param name="left">Left vector to compare.</param>
            <param name="right">Right vector to compare.</param>
            <returns>TRUE if left is greater than right, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.op_Addition(GorgonLibrary.Vector3D,GorgonLibrary.Vector3D)">
            <summary>
            Operator to perform addition upon two vectors.
            </summary>
            <param name="left">Vector to add to.</param>
            <param name="right">Vector to add with.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.op_Subtraction(GorgonLibrary.Vector3D,GorgonLibrary.Vector3D)">
            <summary>
            Operator to perform subtraction upon two vectors.
            </summary>
            <param name="left">Vector to subtract.</param>
            <param name="right">Vector to subtract with.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.op_UnaryNegation(GorgonLibrary.Vector3D)">
            <summary>
            Operator to negate a vector.
            </summary>
            <param name="left">Vector to negate.</param>
            <returns>A negated vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.op_Multiply(GorgonLibrary.Vector3D,GorgonLibrary.Vector3D)">
            <summary>
            Operator to multiply two vectors together.
            </summary>
            <param name="left">Vector to multiply.</param>
            <param name="right">Vector to multiply by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.op_Multiply(GorgonLibrary.Vector3D,System.Single)">
            <summary>
            Operator to multiply a vector by a scalar value.
            </summary>
            <param name="left">Vector to multiply with.</param>
            <param name="scalar">Scalar value to multiply by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.op_Multiply(System.Single,GorgonLibrary.Vector3D)">
            <summary>
            Operator to multiply a vector by a scalar value.
            </summary>
            <param name="scalar">Scalar value to multiply by.</param>
            <param name="right">Vector to multiply with.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.op_Division(GorgonLibrary.Vector3D,System.Single)">
            <summary>
            Operator to divide a vector by a scalar value.
            </summary>
            <param name="left">Vector to divide.</param>
            <param name="scalar">Scalar value to divide by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.op_Division(GorgonLibrary.Vector3D,GorgonLibrary.Vector3D)">
            <summary>
            Operator to divide a vector by another vector.
            </summary>
            <param name="left">Vector to divide.</param>
            <param name="right">Vector to divide by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.op_Implicit(GorgonLibrary.Vector2D)~GorgonLibrary.Vector3D">
            <summary>
            Operator to convert a 2D vector into a 3D vector.
            </summary>
            <param name="vector">2D vector.</param>
            <returns>3D vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.op_Explicit(GorgonLibrary.Vector3D)~GorgonLibrary.Vector2D">
            <summary>
            Operator to convert a 3D vector into a 2D vector.
            </summary>
            <param name="vector">3D vector to convert.</param>
            <returns>2D vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector3D.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="x">Horizontal position of the vector.</param>
            <param name="y">Vertical posiition of the vector.</param>
            <param name="z">Depth position of the vector.</param>
        </member>
        <member name="P:GorgonLibrary.Vector3D.Length">
            <summary>
            Property to return the length of this vector.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector3D.LengthSquare">
            <summary>
            Property to return the length of this vector squared.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector3D.InverseLength">
            <summary>
            Property to return the inverse length of this vector.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector3D.Zero">
            <summary>
            Property to return a zeroed vector.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector3D.Unit">
            <summary>
            Property to return a unit vector (1,1,1).
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector3D.UnitX">
            <summary>
            Property to return a unit vector for the X axis (1,0,0).
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector3D.UnitY">
            <summary>
            Property to return a unit vector for the Y axis (0,1,0).
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector3D.UnitZ">
            <summary>
            Property to return a unit vector for the X axis (0,0,1).
            </summary>
        </member>
        <member name="T:GorgonLibrary.Spline">
            <summary>
            Object representing a spline.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Spline.RecalculateTangents">
            <summary>
            Function to recalculate the spline tangents using Catmull-Rom.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Spline.Remove(System.Int32)">
            <summary>
            Function to remove a point from the spline.
            </summary>
            <param name="index">Index of the point to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Spline.Clear">
            <summary>
            Function to clear the points in the spline.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Spline.AddPoint(GorgonLibrary.Vector2D)">
            <summary>
            Function to add a new point to the spline.
            </summary>
            <param name="point">Point for the spline.</param>
        </member>
        <member name="M:GorgonLibrary.Spline.AddPoint(System.Single,System.Single)">
            <summary>
            Function to add a new point to the spline.
            </summary>
            <param name="x">Horizontal position.</param>
            <param name="y">Vertical position.</param>
        </member>
        <member name="M:GorgonLibrary.Spline.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Spline.AutoCalculate">
            <summary>
            Property to set or return whether to autocalculate the spline upon changes.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Spline.Item(System.Int32)">
            <summary>
            Property to return a point in the spline.
            </summary>
            <param name="index">Index of the point in the spline.</param>
            <returns>Vector point in the spline.</returns>
        </member>
        <member name="P:GorgonLibrary.Spline.Item(System.Int32,System.Single)">
            <summary>
            Property to return an interpolated point from the spline.
            </summary>
            <param name="index">Index to start at.</param>
            <param name="time">Time index to use.</param>
            <returns>Interpolated point in the spline.</returns>
        </member>
        <member name="P:GorgonLibrary.Spline.Item(System.Single)">
            <summary>
            Property to return an interpolated point from the spline.
            </summary>
            <param name="time">Time index to use.</param>
            <returns>Interpolated point in the spline.</returns>
        </member>
        <member name="T:GorgonLibrary.FileSystems.FileSystemProviderList">
            <summary>
            Object representing a file system type list.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemProviderList.Add(GorgonLibrary.FileSystems.FileSystemPlugIn)">
            <summary>
            Function to add file system information.
            </summary>
            <param name="plugIn">Plug-in used by the file system.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemProviderList.Add(System.Type)">
            <summary>
            Function to add file system information.
            </summary>
            <param name="typeInfo">Information about the file system object type.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemProviderList.Clear">
            <summary>
            Function clear the list.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemProviderList.Remove(System.String)">
            <summary>
            Function to remove an item by name.
            </summary>
            <param name="name">Name of the item to remove.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemProviderList.Contains(System.Type)">
            <summary>
            Function to return whether the file system info list contains information about the type of file system passed.
            </summary>
            <param name="type">Type of file system.</param>
            <returns>TRUE if found, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemProviderList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemProviderList.Item(System.Int32)">
            <summary>
            Property to return a file system provider by index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemProviderList.Item(System.String)">
            <summary>
            Property to return a file system provider by its key.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemProviderList.Item(System.Type)">
            <summary>
            Property to return a file system by its type.
            </summary>
            <param name="type">Type of file system.</param>
            <returns>File system of the specified type.</returns>
        </member>
        <member name="T:GorgonLibrary.FileSystems.FileList">
            <summary>
            Object representing a list of files.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileList.Clear">
            <summary>
            Function to clear the list.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileList.AddFile(GorgonLibrary.FileSystems.FileSystemFile)">
            <summary>
            Function to add a file to the list.
            </summary>
            <param name="file">File to add.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileList.Item(System.Int32)">
            <summary>
            Property to return the file by index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileList.Item(System.String)">
            <summary>
            Property to return the file with the specified key name.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.TrackCollection">
            <summary>
            A collection of animation tracks.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.TrackCollection.Add(GorgonLibrary.Graphics.Track)">
            <summary>
            Function to add a new track to the collection.
            </summary>
            <param name="track">Track to add.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.TrackCollection.Clear">
            <summary>
            Function to clear the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.TrackCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.TrackCollection"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TrackCollection.Item(System.String)">
            <summary>
            Property to return a track by its name.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TrackCollection.Item(System.Int32)">
            <summary>
            Property to return a track by its index.
            </summary>
        </member>
        <member name="T:GorgonLibrary.VideoModeList">
            <summary>
            Class for holding a list of video modes.
            </summary>
            <remarks>
            Since an adapter can have a whole boatload of video modes, we should
            have a system of keeping track of the available video modes.
            </remarks>
        </member>
        <member name="T:GorgonLibrary.DynamicArray`1">
            <summary>
            Object representing a more concrete version of the dynamic array.
            </summary>
            <typeparam name="T">Type of object to store.</typeparam>
        </member>
        <member name="M:GorgonLibrary.DynamicArray`1.Remove(System.Int32)">
            <summary>
            Function to remove an object from the list by index.
            </summary>
            <param name="index">Index to remove at.</param>
        </member>
        <member name="M:GorgonLibrary.DynamicArray`1.Clear">
            <summary>
            Function to clear the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.DynamicArray`1.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="defaultsize">Default size of the collection.</param>
        </member>
        <member name="M:GorgonLibrary.DynamicArray`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.DynamicArray`1.Item(System.Int32)">
            <summary>
            Property to get or set the item at the specified index.
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.VideoModeList.Refresh">
            <summary>
            Function to refresh video mode list.
            </summary>
        </member>
        <member name="M:GorgonLibrary.VideoModeList.#ctor(GorgonLibrary.Driver)">
            <summary>
            Constructor.
            </summary>
            <param name="driver">Driver that contains the video modes.</param>
        </member>
        <member name="P:GorgonLibrary.VideoModeList.Item(GorgonLibrary.VideoMode)">
            <summary>
            Indexer to return a video mode by the parameters passed in the video mode structure.
            </summary>		
        </member>
        <member name="P:GorgonLibrary.VideoModeList.WidthFilter">
            <summary>
            Property to return or set the width filter.
            </summary>
        </member>
        <member name="P:GorgonLibrary.VideoModeList.RefreshFilter">
            <summary>
            Property to return or set the width filter.		
            </summary>
        </member>
        <member name="P:GorgonLibrary.VideoModeList.HeightFilter">
            <summary>
            Property to return or set the height filter.
            </summary>
        </member>
        <member name="P:GorgonLibrary.VideoModeList.BppFilter">
            <summary>
            Property to return or set the width filter.
            </summary>
        </member>
        <member name="P:GorgonLibrary.VideoModeList.FilterCompare">
            <summary>
            Property to return or set the comparison function for the mode filter.
            </summary>
        </member>
        <member name="T:GorgonLibrary.GorgonExceptionHandler">
            <summary>
            Delegate to define an exception handler.
            </summary>
            <param name="ex">Exception passed to the handler.</param>
        </member>
        <member name="T:GorgonLibrary.GorgonException">
            <summary>
            Gorgon exception object.
            </summary>
            <remarks>This is the library specific exception, meaning that it's meant for library specific functionality.<para>
            When this exception is consumed, the user can check the <see cref="T:GorgonLibrary.GorgonError">ResultCode</see> property to examine the context of the exception.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.GorgonException.FormatStackTrace(System.String,System.String,GorgonLibrary.LoggingLevel)">
            <summary>
            Function to format a stack trace to be more presentable.
            </summary>
            <param name="stack">Stack trace to format.</param>
            <param name="indicator">Inner exception indicator.</param>
            <param name="logLevel">Logging level to use.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonException.LogException(System.Exception)">
            <summary>
            Function to send the exception to the log file.
            </summary>
        </member>
        <member name="M:GorgonLibrary.GorgonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="M:GorgonLibrary.GorgonException.Catch(System.Exception)">
            <summary>
            Function to catch and log any stray exception.
            </summary>
            <param name="ex">Exception to catch.</param>
            <returns>The exception that was caught.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonException.Catch(System.Exception,GorgonLibrary.GorgonExceptionHandler)">
            <summary>
            Functon to catch and handle an exception.
            </summary>
            <param name="ex">Exception to pass to the handler.</param>
            <param name="handler">Handler to handle the exception.</param>
            <returns>The exception that was caught.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonException.Repackage(GorgonLibrary.GorgonError,System.String,System.Exception)">
            <summary>
            Function to repackage an arbitrary exception as a gorgon exception.
            </summary>
            <param name="result">Result code to use.</param>
            <param name="message">Message to append to the result.</param>
            <param name="ex">Exception to capture and rethrow.</param>
            <returns>A new Gorgon exception to throw.</returns>
            <remarks>The original exception will be the inner exception of the new <see cref="T:GorgonLibrary.GorgonException"/>.</remarks>
        </member>
        <member name="M:GorgonLibrary.GorgonException.Repackage(GorgonLibrary.GorgonError,System.Exception)">
            <summary>
            Function to repackage an arbitrary exception as a gorgon exception.
            </summary>
            <param name="result">Result code to use.</param>
            <param name="ex">Exception to capture and rethrow.</param>
            <returns>A new Gorgon exception to throw.</returns>
            <remarks>The original exception will be the inner exception of the new <see cref="T:GorgonLibrary.GorgonException"/>.</remarks>
        </member>
        <member name="M:GorgonLibrary.GorgonException.Repackage(System.String,System.Exception)">
            <summary>
            Function to repackage an arbitrary exception as a gorgon exception.
            </summary>
            <param name="message">New message to pass to the new exception.</param>
            <param name="ex">Exception to capture and rethrow.</param>
            <returns>A new Gorgon exception to throw.</returns>
            <remarks>The original exception will be the inner exception of the new <see cref="T:GorgonLibrary.GorgonException"/>.</remarks>
        </member>
        <member name="M:GorgonLibrary.GorgonException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="errorMessage">Error message to display.</param>
            <param name="innerException">Inner exception to pass through.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="errorMessage">Error message to display.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialized constructor.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonException.#ctor(GorgonLibrary.GorgonError,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonException"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="message">Message data to append to the error.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonException.#ctor(GorgonLibrary.GorgonError,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonException"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="message">Message data to append to the error.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonException.#ctor(GorgonLibrary.GorgonError,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonException"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonException.#ctor(GorgonLibrary.GorgonError)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonException"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonException.Log">
            <summary>
            Property to set or return the log system to use when dumping exceptions to the log.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonException.ResultCode">
            <summary>
            Property to return the exception result code.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.VertexTypeList">
            <summary>
            Object representing a list of vertex types.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexTypeList.Clear">
            <summary>
            Function to clear the list.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexTypeList.CreateVertexTypes">
            <summary>
            Function to create the vertex types.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexTypeList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexTypeList.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to release all resources, FALSE to only release unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexTypeList.Dispose">
            <summary>
            Function to perform clean up.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.VertexTypeList.Item(System.Int32)">
            <summary>
            Property to return a vertex type by index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.VertexTypeList.Item(System.String)">
            <summary>
            Property to return a vertex type by its key name.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1">
            <summary>
            Value type describing a sprite vertex.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1.Position">
            <summary>
            Position of the vertex.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1.ColorValue">
            <summary>
            Color value of the vertex.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1.TextureCoordinates">
            <summary>
            Texture coordinates.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1.op_Equality(GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1,GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1.op_Inequality(GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1,GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1.#ctor(GorgonLibrary.Vector3D,System.Drawing.Color,GorgonLibrary.Vector2D)">
            <summary>
            Constructor.
            </summary>
            <param name="position">Position of the vertex.</param>
            <param name="color">Color of the vertex.</param>
            <param name="textureCoordinates">Texture coordinates.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1.Color">
            <summary>
            Property to set or return the color as a <see cref="T:System.Drawing.Color"/> value.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.Image">
            <summary>
            Object representing an image.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.ClearTextureCallback(SlimDX.Vector2,SlimDX.Vector2)">
            <summary>
            Function called when a texture is filled.
            </summary>
            <param name="textureCoordinate">Texture coordinate.</param>
            <param name="textureSize">Size of the texel.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Initialize">
            <summary>
            Function to create an empty image.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.ImageFromStream(System.String,GorgonLibrary.FileSystems.FileSystem,System.Resources.ResourceManager,System.IO.Stream,System.Boolean,System.Int32,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats,System.Drawing.Color)">
            <summary>
            Function to return an image from a stream.
            </summary>
            <param name="name">Image name or path.</param>
            <param name="fileSystem">A file system that contains the image.</param>
            <param name="resources">A resource manager that is used to load the file(s).</param>
            <param name="stream">Stream that contains the object.</param>
            <param name="isXML">TRUE if the stream contains XML data, FALSE if not.</param>
            <param name="width">Width of the image.</param>
            <param name="height">Height of the image.</param>
            <param name="bytes">Size in bytes of the image.</param>
            <param name="format">Format of the image buffer.</param>
            <param name="colorKey">Color key to use for transparency.</param>
            <returns>The object contained within the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.ValidateFormat(GorgonLibrary.Graphics.ImageBufferFormats,GorgonLibrary.Graphics.ImageType)">
            <summary>
            Function to return the best D3D format from the given Gorgon format.
            </summary>
            <param name="format">Gorgon format to convert.</param>
            <param name="type">Type of image.</param>
            <returns>The best matching supported format for the image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromFile(System.String)">
            <summary>
            Function to load a Image from the disk.
            </summary>
            <param name="filename">Name and path of the file to load.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromFile(System.String,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to load a Image from the disk.
            </summary>
            <param name="filename">Name and path of the file to load.</param>
            <param name="format">Requested format of the Image.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromFile(System.String,GorgonLibrary.Graphics.ImageBufferFormats,System.Drawing.Color)">
            <summary>
            Function to load a Image from the disk.
            </summary>
            <param name="filename">Name and path of the file to load.</param>
            <param name="format">Requested format of the Image.</param>
            <param name="colorKey">Color to use as transparent.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromFile(System.String,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to load a Image from disk.
            </summary>
            <param name="filename">Filename of the Image to load.</param>
            <param name="width">Requested width of the Image.</param>
            <param name="height">Requested height of the Image.</param>
            <param name="format">Requested format of the Image.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromFile(System.String,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats,System.Drawing.Color)">
            <summary>
            Function to load a Image from disk.
            </summary>
            <param name="filename">Filename of the Image to load.</param>
            <param name="width">Requested width of the Image.</param>
            <param name="height">Requested height of the Image.</param>
            <param name="format">Requested format of the Image.</param>
            <param name="colorKey">Color to use as transparent.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromFileSystem(GorgonLibrary.FileSystems.FileSystem,System.String,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats,System.Drawing.Color)">
            <summary>
            Function to load a Image from a file system.
            </summary>
            <param name="fileSystem">File system that contains the image.</param>
            <param name="filename">Filename of the Image to load.</param>
            <param name="width">Requested width of the Image.</param>
            <param name="height">Requested height of the Image.</param>
            <param name="format">Requested format of the Image.</param>
            <param name="colorKey">Color to use as transparent.</param>
            <returns>The image contained within the file system.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromFileSystem(GorgonLibrary.FileSystems.FileSystem,System.String,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to load a Image from a file system.
            </summary>
            <param name="fileSystem">File system that contains the image.</param>
            <param name="filename">Filename of the Image to load.</param>
            <param name="width">Requested width of the Image.</param>
            <param name="height">Requested height of the Image.</param>
            <param name="format">Requested format of the Image.</param>
            <returns>The image contained within the file system.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromFileSystem(GorgonLibrary.FileSystems.FileSystem,System.String,GorgonLibrary.Graphics.ImageBufferFormats,System.Drawing.Color)">
            <summary>
            Function to load a Image from a file system.
            </summary>
            <param name="fileSystem">File system that contains the image.</param>
            <param name="filename">Filename of the Image to load.</param>
            <param name="format">Requested format of the Image.</param>
            <param name="colorKey">Color to use as transparent.</param>
            <returns>The image contained within the file system.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromFileSystem(GorgonLibrary.FileSystems.FileSystem,System.String,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to load a Image from a file system.
            </summary>
            <param name="fileSystem">File system that contains the image.</param>
            <param name="filename">Filename of the Image to load.</param>
            <param name="format">Requested format of the Image.</param>
            <returns>The image contained within the file system.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromFileSystem(GorgonLibrary.FileSystems.FileSystem,System.String)">
            <summary>
            Function to load a Image from a file system.
            </summary>
            <param name="fileSystem">File system that contains the image.</param>
            <param name="filename">Filename of the Image to load.</param>
            <returns>The image contained within the file system.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromResource(System.String,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats,System.Drawing.Color)">
            <summary>
            Function to load an image from resources.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="width">New width of the image, 0 for original size.</param>
            <param name="height">New height of the image, 0 for original size.</param>
            <param name="format">Format to use.</param>
            <param name="colorKey">Color to use for transparency.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromResource(System.String,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to load an image from resources.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="width">New width of the image, 0 for original size.</param>
            <param name="height">New height of the image, 0 for original size.</param>
            <param name="format">Format to use.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromResource(System.String,GorgonLibrary.Graphics.ImageBufferFormats,System.Drawing.Color)">
            <summary>
            Function to load an image from resources.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="format">Format to use.</param>
            <param name="colorKey">Color to use for transparency.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromResource(System.String,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to load an image from resources.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="format">Format to use.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromResource(System.String)">
            <summary>
            Function to load an image from resources.
            </summary>
            <param name="name">Name of the resource.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromResource(System.String,System.Resources.ResourceManager,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats,System.Drawing.Color)">
            <summary>
            Function to load an image from resources.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="resourceManager">Resource manager to use.</param>
            <param name="width">New width of the image, 0 for original size.</param>
            <param name="height">New height of the image, 0 for original size.</param>
            <param name="format">Format to use.</param>
            <param name="colorKey">Color to use for transparency.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromResource(System.String,System.Resources.ResourceManager,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to load an image from resources.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="resourceManager">Resource manager to use.</param>
            <param name="width">New width of the image, 0 for original size.</param>
            <param name="height">New height of the image, 0 for original size.</param>
            <param name="format">Format to use.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromResource(System.String,System.Resources.ResourceManager,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to load an image from resources.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="resourceManager">Resource manager to use.</param>
            <param name="format">Format to use.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromResource(System.String,System.Resources.ResourceManager,GorgonLibrary.Graphics.ImageBufferFormats,System.Drawing.Color)">
            <summary>
            Function to load an image from resources.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="resourceManager">Resource manager to use.</param>
            <param name="format">Format to use.</param>
            <param name="colorKey">Color to use for transparency.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromResource(System.String,System.Resources.ResourceManager)">
            <summary>
            Function to load an image from resources.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="resourceManager">Resource manager to use.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromBitmap(System.String,System.Drawing.Image,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats,System.Drawing.Color)">
            <summary>
            Function to create a texture from a GDI+ image.
            </summary>
            <param name="name">Name of the image.</param>
            <param name="image">Image to retrieve data from.</param>
            <param name="width">New width of the image, 0 for original size.</param>
            <param name="height">New height of the image, 0 for original size.</param>
            <param name="format">Format to use.</param>
            <param name="colorKey">Color to use for transparency.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromBitmap(System.String,System.Drawing.Image,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to create a texture from a GDI+ image.
            </summary>
            <param name="name">Name of the image.</param>
            <param name="image">Image to retrieve data from.</param>
            <param name="width">New width of the image, 0 for original size.</param>
            <param name="height">New height of the image, 0 for original size.</param>
            <param name="format">Format to use.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromBitmap(System.String,System.Drawing.Image,GorgonLibrary.Graphics.ImageBufferFormats,System.Drawing.Color)">
            <summary>
            Function to create a texture from a GDI+ image.
            </summary>
            <param name="name">Name of the image.</param>
            <param name="image">Image to retrieve data from.</param>
            <param name="format">Format to use.</param>
            <param name="colorKey">Color used for transparency.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromBitmap(System.String,System.Drawing.Image,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to create a texture from a GDI+ image.
            </summary>
            <param name="name">Name of the image.</param>
            <param name="image">Image to retrieve data from.</param>
            <param name="format">Format to use.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromBitmap(System.String,System.Drawing.Image)">
            <summary>
            Function to create a texture from a GDI+ image.
            </summary>
            <param name="name">Name of the image.</param>
            <param name="image">Image to retrieve data from.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromStream(System.String,System.IO.Stream,System.Int32,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats,System.Drawing.Color)">
            <summary>
            Function to load an image from a stream.
            </summary>		
            <param name="name">Name of the resource.</param>
            <param name="stream">Stream to use for loading.</param>		
            <param name="bytes">Number of bytes for the image.</param>
            <param name="width">New width of the image, 0 for original size.</param>
            <param name="height">New height of the image, 0 for original size.</param>
            <param name="format">Format to use.</param>
            <param name="colorKey">Color to use for transparency.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromStream(System.String,System.IO.Stream,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats,System.Drawing.Color)">
            <summary>
            Function to load an image from a stream.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="stream">Stream to use for loading.</param>		
            <param name="width">New width of the image, 0 for original size.</param>
            <param name="height">New height of the image, 0 for original size.</param>
            <param name="format">Format to use.</param>
            <param name="colorKey">Color to use for transparency.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromStream(System.String,System.IO.Stream,System.Int32,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to load an image from a stream.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="stream">Stream to use for loading.</param>		
            <param name="bytes">Number of bytes for the image.</param>
            <param name="width">New width of the image, 0 for original size.</param>
            <param name="height">New height of the image, 0 for original size.</param>
            <param name="format">Format to use.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromStream(System.String,System.IO.Stream,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to load an image from a stream.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="stream">Stream to use for loading.</param>		
            <param name="width">New width of the image, 0 for original size.</param>
            <param name="height">New height of the image, 0 for original size.</param>
            <param name="format">Format to use.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromStream(System.String,System.IO.Stream,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function to load an image from a stream.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="stream">Stream to use for loading.</param>
            <param name="bytes">Number of bytes for the image.</param>
            <param name="width">New width of the image, 0 for original size.</param>
            <param name="height">New height of the image, 0 for original size.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromStream(System.String,System.IO.Stream,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to load an image from a stream.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="stream">Stream to use for loading.</param>
            <param name="bytes">Number of bytes for the image data.</param>
            <param name="format">Format of the image.</param>		
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromStream(System.String,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Function to load an image from a stream.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="stream">Stream to use for loading.</param>
            <param name="width">New width of the image, 0 for original size.</param>
            <param name="height">New height of the image, 0 for original size.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FromStream(System.String,System.IO.Stream,System.Int32)">
            <summary>
            Function to load an image from a stream.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="stream">Stream to use for loading.</param>		
            <param name="bytes">Number of bytes for the image.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.ResizePowerOf2(System.Int32,System.Int32)">
            <summary>
            Function to resize the dimensions into a power of two if required.
            </summary>
            <param name="width">Width of the image.</param>
            <param name="height">Height of the image.</param>
            <returns>Adjusted size.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.GetImageDimensions(System.String,System.Boolean)">
            <summary>
            Function to return the dimensions of an image.
            </summary>
            <param name="path">Path to the image.</param>
            <param name="adjust">TRUE to return adjusted sizes if the device requires it, FALSE to return file image size.</param>
            <returns>Image width and height.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Blit(System.Single,System.Single,System.Single,System.Single,System.Drawing.Color,GorgonLibrary.Graphics.BlitterSizeMode)">
            <summary>
            Function to blit this image to the current render target.
            </summary>
            <param name="x">Horizontal position.</param>
            <param name="y">Vertical position.</param>
            <param name="width">Width of the blit area.</param>
            <param name="height">Height of the blit area.</param>
            <param name="color">Color to modulate with the image.</param>
            <param name="mode">Mode to define how to handle dimensions that are smaller/larger than the image.</param>
            <remarks>Mode is used to either crop or scale the image when the dimensions are larger or smaller than the source image.  It can be one of:
            <para>
            <list type="table">
            <item><term>Scale</term><description>Scale the image up or down to match the width and height parameters.</description></item>
            <item><term>Crop</term><description>Clip the image if it's larger than the width and height passed.  If the image is smaller, then the image will be handled according to the
            <see cref="P:GorgonLibrary.Graphics.RenderTarget.HorizontalWrapMode">Gorgon.CurrentRenderTarget.HorizontalWrapMode</see> or the
            <see cref="P:GorgonLibrary.Graphics.RenderTarget.VerticalWrapMode">Gorgon.CurrentRenderTarget.VerticalWrapMode</see>.</description></item></list>
            </para></remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Blit(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Function to draw this render image to the current render target.
            </summary>
            <param name="x">Left position of the blit.</param>
            <param name="y">Top position of the blit.</param>
            <param name="width">Width to blit with.</param>
            <param name="height">Height to blit with.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Blit(System.Single,System.Single)">
            <summary>
            Function to draw this render image to the current render target.
            </summary>
            <param name="x">Left position of the blit.</param>
            <param name="y">Top position of the blit.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Blit">
            <summary>
            Function to draw this render image to the current render target.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.SetDimensions(System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats,System.Boolean)">
            <summary>
            Function to update the image dimensions and format.
            </summary>
            <param name="width">New width to use.</param>
            <param name="height">New height to use.</param>
            <param name="format">Format to use.</param>
            <param name="preserve">TRUE to preserve the image, FALSE to destroy it.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.SetDimensions(System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to update the image dimensions and format.
            </summary>
            <param name="width">New width to use.</param>
            <param name="height">New height to use.</param>
            <param name="format">Format to use.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.SetDimensions(System.Int32,System.Int32)">
            <summary>
            Function to update the image dimensions and format.
            </summary>
            <param name="width">New width to use.</param>
            <param name="height">New height to use.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Clear(System.Drawing.Color)">
            <summary>
            Function to clear the image with a specified color.
            </summary>
            <param name="color">Color to clear with.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.FillFromShader(GorgonLibrary.Graphics.ImageShader)">
            <summary>
            Function to fill this image from a shader.
            </summary>
            <param name="shader">Shader to use.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Copy(GorgonLibrary.Graphics.Image,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats,System.Drawing.Color)">
            <summary>
            Function to copy the contents of another image into this image.
            </summary>
            <param name="image">Image to copy.</param>
            <param name="width">New width of the image.  0 to keep current.</param>
            <param name="height">New height of the image.  0 to keep current.</param>
            <param name="format">Format for the image.</param>
            <param name="colorKey">Color to use for transparency.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Copy(GorgonLibrary.Graphics.Image,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to copy the contents of another image into this image.
            </summary>
            <param name="image">Image to copy.</param>
            <param name="width">New width of the image.  0 to keep current.</param>
            <param name="height">New height of the image.  0 to keep current.</param>
            <param name="format">Format for the image.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Copy(GorgonLibrary.Graphics.Image,GorgonLibrary.Graphics.ImageBufferFormats,System.Drawing.Color)">
            <summary>
            Function to copy the contents of another image into this image.
            </summary>
            <param name="image">Image to copy.</param>
            <param name="format">Format for the image.</param>
            <param name="colorKey">Color to use for transparency.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Copy(GorgonLibrary.Graphics.Image,System.Drawing.Color)">
            <summary>
            Function to copy the contents of another image into this image.
            </summary>
            <param name="image">Image to copy.</param>		
            <param name="colorKey">Color to use for transparency.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Copy(GorgonLibrary.Graphics.Image,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to copy the contents of another image into this image.
            </summary>
            <param name="image">Image to copy.</param>
            <param name="format">Format for the image.</param>		
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Copy(GorgonLibrary.Graphics.Image)">
            <summary>
            Function to copy the contents of another image into this image.
            </summary>
            <param name="image">Image to copy.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Copy(System.Drawing.Image,GorgonLibrary.Graphics.ImageBufferFormats,System.Drawing.Color)">
            <summary>
            Function to copy the contents of a gdi image into this image.
            </summary>
            <param name="gdiImage">GDI+ image to copy.</param>
            <param name="format">Format for the image.</param>
            <param name="colorKey">Color to use for transparency.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Copy(System.Drawing.Image,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to copy the contents of a gdi image into this image.
            </summary>
            <param name="gdiImage">GDI+ image to copy.</param>
            <param name="format">Format for the image.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Copy(System.Drawing.Image,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to copy the contents of a gdi image into this image.
            </summary>
            <param name="gdiImage">GDI+ image to copy.</param>
            <param name="width">New width of the image.  0 to keep current.</param>
            <param name="height">New height of the image.  0 to keep current.</param>
            <param name="format">Format for the image.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Copy(System.Drawing.Image,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats,System.Drawing.Color)">
            <summary>
            Function to copy the contents of a gdi image into this image.
            </summary>
            <param name="gdiImage">GDI+ image to copy.</param>
            <param name="width">New width of the image.  0 to keep current.</param>
            <param name="height">New height of the image.  0 to keep current.</param>
            <param name="format">Format for the image.</param>
            <param name="colorKey">Color to use for transparency.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Copy(System.Drawing.Image,System.Drawing.Color)">
            <summary>
            Function to copy the contents of a gdi image into this image.
            </summary>
            <param name="gdiImage">GDI+ image to copy.</param>
            <param name="colorKey">Color to use for transparency.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Copy(System.Drawing.Image)">
            <summary>
            Function to copy the contents of a gdi image into this image.
            </summary>
            <param name="gdiImage">GDI+ image to copy.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.SupportsFormat(GorgonLibrary.Graphics.ImageBufferFormats,GorgonLibrary.Graphics.ImageType)">
            <summary>
            Function to return whether the current device supports a specified image format.
            </summary>
            <param name="format">Format to check.</param>
            <param name="type">Type of image.</param>
            <returns>TRUE if supported, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.SaveBitmap">
            <summary>
            Function to convert this image into a GDI+ image.
            </summary>
            <returns>The image wrapped in GDI+ Image object.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Refresh">
            <summary>
            Function to (re)initialize the buffer.
            This will destroy all data contained within the buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Save(System.IO.Stream,GorgonLibrary.Graphics.ImageFileFormat)">
            <summary>
            Function to save an image to a stream.
            </summary>
            <param name="stream">Stream to save into.</param>
            <param name="fileFormat">File format of the image.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Save(GorgonLibrary.FileSystems.FileSystem,System.String,GorgonLibrary.Graphics.ImageFileFormat)">
            <summary>
            Function to save an image.
            </summary>
            <param name="fileSystem">File system to save image within.</param>
            <param name="filename">Filename of the image to save.</param>
            <param name="fileFormat">Format to use for the file.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Save(System.String,GorgonLibrary.Graphics.ImageFileFormat)">
            <summary>
            Function to save an image.
            </summary>
            <param name="filename">Filename of the image to save.</param>
            <param name="fileFormat">Format to use for the file.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Save(GorgonLibrary.FileSystems.FileSystem,System.String)">
            <summary>
            Function to save an image to a file system.
            </summary>
            <param name="fileSystem">File system to save the image into.</param>
            <param name="filename">Filename of the image to save.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Save(System.String)">
            <summary>
            Function to save an image.
            </summary>
            <param name="filename">Filename of the image to save.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.GetImageData(System.Drawing.Rectangle)">
            <summary>
            Function to get access to the image data.
            </summary>
            <param name="lockRectangle">Sub section of the image to retrieve.</param>
            <returns>An image lock box containing data about the locked region.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.GetImageData">
            <summary>
            Function to get access to the image data.
            </summary>
            <returns>An image lock box containing data about the locked region.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.#ctor(System.String,GorgonLibrary.Graphics.ImageType,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the Image.</param>
            <param name="imageType">Type of image.</param>
            <param name="width">Width of the Image.</param>
            <param name="height">Height of the Image.</param>
            <param name="format">Format of the Image.</param>
            <param name="createTexture">TRUE to create an empty texture, FALSE to bypass.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.#ctor(System.String,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.Image"/> class.
            </summary>
            <param name="name">Name of the Image.</param>
            <param name="width">Width of the Image.</param>
            <param name="height">Height of the Image.</param>
            <param name="format">Format of the Image.</param>
            <param name="dynamic">TRUE if a dynamic image, FALSE if not.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.#ctor(System.String,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Initializes the <see cref="T:GorgonLibrary.Graphics.Image"/> class.
            </summary>
            <param name="name">Name of the Image.</param>
            <param name="width">Width of the Image.</param>
            <param name="height">Height of the Image.</param>
            <param name="format">Format of the Image.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes the <see cref="T:GorgonLibrary.Graphics.Image"/> class.
            </summary>
            <param name="name">Name of the Image.</param>
            <param name="width">Width of the Image.</param>
            <param name="height">Height of the Image.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to perform clean up of all objects.  FALSE to clean up only unmanaged objects.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.Dispose">
            <summary>
            Function to perform clean up, used by the image manager.
            </summary>
            <remarks>Users should call ImageManager.Remove() to destroy an image.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.DeviceLost">
            <summary>
            Function called when the device is in a lost state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.DeviceReset">
            <summary>
            Function called when the device is reset.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.ForceRelease">
            <summary>
            Function to force the loss of the objects data.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.GorgonLibrary#Serialization#ISerializable#WriteData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to persist the data into the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.GorgonLibrary#Serialization#ISerializable#ReadData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to retrieve data from the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.Pool">
            <summary>
            Property to return the memory pool for the image.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.Usage">
            <summary>
            Property to return the usage flags for the image.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.D3DTexture">
            <summary>
            Property to return the Direct 3D image.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.RenderImage">
            <summary>
            Property to return the render image that uses this image.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.ClearBufferOnCreateOrReset">
            <summary>
            Property to set or return whether the buffer should be cleared on creation/reset or not.
            </summary>
            <remarks>Setting this to TRUE will cause a significant delay on device reset or image creation.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.IsResource">
            <summary>
            Property to return whether this image was loaded from a resource object or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.ImageType">
            <summary>
            Property to return the type of image this object represents.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.Width">
            <summary>
            Property to set or return the width of the image.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.Height">
            <summary>
            Property to set or return the height of the image.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.Format">
            <summary>
            Property to set or return the format of the image.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.ActualWidth">
            <summary>
            Property to return the actual width of the image.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.ActualHeight">
            <summary>
            Property to return the actual height of the image.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.Filename">
            <summary>
            Property to set or return the filename of the serializable object.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.Image.ImageLockBox">
            <summary>
            Value type containing information about a locked region.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.ImageLockBox.Unlock">
            <summary>
            Function to unlock the image.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.ImageLockBox.Lock(System.Boolean)">
            <summary>
            Function to lock an image.
            </summary>
            <param name="discard">TRUE to discard the data, FALSE to leave alone.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.ImageLockBox.Read(System.Byte[])">
            <summary>
            Function to read data directly from the lock stream.
            </summary>
            <param name="buffer">Buffer to fill with data from the lock stream.</param>
            <remarks>This function depends on where the stream pointer is positioned.  You can adjust the position in the lock stream by using the <see cref="P:GorgonLibrary.Graphics.ImageLockBox.LockPosition">LockPosition</see> property.
            <para>Unlike <see cref="M:GorgonLibrary.Graphics.Image.ImageLockBox.ReadRegion">ReadRegion</see>, this function will NOT respect the region specified in the lock.  The user will be responsible for keeping the data within the region.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.ImageLockBox.Read(System.Byte[],System.Int32)">
            <summary>
            Function to read data directly from the lock stream.
            </summary>
            <param name="buffer">Buffer to fill with data from the lock stream.</param>
            <param name="length">Number of bytes to read.</param>
            <remarks>This function depends on where the stream pointer is positioned.  You can adjust the position in the lock stream by using the <see cref="P:GorgonLibrary.Graphics.ImageLockBox.LockPosition">LockPosition</see> property.
            <para>Unlike <see cref="M:GorgonLibrary.Graphics.Image.ImageLockBox.ReadRegion">ReadRegion</see>, this function will NOT respect the region specified in the lock.  The user will be responsible for keeping the data within the region.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.ImageLockBox.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Function to read data directly from the lock stream.
            </summary>
            <param name="buffer">Buffer to fill with data from the lock stream.</param>
            <param name="offset">Offset into the <paramref name="buffer"/> to start writing at.</param>
            <param name="length">Number of bytes to read.</param>
            <remarks>This function depends on where the stream pointer is positioned.  You can adjust the position in the lock stream by using the <see cref="P:GorgonLibrary.Graphics.ImageLockBox.LockPosition">LockPosition</see> property.
            <para>Unlike <see cref="M:GorgonLibrary.Graphics.Image.ImageLockBox.ReadRegion">ReadRegion</see>, this function will NOT respect the region specified in the lock.  The user will be responsible for keeping the data within the region.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.ImageLockBox.Write(System.Byte[])">
            <summary>
            Function to write data directly to the lock stream.
            </summary>
            <param name="buffer">Buffer containing data to write.</param>
            <remarks>This function depends on where the stream pointer is positioned.  You can adjust the position in the lock stream by using the <see cref="P:GorgonLibrary.Graphics.ImageLockBox.LockPosition">LockPosition</see> property.
            <para>Unlike <see cref="M:GorgonLibrary.Graphics.Image.ImageLockBox.ReadRegion">ReadRegion</see>, this function will NOT respect the region specified in the lock.  The user will be responsible for keeping the data within the region.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.ImageLockBox.Write(System.Byte[],System.Int32)">
            <summary>
            Function to write data directly to the lock stream.
            </summary>
            <param name="buffer">Buffer containing data to write.</param>
            <param name="length">Number of bytes to write.</param>
            <remarks>This function depends on where the stream pointer is positioned.  You can adjust the position in the lock stream by using the <see cref="P:GorgonLibrary.Graphics.ImageLockBox.LockPosition">LockPosition</see> property.
            <para>Unlike <see cref="M:GorgonLibrary.Graphics.Image.ImageLockBox.ReadRegion">ReadRegion</see>, this function will NOT respect the region specified in the lock.  The user will be responsible for keeping the data within the region.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.ImageLockBox.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Function to write data directly to the lock stream.
            </summary>
            <param name="buffer">Buffer containing data to write.</param>
            <param name="offset">Offset into the <paramref name="buffer"/> to start reading from.</param>
            <param name="length">Number of bytes to write.</param>
            <remarks>This function depends on where the stream pointer is positioned.  You can adjust the position in the lock stream by using the <see cref="P:GorgonLibrary.Graphics.ImageLockBox.LockPosition">LockPosition</see> property.
            <para>Unlike <see cref="M:GorgonLibrary.Graphics.Image.ImageLockBox.ReadRegion">ReadRegion</see>, this function will NOT respect the region specified in the lock.  The user will be responsible for keeping the data within the region.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.ImageLockBox.WriteRegion(System.Byte[])">
            <summary>
            Function to write data into the locked region.
            </summary>
            <param name="buffer">The buffer containing the image data to write to the region.</param>
            <remarks>Ensure that the buffer size is at least equal to that of the locked region (in bytes).</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.ImageLockBox.ReadRegion">
            <summary>
            Function to read data from the locked region on the image.
            </summary>
            <returns>The image data in the locked region.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.ImageLockBox.#ctor(GorgonLibrary.Graphics.Image,System.Drawing.Rectangle)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Image that owns this lock box.</param>
            <param name="region">Locked region.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.ImageLockBox.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to release all resources, FALSE to only release unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Image.ImageLockBox.Dispose">
            <summary>
            Function to perform clean up.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.ImageLockBox.LockPosition">
            <summary>
            Property to set or return the position in the locked data.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.ImageLockBox.Owner">
            <summary>
            Property to return the image that owns this lock box.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.ImageLockBox.Region">
            <summary>
            Property to return the locked region dimensions.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.ImageLockBox.Format">
            <summary>
            Property to return the image format.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.ImageLockBox.Pitch">
            <summary>
            Property to return the total width in bytes of the image.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.ImageLockBox.BytesPerPixel">
            <summary>
            Property to return the number of bytes per pixel.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.ImageLockBox.ReadOnly">
            <summary>
            Property to return whether the data is read-only or read-write.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.ImageLockBox.RegionPitch">
            <summary>
            Property to return the pitch for the locked region.
            </summary>
            <remarks>Use this to get the pitch value for the width of the region, this differs from <see cref="P:GorgonLibrary.Graphics.Image.ImageLockBox">Pitch</see> in that the Pitch property takes the entire width of the image into account, whereas this property only takes the width of the locked region.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Image.ImageLockBox.Item(System.Int32,System.Int32)">
            <summary>
            Property to set or return image data.
            </summary>
            <remarks>This method does NOT perform any formatting on the data.</remarks>
            <param name="x">Horizontal positioning.</param>
            <param name="y">Vertical positioning.</param>
            <returns>Data at the position.</returns>
        </member>
        <member name="T:GorgonLibrary.Vector4D">
            <summary>
            Value type to represent a 4 dimensional vector.
            </summary>
            <remarks>
            Vector mathematics are commonly used in graphical 3D applications.  And other
            spatial related computations.
            This valuetype provides us a convienient way to use vectors and their operations.
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Vector4D.X">
            <summary>
            Horizontal position of the vector.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Vector4D.Y">
            <summary>
            Vertical position of the vector.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Vector4D.Z">
            <summary>
            Depth position of the vector.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Vector4D.W">
            <summary>
            Homogeneous unit.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Vector4D.DotProduct(GorgonLibrary.Vector4D)">
            <summary>
            Function to perform a dot product between this and another vector.
            </summary>
            <param name="vector">Vector to get the dot product against.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.CrossProduct(GorgonLibrary.Vector4D)">
            <summary>
            Function to perform a cross product between this and another vector.
            </summary>
            <param name="vector">Vector to perform the cross product against.</param>
            <returns>Vector containin the cross product.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.Normalize">
            <summary>
            Function to normalize the vector.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Vector4D.Equals(System.Object)">
            <summary>
            Function to compare this vector to another object.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.GetHashCode">
            <summary>
            Function to return the hash code for this object.
            </summary>
            <returns>The hash code for this object.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.ToString">
            <summary>
            Function to return the textual representation of this object.
            </summary>
            <returns>A string containing the type and values of the object.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.Add(GorgonLibrary.Vector4D,GorgonLibrary.Vector4D)">
            <summary>
            Function to perform addition upon two vectors.
            </summary>
            <param name="left">Vector to add to.</param>
            <param name="right">Vector to add with.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.Subtract(GorgonLibrary.Vector4D,GorgonLibrary.Vector4D)">
            <summary>
            Function to perform subtraction upon two vectors.
            </summary>
            <param name="left">Vector to subtract.</param>
            <param name="right">Vector to subtract with.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.Negate(GorgonLibrary.Vector4D)">
            <summary>
            Function to return a negated vector.
            </summary>
            <param name="left">Vector to negate.</param>
            <returns>A negated vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.Divide(GorgonLibrary.Vector4D,System.Single)">
            <summary>
            Function to divide a vector by a scalar value.
            </summary>
            <param name="left">Vector to divide.</param>
            <param name="scalar">Scalar value to divide by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.Divide(GorgonLibrary.Vector4D,GorgonLibrary.Vector4D)">
            <summary>
            Function to divide a vector by another vector.
            </summary>
            <param name="left">Vector to divide.</param>
            <param name="right">Vector to divide by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.Multiply(GorgonLibrary.Vector4D,GorgonLibrary.Vector4D)">
            <summary>
            Function to multiply two vectors together.
            </summary>
            <param name="left">Vector to multiply.</param>
            <param name="right">Vector to multiply by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.Multiply(GorgonLibrary.Vector4D,System.Single)">
            <summary>
            Function to multiply a vector by a scalar value.
            </summary>
            <param name="left">Vector to multiply with.</param>
            <param name="scalar">Scalar value to multiply by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.Multiply(System.Single,GorgonLibrary.Vector4D)">
            <summary>
            Function to multiply a vector by a scalar value.
            </summary>
            <param name="scalar">Scalar value to multiply by.</param>
            <param name="right">Vector to multiply with.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.op_Equality(GorgonLibrary.Vector4D,GorgonLibrary.Vector4D)">
            <summary>
            Operator to perform equality tests.
            </summary>
            <param name="left">Vector to compare.</param>
            <param name="right">Vector to compare with.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.op_Inequality(GorgonLibrary.Vector4D,GorgonLibrary.Vector4D)">
            <summary>
            Operator to perform inequality tests.
            </summary>
            <param name="left">Vector to compare.</param>
            <param name="right">Vector to compare with.</param>
            <returns>TRUE if not equal, FALSE if they are.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.op_LessThan(GorgonLibrary.Vector4D,GorgonLibrary.Vector4D)">
            <summary>
            Operator to perform a test to see if the left is less than the right.
            </summary>
            <param name="left">Left vector to compare.</param>
            <param name="right">Right vector to compare.</param>
            <returns>TRUE if left is less than right, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.op_GreaterThan(GorgonLibrary.Vector4D,GorgonLibrary.Vector4D)">
            <summary>
            Operator to perform a test to see if the left is greater than the right.
            </summary>
            <param name="left">Left vector to compare.</param>
            <param name="right">Right vector to compare.</param>
            <returns>TRUE if left is greater than right, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.op_LessThanOrEqual(GorgonLibrary.Vector4D,GorgonLibrary.Vector4D)">
            <summary>
            Operator to perform a test to see if the left is less or equal to the right.
            </summary>
            <param name="left">Left vector to compare.</param>
            <param name="right">Right vector to compare.</param>
            <returns>TRUE if left is less than right, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.op_GreaterThanOrEqual(GorgonLibrary.Vector4D,GorgonLibrary.Vector4D)">
            <summary>
            Operator to perform a test to see if the left is greater or equal to the right.
            </summary>
            <param name="left">Left vector to compare.</param>
            <param name="right">Right vector to compare.</param>
            <returns>TRUE if left is greater than right, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.op_Addition(GorgonLibrary.Vector4D,GorgonLibrary.Vector4D)">
            <summary>
            Operator to perform addition upon two vectors.
            </summary>
            <param name="left">Vector to add to.</param>
            <param name="right">Vector to add with.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.op_Subtraction(GorgonLibrary.Vector4D,GorgonLibrary.Vector4D)">
            <summary>
            Operator to perform subtraction upon two vectors.
            </summary>
            <param name="left">Vector to subtract.</param>
            <param name="right">Vector to subtract with.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.op_UnaryNegation(GorgonLibrary.Vector4D)">
            <summary>
            Operator to negate a vector.
            </summary>
            <param name="left">Vector to negate.</param>
            <returns>A negated vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.op_Multiply(GorgonLibrary.Vector4D,GorgonLibrary.Vector4D)">
            <summary>
            Operator to multiply two vectors together.
            </summary>
            <param name="left">Vector to multiply.</param>
            <param name="right">Vector to multiply by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.op_Multiply(GorgonLibrary.Vector4D,System.Single)">
            <summary>
            Operator to multiply a vector by a scalar value.
            </summary>
            <param name="left">Vector to multiply with.</param>
            <param name="scalar">Scalar value to multiply by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.op_Multiply(System.Single,GorgonLibrary.Vector4D)">
            <summary>
            Operator to multiply a vector by a scalar value.
            </summary>
            <param name="scalar">Scalar value to multiply by.</param>
            <param name="right">Vector to multiply with.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.op_Division(GorgonLibrary.Vector4D,System.Single)">
            <summary>
            Operator to divide a vector by a scalar value.
            </summary>
            <param name="left">Vector to divide.</param>
            <param name="scalar">Scalar value to divide by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.op_Division(GorgonLibrary.Vector4D,GorgonLibrary.Vector4D)">
            <summary>
            Operator to divide a vector by another vector.
            </summary>
            <param name="left">Vector to divide.</param>
            <param name="right">Vector to divide by.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.op_Implicit(GorgonLibrary.Vector2D)~GorgonLibrary.Vector4D">
            <summary>
            Operator to convert a 2D vector into a 4D vector.
            </summary>
            <param name="vector">2D vector.</param>
            <returns>4D vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.op_Implicit(GorgonLibrary.Vector3D)~GorgonLibrary.Vector4D">
            <summary>
            Operator to convert a 3D vector into a 4D vector.
            </summary>
            <param name="vector">3D vector</param>
            <returns>4D vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.op_Explicit(GorgonLibrary.Vector4D)~GorgonLibrary.Vector3D">
            <summary>
            Operator to convert a 4D vector into a 3D vector.
            </summary>
            <param name="vector">4D vector to convert.</param>
            <returns>3D vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.op_Explicit(GorgonLibrary.Vector4D)~GorgonLibrary.Vector2D">
            <summary>
            Operator to convert a 4D vector into a 2D vector.
            </summary>
            <param name="vector">4D vector to convert.</param>
            <returns>2D vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Vector4D.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="x">Horizontal position of the vector.</param>
            <param name="y">Vertical posiition of the vector.</param>
            <param name="z">Depth position of the vector.</param>
            <param name="w">W component of the vector.</param>
        </member>
        <member name="P:GorgonLibrary.Vector4D.Length">
            <summary>
            Property to return the length of this vector.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector4D.LengthSquare">
            <summary>
            Property to return the length of this vector squared.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector4D.InverseLength">
            <summary>
            Property to return the inverse length of this vector.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector4D.Zero">
            <summary>
            Property to return a zeroed vector.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector4D.Unit">
            <summary>
            Property to return a unit vector (1,1,1,1).
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector4D.UnitX">
            <summary>
            Property to return a unit vector for the X axis (1,0,0,1).
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector4D.UnitY">
            <summary>
            Property to return a unit vector for the Y axis (0,1,0,1).
            </summary>
        </member>
        <member name="P:GorgonLibrary.Vector4D.UnitZ">
            <summary>
            Property to return a unit vector for the X axis (0,0,1,1).
            </summary>
        </member>
        <member name="T:GorgonLibrary.PlatformID">
            <summary>
            Enumeration containing platform IDs.
            </summary>
        </member>
        <member name="F:GorgonLibrary.PlatformID.Unknown">
            <summary>Unknown platform.</summary>
        </member>
        <member name="F:GorgonLibrary.PlatformID.x86">
            <summary>x86 32-bit architecture.</summary>
        </member>
        <member name="F:GorgonLibrary.PlatformID.x64">
            <summary>x64 64-bit architecture.</summary>
        </member>
        <member name="T:GorgonLibrary.Gorgon">
            <summary>
            The primary interface into gorgon.
            </summary>
            <remarks>This interface handles the initialization of Gorgon from internal data structures to the video mode to be used.  Users should call <see cref="M:GorgonLibrary.Gorgon.Initialize">Gorgon.Initialize</see> before doing anything
            and call <see cref="M:GorgonLibrary.Gorgon.Terminate">Gorgon.Terminate</see> when finished.<para>This static class is used to change the global states of objects such as a global rendering setting to which render target is current.
            It will also control the execution and rendering flow for the application.
            </para></remarks>
        </member>
        <member name="M:GorgonLibrary.Gorgon.Run(System.Object,System.EventArgs)">
            <summary>
            Function to actually do processing for the application.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:GorgonLibrary.Gorgon.OnDriverChanging(GorgonLibrary.DriverChangingArgs)">
            <summary>
            Function to trigger driver changing event.
            </summary>
            <param name="e">Parameters for event.</param>
        </member>
        <member name="M:GorgonLibrary.Gorgon.OnDriverChanged(GorgonLibrary.DriverChangedArgs)">
            <summary>
            Function to trigger driver changing event.
            </summary>
            <param name="e">Parameters for event.</param>
        </member>
        <member name="M:GorgonLibrary.Gorgon.OnIdle(System.Object,GorgonLibrary.Graphics.FrameEventArgs)">
            <summary>
            Function to trigger the idle event.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Frame arguments.</param>
        </member>
        <member name="M:GorgonLibrary.Gorgon.OnDeviceLost">
            <summary>
            Function to call the device lost event.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Gorgon.OnDeviceReset">
            <summary>
            Functio to call the device reset event.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Gorgon.IsRenderTargetActive(GorgonLibrary.Graphics.RenderTarget)">
            <summary>
            Function to determine if a render target is active.
            </summary>
            <param name="target">Target to check.</param>
            <returns>TRUE if the render target is active, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Gorgon.SetAdditionalRenderTarget(System.Int32,GorgonLibrary.Graphics.RenderTarget)">
            <summary>
            Function to set additional render targets.
            </summary>
            <param name="index">An index value from 0 to <see cref="P:GorgonLibrary.Driver.MaximumSimultaneousRenderTargets">Driver.MaximumSimultaneousRenderTargets</see>-1.</param>
            <param name="target">A render target to bind to the index.</param>
            <remarks>This will allow the user to set more than one render target at a time for simultaneous rendering.  Please note that using multiple render targets is only supported when
            using shaders.
            <para>An index of 0 will set the current primary render target which is identical to using <see cref="P:GorgonLibrary.Gorgon.CurrentRenderTarget">Gorgon.CurrentRenderTarget</see>.</para>
            <para>There are some limitations to setting multiple render targets:  The render targets should have the same width and height.  They can use a different 
            <see cref="T:GorgonLibrary.Graphics.ImageBufferFormats">image format</see> but the image formats of the targets must have the same bit count.  This restriction is lifted for 
            devices that have <see cref="P:GorgonLibrary.Driver.SupportMRTIndependentBitDepths">Driver.SupportMRTIndepenedentBitDepths</see> set to true.</para>
            <para>If <see cref="P:GorgonLibrary.Driver.SupportMRTPostPixelShaderBlending">Driver.SupportMRTPostPixelShaderBlending</see> is true then post pixel shader blending operations can 
            be performed by the video card.  However, if it is supported, the render target must queried to see if it will support post pixel shader blending operations via 
            the <see cref="P:GorgonLibrary.Graphics.RenderTarget.IsValidForMRTPostPixelShaderBlending">RenderTarget.IsValidForMRTPostPixelShaderBlending</see> property.</para>
            <para>Passing NULL (Nothing in Visual Basic) with an index of 0 will set the render target to the <see cref="P:GorgonLibrary.Gorgon.Screen">Gorgon.Screen</see> render target.</para>
            </remarks>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when <see cref="M:GorgonLibrary.Gorgon.Initialize">Gorgon.Initialize</see> has not been called, 
            <see cref="M:GorgonLibrary.Gorgon.SetMode(System.Windows.Forms.Control,System.Int32,System.Int32,GorgonLibrary.BackBufferFormats,System.Boolean,System.Boolean,System.Boolean,System.Int32,GorgonLibrary.VSyncIntervals)">Gorgon.SetMode</see> wasn't called or the target cannot be bound.</exception>
        </member>
        <member name="M:GorgonLibrary.Gorgon.GetAdditionalRenderTarget(System.Int32)">
            <summary>
            Function to return an additional render target from the active render target list.
            </summary>
            <param name="index">An index value from 0 to <see cref="P:GorgonLibrary.Driver.MaximumSimultaneousRenderTargets">Driver.MaximumSimultaneousRenderTargets</see>-1.</param>
            <returns>The render target at the specified index.</returns>
        </member>
        <member name="M:GorgonLibrary.Gorgon.CloseMode">
            <summary>
            Function to close the currently active video mode.
            </summary>
            <remarks>Some resources may have to be re-loaded or re-created when this function is called and another call to SetMode is made.</remarks>
        </member>
        <member name="M:GorgonLibrary.Gorgon.SetMode(System.Windows.Forms.Control,System.Int32,System.Int32,GorgonLibrary.BackBufferFormats,System.Boolean,System.Boolean,System.Boolean,System.Int32,GorgonLibrary.VSyncIntervals)">
            <summary>
            Function to set the video mode and primary rendering window.
            </summary>
            <remarks>
            When this function is successful it will create a new <see cref="T:GorgonLibrary.Graphics.PrimaryRenderWindow">PrimaryRenderWindow</see> and assign it to the <see cref="P:GorgonLibrary.Gorgon.Screen">Screen</see> property, and will bind the primary render target to its owner control.
            <para>If the client size of the owning control does not match the width and height passed in to the function and the windowed parameter is TRUE, and the owning control is a Form, then the client size of the form will be adjusted to match that of the width and height passed in.  If the owning control is not a form, then the width and height will adjusted to the client size of the owning control.</para>
            	<para>When in windowed mode, the vsync parameter and refresh rate parameter will be ignored.</para>
            	<para>When going to full screen mode the width and height must match one of the video modes listed in the <see cref="P:GorgonLibrary.Driver.VideoModes">CurrentDriver.VideoModes</see> list.  If not, an exception will be thrown.</para>
            </remarks>
            <param name="owner">Control that will be bound to the <see cref="T:GorgonLibrary.Graphics.PrimaryRenderWindow">PrimaryRenderWindow</see> and will be the initial canvas to receive drawing commands.</param>
            <param name="width">Width of the video mode.</param>
            <param name="height">Height of the video mode.</param>
            <param name="format">Buffer format for the video mode.</param>
            <param name="windowed">TRUE to use windowed mode, FALSE to go fullscreen.</param>
            <param name="usedepth">TRUE to create a depth buffer, FALSE to not create.</param>
            <param name="usestencil">TRUE to create a stencil buffer, FALSE to not create.</param>
            <param name="refresh">Refresh rate of the video mode.</param>
            <param name="vSyncInterval">V-sync interval for presentation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when NULL is passed in for the owner parameter.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when a video device object could not be created.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when full screen mode is chosen and the video mode does not match a video mode on the <see cref="P:GorgonLibrary.Driver.VideoModes">CurrentDriver.VideoModes</see> list.  Can also be thrown if the desktop video mode does not support hardware acceleration.</exception>
        </member>
        <member name="M:GorgonLibrary.Gorgon.SetMode(System.Windows.Forms.Control,System.Int32,System.Int32,GorgonLibrary.BackBufferFormats,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Function to set the video mode and primary rendering window.
            </summary>
            <remarks>
            When this function is successful it will create a new <see cref="T:GorgonLibrary.Graphics.PrimaryRenderWindow">PrimaryRenderWindow</see> and assign it to the <see cref="P:GorgonLibrary.Gorgon.Screen">Screen</see> property, and will bind the primary render target to its owner control.
            <para>If the client size of the owning control does not match the width and height passed in to the function and the windowed parameter is TRUE, and the owning control is a Form, then the client size of the form will be adjusted to match that of the width and height passed in.  If the owning control is not a form, then the width and height will adjusted to the client size of the owning control.</para>
            	<para>When in windowed mode, the vsync parameter and refresh rate parameter will be ignored.</para>
            	<para>When going to full screen mode the width and height must match one of the video modes listed in the <see cref="P:GorgonLibrary.Driver.VideoModes">CurrentDriver.VideoModes</see> list.  If not, an exception will be thrown.</para>
            <para>This overload of the function will default to <see cref="T:GorgonLibrary.VSyncIntervals">VSyncIntervals.None</see>.</para>
            </remarks>
            <param name="owner">Control that will be bound to the <see cref="T:GorgonLibrary.Graphics.PrimaryRenderWindow">PrimaryRenderWindow</see> and will be the initial canvas to receive drawing commands.</param>
            <param name="width">Width of the video mode.</param>
            <param name="height">Height of the video mode.</param>		
            <param name="format">Buffer format for the video mode.</param>
            <param name="windowed">TRUE to use windowed mode, FALSE to go fullscreen.</param>		
            <param name="usedepth">TRUE to create a depth buffer, FALSE to not create.</param>
            <param name="usestencil">TRUE to create a stencil buffer, FALSE to not create.</param>
            <param name="refresh">Refresh rate of the video mode.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when NULL is passed in for the owner parameter.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when a video device object could not be created.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when full screen mode is chosen and the video mode does not match a video mode on the <see cref="P:GorgonLibrary.Driver.VideoModes">CurrentDriver.VideoModes</see> list.  Can also be thrown if the desktop video mode does not support hardware acceleration.</exception>
        </member>
        <member name="M:GorgonLibrary.Gorgon.SetMode(System.Windows.Forms.Control,System.Int32,System.Int32,GorgonLibrary.BackBufferFormats,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Function to set the video mode and primary rendering window.
            </summary>
            <remarks>
            When this function is successful it will create a new <see cref="T:GorgonLibrary.Graphics.PrimaryRenderWindow">PrimaryRenderWindow</see> and assign it to the <see cref="P:GorgonLibrary.Gorgon.Screen">Screen</see> property, and will bind the primary render target to its owner control.
            <para>If the client size of the owning control does not match the width and height passed in to the function and the windowed parameter is TRUE, and the owning control is a Form, then the client size of the form will be adjusted to match that of the width and height passed in.  If the owning control is not a form, then the width and height will adjusted to the client size of the owning control.</para>
            	<para>When going to full screen mode the width and height must match one of the video modes listed in the <see cref="P:GorgonLibrary.Driver.VideoModes">CurrentDriver.VideoModes</see> list.  If not, an exception will be thrown.</para>
            <para>This overload of the function will use a default refresh rate of 60Hz and will default to <see cref="T:GorgonLibrary.VSyncIntervals">VSyncIntervals.None</see>.</para>
            </remarks>
            <param name="owner">Control that will be bound to the <see cref="T:GorgonLibrary.Graphics.PrimaryRenderWindow">PrimaryRenderWindow</see> and will be the initial canvas to receive drawing commands.</param>
            <param name="width">Width of the video mode.</param>
            <param name="height">Height of the video mode.</param>		
            <param name="format">Buffer format for the video mode.</param>
            <param name="windowed">TRUE to use windowed mode, FALSE to go fullscreen.</param>		
            <param name="usedepth">TRUE to create a depth buffer, FALSE to not create.</param>
            <param name="usestencil">TRUE to create a stencil buffer, FALSE to not create.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when NULL is passed in for the owner parameter.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when a video device object could not be created.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when full screen mode is chosen and the video mode does not match a video mode on the <see cref="P:GorgonLibrary.Driver.VideoModes">CurrentDriver.VideoModes</see> list.  Can also be thrown if the desktop video mode does not support hardware acceleration.</exception>
        </member>
        <member name="M:GorgonLibrary.Gorgon.SetMode(System.Windows.Forms.Control,System.Int32,System.Int32,GorgonLibrary.BackBufferFormats,System.Boolean)">
            <summary>
            Function to set the video mode and primary rendering window.
            </summary>
            <remarks>
            When this function is successful it will create a new <see cref="T:GorgonLibrary.Graphics.PrimaryRenderWindow">PrimaryRenderWindow</see> and assign it to the <see cref="P:GorgonLibrary.Gorgon.Screen">Screen</see> property, and will bind the primary render target to its owner control.
            <para>If the client size of the owning control does not match the width and height passed in to the function and the windowed parameter is TRUE, and the owning control is a Form, then the client size of the form will be adjusted to match that of the width and height passed in.  If the owning control is not a form, then the width and height will adjusted to the client size of the owning control.</para>
            	<para>When in windowed mode, the vsync parameter and refresh rate parameter will be ignored.</para>
            	<para>When going to full screen mode the width and height must match one of the video modes listed in the <see cref="P:GorgonLibrary.Driver.VideoModes">CurrentDriver.VideoModes</see> list.  If not, an exception will be thrown.</para>
            <para>This overload of the function will use a default refresh rate of 60Hz and will default to <see cref="T:GorgonLibrary.VSyncIntervals">VSyncIntervals.None</see>.  Stencil and depth buffers will not be created with this function.</para>		
            </remarks>
            <param name="owner">Control that will be bound to the <see cref="T:GorgonLibrary.Graphics.PrimaryRenderWindow">PrimaryRenderWindow</see> and will be the initial canvas to receive drawing commands.</param>
            <param name="width">Width of the video mode.</param>
            <param name="height">Height of the video mode.</param>		
            <param name="format">Buffer format for the video mode.</param>
            <param name="windowed">TRUE to use windowed mode, FALSE to go fullscreen.</param>		
            <exception cref="T:System.ArgumentNullException">Thrown when NULL is passed in for the owner parameter.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when a video device object could not be created.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when full screen mode is chosen and the video mode does not match a video mode on the <see cref="P:GorgonLibrary.Driver.VideoModes">CurrentDriver.VideoModes</see> list.  Can also be thrown if the desktop video mode does not support hardware acceleration.</exception>
        </member>
        <member name="M:GorgonLibrary.Gorgon.SetMode(System.Windows.Forms.Control,System.Int32,System.Int32,GorgonLibrary.BackBufferFormats)">
            <summary>
            Function to set the video mode and primary rendering window.
            </summary>
            <remarks>
            When this function is successful it will create a new <see cref="T:GorgonLibrary.Graphics.PrimaryRenderWindow">PrimaryRenderWindow</see> and assign it to the <see cref="P:GorgonLibrary.Gorgon.Screen">Screen</see> property, and will bind the primary render target to its owner control.		
            <para>This overload will default to full screen mode.</para>
            	<para>The width and height must match one of the video modes listed in the <see cref="P:GorgonLibrary.Driver.VideoModes">CurrentDriver.VideoModes</see> list.  If not, an exception will be thrown.</para>
            <para>This overload of the function will use a default refresh rate of 60Hz and will default to <see cref="T:GorgonLibrary.VSyncIntervals">VSyncIntervals.None</see>.  Stencil and depth buffers will not be created with this function</para>		
            </remarks>
            <param name="owner">Control that will be bound to the <see cref="T:GorgonLibrary.Graphics.PrimaryRenderWindow">PrimaryRenderWindow</see> and will be the initial canvas to receive drawing commands.</param>
            <param name="width">Width of the video mode.</param>
            <param name="height">Height of the video mode.</param>		
            <param name="format">Buffer format for the video mode.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when NULL is passed in for the owner parameter.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when a video device object could not be created.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when full screen mode is chosen and the video mode does not match a video mode on the <see cref="P:GorgonLibrary.Driver.VideoModes">CurrentDriver.VideoModes</see> list.  Can also be thrown if the desktop video mode does not support hardware acceleration.</exception>
        </member>
        <member name="M:GorgonLibrary.Gorgon.SetMode(System.Windows.Forms.Control)">
            <summary>
            Function to set the video mode and primary rendering window.
            </summary>
            <remarks>
            When this function is successful it will create a new <see cref="T:GorgonLibrary.Graphics.PrimaryRenderWindow">PrimaryRenderWindow</see> and assign it to the <see cref="P:GorgonLibrary.Gorgon.Screen">Screen</see> property, and will bind the primary render target to its owner control.
            <para>In this overload of the function the width and height of the video mode are set to the client width and height of the owner control.  The video mode will also be forced into windowed mode and the format will be set to the desktop video mode format.</para>
            </remarks>
            <param name="owner">Control that will be bound to the <see cref="T:GorgonLibrary.Graphics.PrimaryRenderWindow">PrimaryRenderWindow</see> and will be the initial canvas to receive drawing commands.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when NULL is passed in for the owner parameter.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when a video device object could not be created.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when full screen mode is chosen and the video mode does not match a video mode on the <see cref="P:GorgonLibrary.Driver.VideoModes">CurrentDriver.VideoModes</see> list.  Can also be thrown if the desktop video mode does not support hardware acceleration.</exception>
        </member>
        <member name="M:GorgonLibrary.Gorgon.Go">
            <summary>
            Function to start the engine rendering.
            </summary>
            <remarks>The application does not begin rendering right away when this function is called, it merely tells the library that the application is ready for rendering to begin when it's ready.</remarks>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when <see cref="M:GorgonLibrary.Gorgon.Initialize">Gorgon.Initialize()</see> has not been called.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:GorgonLibrary.Gorgon.SetMode(System.Windows.Forms.Control,System.Int32,System.Int32,GorgonLibrary.BackBufferFormats,System.Boolean,System.Boolean,System.Boolean,System.Int32,GorgonLibrary.VSyncIntervals)">SetMode()</see> has not been called.</exception>		
        </member>
        <member name="M:GorgonLibrary.Gorgon.Stop">
            <summary>
            Function to stop the engine from rendering.
            </summary>
            <remarks>
            This will merely stop the rendering process, it can be restarted with the <see cref="M:GorgonLibrary.Gorgon.Go">Go()</see> function.
            <para>Note that this function does -not- affect the video mode.</para>
            </remarks>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when <see cref="M:GorgonLibrary.Gorgon.Initialize">Gorgon.Initialize()</see> has not been called.</exception>
        </member>
        <member name="M:GorgonLibrary.Gorgon.ProcessMessages">
            <summary>
            Function to force the application to process any pending messages.
            </summary>
            <remarks>This function should be used when control over the message loop is necessary.</remarks>
        </member>
        <member name="M:GorgonLibrary.Gorgon.Initialize">
            <summary>
            Function to initialize Gorgon.
            </summary>
            <remarks>This function must be called before any other function.  This is because it will setup support data for use by Gorgon and its various objects.</remarks>
        </member>
        <member name="M:GorgonLibrary.Gorgon.Initialize(System.Boolean,System.Boolean)">
            <summary>
            Function to initialize Gorgon.
            </summary>
            <param name="allowBackgroundRender">TRUE to allow rendering when the application loses focus, FALSE to suspend rendering.</param>
            <param name="allowScreenSaver">TRUE to allow the screen saver to run, FALSE to suspend it.</param>
            <remarks>This function must be called before any other function.  This is because it will setup support data for use by Gorgon and its various objects.</remarks>
        </member>
        <member name="M:GorgonLibrary.Gorgon.Initialize(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Function to initialize Gorgon.
            </summary>
            <param name="allowBackgroundRender">TRUE to allow rendering when the application loses focus, FALSE to suspend rendering.</param>
            <param name="allowScreenSaver">TRUE to allow the screen saver to run, FALSE to suspend it.</param>
            <param name="checkDriverWHQL">TRUE to check for WHQL information, FALSE to ignore.</param>
            <remarks>This function must be called before any other function.  This is because it will setup support data for use by Gorgon and its various objects.</remarks>
        </member>
        <member name="M:GorgonLibrary.Gorgon.Terminate">
            <summary>
            Function to terminate Gorgon.
            </summary>
            <remarks>
            You must call this when finished with Gorgon, failure to do so can result in memory leaks.
            <para>This function will call <see cref="M:GorgonLibrary.Gorgon.CloseMode">CloseMode</see> implicitly.</para>
            </remarks>
        </member>
        <member name="E:GorgonLibrary.Gorgon.DriverChanging">
            <summary>Event fired when a driver is currently being changed.</summary>
        </member>
        <member name="E:GorgonLibrary.Gorgon.DriverChanged">
            <summary>Event fired when a driver has changed.</summary>
        </member>
        <member name="E:GorgonLibrary.Gorgon.DeviceReset">
            <summary>Event fired when the device has been reset from a lost state.</summary>
            <example>
            An example of handling a resize of a render target after the window has been resized:
            <code>
            RenderImage myRenderTarget = null;	// Our render target.
            
            public void DeviceReset(object sender, EventArgs e)
            {
               // Reize our render target to match the new dimensions of the screen.
               myRenderTarget.SetDimensions(Gorgon.Screen.Width, Gorgon.Screen.Height);
            }
            
            public void Main()
            {
               // Do stuff, etc...
            
               // Create a render target that is the same size as our screen.
               myRenderTarget = RenderTarget.CreateRenderImage("MyTarget", Gorgon.Screen.Width, Gorgon.Screen.Height)
               Gorgon.DeviceReset += new EventHandler(DeviceReset);
            }
            </code>
            </example>
            <remarks>
            A number of events can put the device into a lost state.  For example, resizing the control that is bound to the primary render window.
            <para>Some objects will need to be re-created during a device loss/reset event.  In this event you put in the code to rebuild the object that needs to be reset.  
            </para>
            </remarks>
        </member>
        <member name="E:GorgonLibrary.Gorgon.DeviceLost">
            <summary>Event fired when the device has been put into a lost state.</summary>
            <remarks>
            A number of events can put the device into a lost state.  For example, resizing the control that is bound to the primary render window.
            <para>Some objects will need to be re-created during a device loss/reset event.  In this event you put in clean up code to remove data for objects that need to be reset.</para>
            </remarks>		
        </member>
        <member name="E:GorgonLibrary.Gorgon.Idle">
            <summary>
            Event fired when rendering begins for a new frame.
            </summary>
            <remarks>This event is where all the application logic and drawing should take place.  It is called once per frame and will return frame statistics to help with things like keeping sprite transformation speed independant of the processor speed.</remarks>
        </member>
        <member name="P:GorgonLibrary.Gorgon.AppIdle">
            <summary>
            Property to return if an application is in an idle state or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Gorgon.HasFocus">
            <summary>
            Property to return if the application has focus.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Gorgon.Direct3D">
            <summary>
            Property to return the Direct 3D interface.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Gorgon.Renderer">
            <summary>
            Property to set or return the renderer interface.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Gorgon.Platform">
            <summary>
            Property to return the platform that this instance of Gorgon was compiled for.
            </summary>
            <remarks>When the library is compiled for 64-bit processors, then this will read x64, otherwise it'll be x86.  If the platform cannot be determined it will return unknown.</remarks>
        </member>
        <member name="P:GorgonLibrary.Gorgon.FrameStatsTextColor">
            <summary>
            Property to set or return the frame statistics text color.
            </summary>
            <remarks>This only applies if <see cref="P:GorgonLibrary.Gorgon.FrameStatsVisible">FrameStatsVisible</see> is TRUE.</remarks>
            <value>The color of the text for the frame statistics.</value>
        </member>
        <member name="P:GorgonLibrary.Gorgon.FastResize">
            <summary>
            Property to set or return whether or not the resizing the window will reset the display.
            </summary>
            <remarks>
            When TRUE, the contents of the window client area will be stretched to match the size of the resized client area.  However, no actual change to the <see cref="T:GorgonLibrary.VideoMode">video mode</see> will be made.  If it was set to 640x480 before the resizing, the screen dimensions after resizing the window will still be 640x480.  This will produce a blurry looking image when resized larger than the previous size.  When fast resizing is enabled, all resources are preserved because there was no actual change to the video device.
            <para>If FALSE, then the device will undergo a reset operation and the video mode will be adjusted to match the new client size of the owning control/window.  This will keep the sharpness of the rendered image regardless of the client size of the control/window. The caveat is that some resources will need to be re-loaded/re-created when the device reset occurs.  This is the exact behaviour of the system when a full screen application loses and regains focus.  Furthermore, window resizing will be much slower (hence the "Fast" portion of FastResize). </para>
            </remarks>
            <value>TRUE will enable a fast resizing, FALSE will disable it.</value>
        </member>
        <member name="P:GorgonLibrary.Gorgon.LogoVisible">
            <summary>
            Property to set or return whether the logo is shown or not.
            </summary>
            <value>TRUE to show the Gorgon logo in the lower right corner of the screen while rendering, FALSE to hide.</value>
        </member>
        <member name="P:GorgonLibrary.Gorgon.FrameStatsVisible">
            <summary>
            Property to set or return whether the frame timing data is shown or not.
            </summary>
            <value>TRUE to show the current frame statistics (i.e. Frames Per Second, frame delta time, etc...) in the upper left corner of the screen while rendering.  FALSE to hide.</value>
        </member>
        <member name="P:GorgonLibrary.Gorgon.ClearEachFrame">
            <summary>
            Property to set or return which buffers are cleared per frame.
            </summary>
            <example>
            To clear the back buffer and depth buffer, you should specify:
            <code>
            gorgonObject.ClearEachFrame = ClearTargets.BackBuffer | ClearTargets.DepthBuffer;
            </code>
            </example>
            <example>
            To clear no buffers:
            <code>
            gorgonObject.ClearEachFrame = ClearTargets.None;
            </code>
            </example>
            <remarks>
            All the <seealso cref="T:GorgonLibrary.ClearTargets">ClearTargets</seealso> fields are inclusive, except the ClearTargets.None.  
            Setting the field to None will tell the system that no buffers are to be cleared.
            <para>
            Clearing the buffer(s) each frame can be an expensive process, especially on computers not equipped with the latest and greatest hardware.  Thus, for optimization, it's best to clear only what you need.  If you aren't making use of your stencil buffer, then don't bother to clear it each frame and so forth.
            </para>
            </remarks>
            <value>
            Set to one or a combination of the <see cref="T:GorgonLibrary.ClearTargets">ClearTargets</see> fields to tell the system which buffers should be cleared each frame.
            <para>
            The property can be set to one or more of:
            <list type="table">
            			<listheader>
            				<term>Buffer type.</term>
            				<description>Action.</description>
            			</listheader>
            			<item>
            				<term>None</term>
            				<description>Don't clear any buffers.  This flag cannot be used in conjunction with any of the other flags.</description>
            			</item>
            			<item>
            				<term>BackBuffer</term>
            				<description>Clear the back buffer.</description>
            			</item>
            			<item>
            				<term>DepthBuffer</term>
            				<description>Clear the depth buffer.</description>
            			</item>
            			<item>
            				<term>StencilBuffer</term>
            				<description>Clear the stencil buffer.</description>
            			</item>
            		</list>
            	</para>
            </value>
        </member>
        <member name="P:GorgonLibrary.Gorgon.GlobalStateSettings">
            <summary>
            Property to return the render state cache for renderables.
            </summary>
            <example>
            To turn off blending for all sprites except the sprite named Bob we can do the following:
            <code>
            Sprite Bob;
            Sprite Joe;
            Sprite Blah;
            
            // ... Time passes ... stuff is done, a grue eats someone, etc...
            
            Gorgon.GlobalStateSettings.GlobalBlending = BlendingModes.None;
            // Keep the normal blending for the Bob sprite.
            Bob.BlendingMode = BlendingModes.Normal;
            </code>
            </example>
            <remarks>Changing the states in this property will result in that state being applied to all renderable objects.  The exception to this is when the state has been changed directly on the renderable object itself.</remarks>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when <see cref="M:GorgonLibrary.Gorgon.Initialize">Gorgon.Initialize()</see> has not been called.</exception>
            <value>A list of global settings that <see cref="T:GorgonLibrary.Graphics.Sprite">sprites</see> and <see cref="T:GorgonLibrary.Graphics.TextSprite">text sprites</see> will use as initial and inherited values.</value>		
        </member>
        <member name="P:GorgonLibrary.Gorgon.CurrentClippingViewport">
            <summary>
            Property to set or return the currently active clipping viewport.
            </summary>
            <remarks>
            Use this property to clip any drawing outside of the rectangle region specified.  
            <para>Setting this property to NULL will set the clipping viewport dimensions to the size of the current render target dimensions.</para>
            </remarks>
            <value>A rectangular region that defines what area of the screen (or other render target) to update.</value>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when <see cref="M:GorgonLibrary.Gorgon.Initialize">Gorgon.Initialize()</see> has not been called.</exception>
        </member>
        <member name="P:GorgonLibrary.Gorgon.CurrentVideoMode">
            <summary>
            Property to return information about the current video mode.
            </summary>
            <remarks>If a video mode has not been set, and <see cref="M:GorgonLibrary.Gorgon.Initialize">Gorgon.Initialize()</see> has been called, then the current desktop video mode is returned instead.</remarks>
            <value>The currently active <see cref="T:GorgonLibrary.VideoMode">video mode</see> information.</value>
        </member>
        <member name="P:GorgonLibrary.Gorgon.CurrentShader">
            <summary>
            Property to set or return the currently active shader.
            </summary>
            <remarks>Use this to apply a shader to the rendering pass.  You can apply either a <see cref="T:GorgonLibrary.Graphics.Shader"/>, <see cref="T:GorgonLibrary.Graphics.ShaderTechnique"/> or a <see cref="T:GorgonLibrary.Graphics.ShaderPass"/>.  
            When applying a shader there's a very small performance hit on the first pass of rendering as it attempts to locate the first valid shader technique.</remarks>
            <value>A shader renderer output to apply to the scene when rendering.</value>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when <see cref="M:GorgonLibrary.Gorgon.Initialize">Gorgon.Initialize()</see> has not been called.
            <para>Thrown when <see cref="M:GorgonLibrary.Gorgon.SetMode(System.Windows.Forms.Control,System.Int32,System.Int32,GorgonLibrary.BackBufferFormats,System.Boolean,System.Boolean,System.Boolean,System.Int32,GorgonLibrary.VSyncIntervals)">Gorgon.SetMode()</see> has not been called.</para>
            </exception>
        </member>
        <member name="P:GorgonLibrary.Gorgon.CurrentRenderTarget">
            <summary>
            Property to set or return the currently active render target.
            </summary>
            <remarks>
            Use this to change where sprites, primitives and text will be drawn.  This will allow for objects to be drawn off-screen or into another control that's bound with a <see cref="T:GorgonLibrary.Graphics.RenderWindow">RenderWindow</see>.
            <para>
            Set this property to NULL to continue drawing to the primary screen.</para>
            	<para>Please note that when the render target is switched the <see cref="P:GorgonLibrary.Gorgon.CurrentClippingViewport">clipping viewport</see> is reset to the size of the render target being assigned.</para>
            </remarks>
            <seealso cref="M:GorgonLibrary.Gorgon.SetAdditionalRenderTarget(System.Int32,GorgonLibrary.Graphics.RenderTarget)">SetAdditionalRenderTarget</seealso>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when <see cref="M:GorgonLibrary.Gorgon.Initialize">Gorgon.Initialize()</see> has not been called.<para>
            Thrown when <see cref="M:GorgonLibrary.Gorgon.SetMode(System.Windows.Forms.Control,System.Int32,System.Int32,GorgonLibrary.BackBufferFormats,System.Boolean,System.Boolean,System.Boolean,System.Int32,GorgonLibrary.VSyncIntervals)">Gorgon.SetMode()</see> has not been called.</para></exception>
        </member>
        <member name="P:GorgonLibrary.Gorgon.Screen">
            <summary>
            Property to return the primary rendering window.
            </summary>
            <remarks>
            There is only one of these <see cref="T:GorgonLibrary.Graphics.PrimaryRenderWindow">PrimaryRenderWindow</see> objects active at any given time.  Other controls that have render targets use <see cref="T:GorgonLibrary.Graphics.RenderWindow">RenderWindow</see> objects.
            <para>When the primary video mode bound to the control is closed, then all other render targets are automatically destroyed.</para>
            </remarks>
            <value>The primary rendering window or the "Screen".  This can be any control and is the primary render target that is setup during the <see cref="M:GorgonLibrary.Gorgon.SetMode(System.Windows.Forms.Control,System.Int32,System.Int32,GorgonLibrary.BackBufferFormats,System.Boolean,System.Boolean,System.Boolean,System.Int32,GorgonLibrary.VSyncIntervals)">SetMode()</see> function.  As such, this is the initial render target when a video mode is set.</value>
        </member>
        <member name="P:GorgonLibrary.Gorgon.DesktopVideoMode">
            <summary>
            Property to return the video mode information for the desktop.
            </summary>
            <remarks></remarks>
            <value>The desktop <see cref="T:GorgonLibrary.VideoMode">video mode</see> information.</value>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when <see cref="M:GorgonLibrary.Gorgon.Initialize">Gorgon.Initialize()</see> has not been called.</exception>
        </member>
        <member name="P:GorgonLibrary.Gorgon.FrameStats">
            <summary>
            Property to return the current frame timing stats.
            </summary>
            <remarks>This is usually used for internal purposes, please use the <see cref="T:GorgonLibrary.Graphics.FrameEventArgs">FrameEventArgs</see> timing information in the <see cref="M:GorgonLibrary.Idle">Idle event</see> instead.</remarks>
            <value>Returns a <see cref="T:GorgonLibrary.TimingData">TimingData</see> object containing information about the most current frame statistics.</value>
        </member>
        <member name="P:GorgonLibrary.Gorgon.IsInitialized">
            <summary>
            Property to return whether the library has been initialized or not.
            </summary>
            <value>TRUE if <see cref="M:GorgonLibrary.Gorgon.Initialize">Initialize()</see> has been called, FALSE if not.</value>
        </member>
        <member name="P:GorgonLibrary.Gorgon.Log">
            <summary>
            Property to return the logging object.
            </summary>
            <remarks>Usage of this property will require the SharpUtilities library and the SharpUtilities.Utility namespace.</remarks>
            <value>The internal logging interface used by the library.</value>
        </member>
        <member name="P:GorgonLibrary.Gorgon.CurrentDriver">
            <summary>
            Property to set or return the currently active driver.
            </summary>
            <remarks>
            Setting this property to another driver index will make the video mode reset and all data uploaded to the video card (such as textures) will be destroyed and will have to be reset after the video mode has been set again.
            <para>The reason it does this is due to the uncertainty of using multiple video cards: If video card A has only 640x480x16 and video card B has 800x600x32 and 640x480x32, and we are currently using B, then upon switching to A we have to allow the user to change to a video mode that is supported by card A.</para>
            	<para>
            After the driver ID is changed, it is up to the client program to determine if the mode is supported and reset to that mode, else set to a default video mode.
            </para>
            	<para>
            You should confirm how many drivers are installed in the system via the <see cref="T:GorgonLibrary.DriverList">Drivers</see>.Count property before setting the driver index.
            </para>
            </remarks>
            <value>This will get/set the current video driver index, which is ranged from 0 to <see cref="T:GorgonLibrary.DriverList">DriverList</see>.Count - 1.</value>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when <see cref="M:GorgonLibrary.Gorgon.Initialize">Gorgon.Initialize()</see> has not been called.</exception>
        </member>
        <member name="P:GorgonLibrary.Gorgon.Drivers">
            <summary>
            Property to return a list of video drivers available for rendering.
            </summary>
            <remarks>If a driver does not have hardware acceleration, it will not be included in the list.</remarks>
            <value>The list of installed <see cref="T:GorgonLibrary.Driver">video drivers</see>.</value>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when <see cref="M:GorgonLibrary.Gorgon.Initialize">Gorgon.Initialize()</see> has not been called.</exception>
        </member>
        <member name="P:GorgonLibrary.Gorgon.AllowBackgroundRendering">
            <summary>
            Property to set or return a flag that controls background rendering.
            </summary>
            <remarks>
            When this property is set to TRUE the CPU usage will jump to 100% while the application is running.  This is because it will continuously update and receive messages from the system while in the background.  This may cause the system to slow down (if you have a slow video card/CPU) when background rendering is on.
            <para>When the property is set to FALSE, the CPU usage will only be at 100% when the application is in the foreground and will throttle back to 0% when the application is in the background.  This is much more efficient, however the drawback is that the application will not update while in the background.</para>
            </remarks>
            <value>Setting this to TRUE will allow the engine to render while the window is not in the foreground or minimized.  Setting this to FALSE will halt rendering until the window is in the foreground.</value>
        </member>
        <member name="P:GorgonLibrary.Gorgon.IsRunning">
            <summary>
            Property to return if the app is in a running state or not.
            </summary>
            <remarks>This flag is set to TRUE when the <see cref="M:GorgonLibrary.Gorgon.Go">Go()</see> function is called and FALSE when the <see cref="M:GorgonLibrary.Gorgon.Stop">Stop()</see> function is called.</remarks>
            <value>TRUE if the application is running, and FALSE if not.</value>
        </member>
        <member name="P:GorgonLibrary.Gorgon.AllowScreenSaver">
            <summary>
            Property to set or return whether we want to allow a screensaver to run or not.
            </summary>
            <remarks>
            When this property is set to TRUE all power management/screen saver functionality will be suspended while the application is running.  
            <para>
            Due to an unknown reason (presumably this is for security purposes) in Windows, when the screensaver is set to return to the login/welcome screen after its deactivated the application will NOT suspend the screensaver/power management.  There currently is no workaround for this, however if you know of one, send the author an email explaining how to circumvent this.
            </para>
            </remarks>
            <value>Set this property to TRUE if you wish to allow the screensaver/power management to kick in.  Set to FALSE if you want to suspend the screensaver/power management.</value>
        </member>
        <member name="P:GorgonLibrary.Gorgon.MinimumFrameTime">
            <summary>
            Property to set or return the minimum amount of time to wait between frames (in milliseconds).
            </summary>
            <example>
            The following code will limit the frame rate to 30 FPS:
            <code>
            Gorgon.MinimumFrameTime = PreciseTimer.FpsToMilliseconds(30);
            </code>
            </example>
            <remarks>
            This can be used as a frame rate limiting mechanism.  By stalling for the appropriate number of milliseconds before the frame is rendered the frame rate can be kept at a desired level.
            <para>The static function <see cref="M:GorgonLibrary.PreciseTimer.FpsToMilliseconds(System.Double)">PreciseTimer.FpsToMilliseconds</see> can be used to determine how many milliseconds are required for a particular frame rate.</para>
            </remarks>
            <value>This number will pause the renderer for the number of milliseconds requested before rendering the frame.  The lowest value that can be set is 0.001.</value>
        </member>
        <member name="T:GorgonLibrary.Gorgon.SysMessageFilter">
            <summary>
            Class to stop screensaver messages.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Gorgon.SysMessageFilter.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Function to trap messages.
            </summary>
            <param name="m">Message data.</param>
            <returns>TRUE if trapped, FALSE if skipped.</returns>
        </member>
        <member name="T:GorgonLibrary.InputDevices.Joystick">
            <summary>
            Object that will represent joystick data.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Joystick.SetAxisData(System.Int32,System.Single)">
            <summary>
            Function to set the data for a specific axis.
            </summary>
            <param name="index">Index of the axis to set.</param>
            <param name="value">Value to set.</param>
            <returns>Axis data.</returns>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Joystick.SetButtonValue(System.Int32,System.Boolean)">
            <summary>
            Function to set the pressed value for a specific button.
            </summary>
            <param name="index">Index of the button to set.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Joystick.PollJoystick">
            <summary>
            Function to poll the joystick for data.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Joystick.SetDeadzone(System.Int32,System.Int32)">
            <summary>
            Function to set or return the dead zone range.
            </summary>
            <param name="axis">Axis to set.</param>
            <param name="deadzoneRange">Range to set for the joystick dead zone.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Joystick.#ctor(System.String,GorgonLibrary.InputDevices.Input)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the joystick.</param>
            <param name="owner">Input interface that owns this joystick.</param>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.POVCount">
            <summary>
            Property to return the number of POV hats.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.DeadZone">
            <summary>
            Property to return the dead zone range.
            </summary>
            <remarks>The dead zone should be within the range of the same axis.  That is, if the axis range is 
            between 0..32767, then the dead zone range should be within 0..32767.  Likewise if the axis has a 
            range of -32767..32767 then the dead zone value should correspond to the range of -32767..32767.  
            <para>Please note that by setting the dead zone to the exact size of the axis range the joystick 
            will not register any movement because the entire range is considered 'dead'.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.Axes">
            <summary>
            Property to return a value for an axis.
            </summary>
            <remarks>This is affected by the <see cref="P:GorgonLibrary.InputDevices.Joystick.DeadZone">DeadZone</see> 
            property.  Any values that fall within the dead zone range are ignored and as such only the mid-point 
            of the axis range will be returned (center position of the axis).</remarks>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.AxisDirection">
            <summary>
            Property to return the direction that an axis is pointed towards.
            </summary>
            <remarks>This is affected by the <see cref="P:GorgonLibrary.InputDevices.Joystick.DeadZone">DeadZone</see> 
            property.  If the axis position is within the dead-zone range only the 
            <see cref="T:GorgonLibrary.InputDevices.JoystickDirections">JoystickDirections.Center</see> position is returned.</remarks>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.POV">
            <summary>
            Property to return the point of view values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.POVDirection">
            <summary>
            Property to return the POV direction.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.Button">
            <summary>
            Property to return a button state.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.X">
            <summary>
            Property to return the x coordinate for the joystick.
            </summary>
            <remarks>This is affected by the <see cref="P:GorgonLibrary.InputDevices.Joystick.DeadZone">DeadZone</see> 
            property.  Any values that fall within the dead zone range are ignored and as such only the mid-point 
            of the X axis range will be returned (center position of the axis).</remarks>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.Y">
            <summary>
            Property to return the y coordinate for the joystick.
            </summary>
            <remarks>This is affected by the <see cref="P:GorgonLibrary.InputDevices.Joystick.DeadZone">DeadZone</see> 
            property.  Any values that fall within the dead zone range are ignored and as such only the mid-point 
            of the Y axis range will be returned (center position of the axis).</remarks>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.Z">
            <summary>
            Property to return the z coordinate for the joystick.
            </summary>
            <remarks>This is affected by the <see cref="P:GorgonLibrary.InputDevices.Joystick.DeadZone">DeadZone</see> 
            property.  Any values that fall within the dead zone range are ignored and as such only the mid-point 
            of the Z axis range will be returned (center position of the axis).</remarks>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.Rudder">
            <summary>
            Property to return the rudder coordinate for the joystick.
            </summary>
            <remarks>This is affected by the <see cref="P:GorgonLibrary.InputDevices.Joystick.DeadZone">DeadZone</see> 
            property.  Any values that fall within the dead zone range are ignored and as such only the mid-point 
            of the rudder range will be returned (center position of the axis).</remarks>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.Name">
            <summary>
            Property to return the name of the joystick.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.AxisCount">
            <summary>
            Property to return the number of axes on the joystick.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.ButtonCount">
            <summary>
            Property to return the number of buttons on the joystick.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.ManufacturerID">
            <summary>
            Property to return the manufacturer ID.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.ProductID">
            <summary>
            Property to return the product ID.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.AxisRanges">
            <summary>
            Property to return a range for particular axis.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.HasRudder">
            <summary>
            Property to return whether the device has a rudder or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.HasPOV">
            <summary>
            Property to return whether the device has a POV hat or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.POVHas4Directions">
            <summary>
            Property to return if the POV hat only has 4 directions or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.UnrestrictedPOV">
            <summary>
            Property to return whether the POV hat is limited to 5 positions or is free floating.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Joystick.HasZAxis">
            <summary>
            Property to return whether the joystick has a Z axis or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.FileSystems.FileSystemProvider">
            <summary>
            Object containing file system type information.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemProvider.GetFileSystemsByProvider">
            <summary>
            Function to return a list of file systems that use a specific provider.
            </summary>
            <returns>The list of providers</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemProvider.CreateFileSystemInstance(System.String)">
            <summary>
            Function to create a file system.
            </summary>
            <param name="name">Name of the file system.</param>
            <returns>A new file system object.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemProvider.Load(System.String,System.String)">
            <summary>
            Function to load a file system provider plug-in.
            </summary>
            <param name="providerPlugInPath">Path to the provider plug-in.</param>
            <param name="plugInName">Name of the file system plug-in.</param>
            <returns>The filesystem plug-in provider.</returns>
            <remarks>This will only load the file system provider if it hasn't already been loaded.<para>The filesystem plugInName is the name of the plug-in within the DLL, not the name of the provider.</para></remarks>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemProvider.Load(System.String)">
            <summary>
            Function to load all file system providers from a plug-in.
            </summary>
            <param name="providerPlugInPath">Path to the provider plug-in.</param>
            <remarks>This will load all file system providers contained within the DLL.</remarks>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemProvider.Create(System.Type)">
            <summary>
            Function to create a file system provider type.
            </summary>
            <param name="providerType">Type of file system provider.</param>
            <returns>The file system provider based on the type passed.</returns>
            <remarks>This will only load the file system provider if it hasn't already been loaded.</remarks>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemProvider.#ctor(GorgonLibrary.FileSystems.FileSystemPlugIn)">
            <summary>
            Constructor.
            </summary>
            <param name="plugin">Plug-in to use for the file system.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemProvider.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="fileSystemType">File system type.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemProvider.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to release all resources, FALSE to only release unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemProvider.Dispose">
            <summary>
            Function to perform clean up.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemProvider.PlugInShared">
            <summary>
            Property to return whether this plug-in is shared with other providers.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemProvider.PlugIn">
            <summary>
            Property to return the plug-in entry point, if one exists.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemProvider.RequireSignedProviderPlugIns">
            <summary>
            Property to set or return whether provider plug-ins need to be signed or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemProvider.ProviderPlugInName">
            <summary>
            Property to return the name of the provider plug-in.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemProvider.PlugInPath">
            <summary>
            Property to return the path for the plug-in that this provider uses.
            </summary>
            <remarks>This will return an empty string if the provider is instanced locally (i.e. not loaded from a plug-in).</remarks>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemProvider.IsPlugIn">
            <summary>
            Property to return whether we're using a plug-in or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemProvider.Type">
            <summary>
            Property to return the file system type.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemProvider.Description">
            <summary>
            Property to return the description of the file system.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemProvider.IsPackedFile">
            <summary>
            Property to return whether this provider uses a packed file or loose files.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemProvider.IsCompressed">
            <summary>
            Property to return whether this provider uses compression.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemProvider.IsEncrypted">
            <summary>
            Property to return whether this provider uses encryption or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemProvider.ID">
            <summary>
            Property to return the ID of the file system.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemProvider.FileExtensions">
            <summary>
            Property to return the extensions associated with this file system provider.
            </summary>
        </member>
        <member name="T:GorgonLibrary.BaseDictionaryCollection`1">
            <summary>
            An abstract class representing a hash table of objects.
            </summary>
            <remarks>
            This was designed as a point of convenience to take some of the annoyance out of inheriting a hash table.
            <para>
            This class provides a simplified method of inheriting a basic list collection.  It holds no benefit over the System.Collections.Generic.Dictionary object, which it uses internally.
            </para>
            	<para>
            This class, like the other collection classes, implements the IEnumerable interface already to return an iterator interface for enumeration.
            </para>
            </remarks>
            <typeparam name="T">Type of data to store.</typeparam>
        </member>
        <member name="M:GorgonLibrary.BaseDictionaryCollection`1.GetItem(System.String)">
            <summary>
            Function to return an item with the specified key.
            </summary>
            <param name="key">Key of the item in the hash map.</param>
        </member>
        <member name="M:GorgonLibrary.BaseDictionaryCollection`1.AddItem(System.String,`0)">
            <summary>
            Function to add an item with the specified key.
            </summary>
            <param name="key">Key for the item.</param>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:GorgonLibrary.BaseDictionaryCollection`1.RemoveItem(System.String)">
            <summary>
            Function to remove an object from the list by key.
            </summary>
            <param name="key">Key of the object to remove.</param>
        </member>
        <member name="M:GorgonLibrary.BaseDictionaryCollection`1.ClearItems">
            <summary>
            Function to clear the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.BaseDictionaryCollection`1.Contains(System.String)">
            <summary>
            Function to return whether a key exists in the collection or not.
            </summary>
            <param name="key">Key of the object in the collection.</param>
            <returns>TRUE if the object exists, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.BaseDictionaryCollection`1.StaticArray(System.Int32)">
            <summary>
            Function to return the items in the hash list as a static array.
            </summary>
            <param name="count">Number of items to copy.</param>
            <returns>A static array containing a copy of this hash list.</returns>
        </member>
        <member name="M:GorgonLibrary.BaseDictionaryCollection`1.StaticArray">
            <summary>
            Function to return the items in the hash table as a static array.
            </summary>
            <returns>A static array containing a copy of this hash table.</returns>
        </member>
        <member name="M:GorgonLibrary.BaseDictionaryCollection`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.BaseDictionaryCollection`1"/> class.
            </summary>
            <param name="defaultsize">Default size of the collection.</param>
            <param name="caseSensitive">TRUE if keys are case sensitive, FALSE if not.</param>
        </member>
        <member name="M:GorgonLibrary.BaseDictionaryCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Function to return a new enumerator object.
            </summary>
            <returns>Enumerator object.</returns>
        </member>
        <member name="M:GorgonLibrary.BaseDictionaryCollection`1.GetEnumerator">
            <summary>
            Function to return a new enumerator object.
            </summary>
            <returns>Enumerator object.</returns>
        </member>
        <member name="P:GorgonLibrary.BaseDictionaryCollection`1.Count">
            <summary>
            Property to return the number of items in the collection.
            </summary>
        </member>
        <member name="P:GorgonLibrary.BaseDictionaryCollection`1.IsCaseSensitive">
            <summary>
            Property to return whether the collection keys are case sensitive or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.DictionaryCollection`1">
            <summary>
            Object representing a more concrete version of the dynamic array.
            </summary>
            <typeparam name="T">Type of object to store.</typeparam>
        </member>
        <member name="M:GorgonLibrary.DictionaryCollection`1.Remove(System.String)">
            <summary>
            Function to remove an object from the list by key.
            </summary>
            <param name="key">Key of the object to remove.</param>
        </member>
        <member name="M:GorgonLibrary.DictionaryCollection`1.Clear">
            <summary>
            Function to clear the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.DictionaryCollection`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="defaultsize">Default size of the collection.</param>
            <param name="caseSensitiveKeys">TRUE for case sensitive keys, FALSE for case insensitive keys.</param>
        </member>
        <member name="M:GorgonLibrary.DictionaryCollection`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.DictionaryCollection`1"/> class.
            </summary>
            <param name="caseSensitiveKeys">TRUE for case sensitive keys, FALSE for case insensitive keys.</param>
        </member>
        <member name="M:GorgonLibrary.DictionaryCollection`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.DictionaryCollection`1.Item(System.String)">
            <summary>
            Property to return the item with the specified key.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.Sprite">
            <summary>
            Object representing a sprite.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.SpriteFromStream(System.String,GorgonLibrary.FileSystems.FileSystem,System.Resources.ResourceManager,System.IO.Stream,System.Boolean,GorgonLibrary.Graphics.Image)">
            <summary>
            Function to return a renderable from a stream.
            </summary>
            <param name="name">Renderable name or path.</param>
            <param name="fileSystem">A file system that contains the renderable.</param>
            <param name="resources">A resource manager that is used to load the file(s).</param>
            <param name="stream">Stream that contains the object.</param>
            <param name="isXML">TRUE if the stream contains XML data, FALSE if not.</param>
            <param name="alternateImage">Alternative image to use.</param>
            <returns>The object contained within the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.UpdateDimensions">
            <summary>
            Function to update the dimensions for an object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.UpdateTransform">
            <summary>
            Function to update the position of an object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.UpdateImageLayer">
            <summary>
            Function to update the source image positioning.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.GetVertices">
            <summary>
            Function to return the number of vertices for this object.
            </summary>
            <returns>
            An array of vertices used for this renderable.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.FromStream(System.IO.Stream,System.Boolean,GorgonLibrary.Graphics.Image)">
            <summary>
            Function to return a sprite from a stream.
            </summary>
            <param name="stream">Stream that contains the sprite.</param>
            <param name="isXML">TRUE if the stream contains XML data, FALSE if not.</param>
            <param name="alternateImage">Alternative image to use.</param>
            <returns>The sprite contained within the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.FromStream(System.IO.Stream,System.Boolean)">
            <summary>
            Function to return a sprite from a stream.
            </summary>
            <param name="stream">Stream that contains the sprite.</param>
            <param name="isXML">TRUE if the stream contains XML data, FALSE if not.</param>		
            <returns>The sprite contained within the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.FromStream(System.IO.Stream)">
            <summary>
            Function to return a binary sprite from a stream.
            </summary>
            <param name="stream">Stream that contains the sprite.</param>
            <returns>The sprite contained within the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.FromFileSystem(GorgonLibrary.FileSystems.FileSystem,System.String,GorgonLibrary.Graphics.Image)">
            <summary>
            Function to return a sprite from a file system.
            </summary>
            <param name="fileSystem">File system to use.</param>
            <param name="path">Path and filename of the sprite.</param>
            <param name="alternateImage">Alternative image to use.</param>
            <returns>The sprite contained within the file system.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.FromFileSystem(GorgonLibrary.FileSystems.FileSystem,System.String)">
            <summary>
            Function to return a sprite from a file system.
            </summary>
            <param name="fileSystem">File system to use.</param>
            <param name="path">Path and filename of the sprite.</param>
            <returns>The sprite contained within the file system.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.FromFile(System.String,GorgonLibrary.Graphics.Image)">
            <summary>
            Function to load a sprite.
            </summary>
            <param name="spritePath">Filename/path to the sprite.</param>
            <param name="alternateImage">Alternative image to use.</param>
            <returns>The sprite stored on the disk.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.FromFile(System.String)">
            <summary>
            Function to load a sprite.
            </summary>
            <param name="spritePath">Filename/path to the sprite.</param>
            <returns>The sprite stored on the disk.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.FromResource(System.String,System.Resources.ResourceManager,System.Boolean,GorgonLibrary.Graphics.Image)">
            <summary>
            Function to load a sprite from the embedded resources.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="resourceManager">Resource manager to use.</param>
            <param name="isXML">TRUE if the file is in XML format, FALSE if binary.</param>
            <param name="alternateImage">Alternative image to use.</param>
            <returns>The sprite that was loaded from the embedded resource.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.FromResource(System.String,System.Resources.ResourceManager,System.Boolean)">
            <summary>
            Function to load a sprite from the embedded resources.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="resourceManager">Resource manager to use.</param>
            <param name="isXML">TRUE if the file is in XML format, FALSE if binary.</param>
            <returns>The sprite that was loaded from the embedded resource.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.FromResource(System.String,System.Resources.ResourceManager,GorgonLibrary.Graphics.Image)">
            <summary>
            Function to load a binary sprite from the embedded resources.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="resourceManager">Resource manager to use.</param>
            <param name="alternateImage">Alternative image to use.</param>
            <returns>The sprite that was loaded from the embedded resource.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.FromResource(System.String,System.Resources.ResourceManager)">
            <summary>
            Function to load a binary sprite from the embedded resources.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="resourceManager">Resource manager to use.</param>
            <returns>The sprite that was loaded from the embedded resource.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.FromResource(System.String,System.Boolean,GorgonLibrary.Graphics.Image)">
            <summary>
            Function to load a sprite from the embedded resources.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="isXML">TRUE if the file is in XML format, FALSE if binary.</param>
            <param name="alternateImage">Alternative image to use.</param>
            <returns>The sprite that was loaded from the embedded resource.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.FromResource(System.String,System.Boolean)">
            <summary>
            Function to load a sprite from the embedded resources.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="isXML">TRUE if the file is in XML format, FALSE if binary.</param>
            <returns>The sprite that was loaded from the embedded resource.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.FromResource(System.String,GorgonLibrary.Graphics.Image)">
            <summary>
            Function to load a binary sprite from the embedded resources.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="alternateImage">Alternative image to use.</param>
            <returns>The sprite that was loaded from the embedded resource.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.FromResource(System.String)">
            <summary>
            Function to load a binary sprite from the embedded resources.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <returns>The sprite that was loaded from the embedded resource.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.FromAnimatedGIF(System.String,System.String,System.Boolean)">
            <summary>
            Returns a sprite, complete with animation, from an animated GIF (Graphics Interchange Format) file.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="filePath">Filename/path to the GIF animation.</param>
            <param name="looped">TRUE if the animation should be looped; FALSE if not.</param>
            <returns>The sprite that was loaded from the GIF file.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Function to save the sprite to a stream.
            </summary>
            <param name="stream">Stream to save the sprite into.</param>
            <param name="isXML">TRUE if this is an xml file, FALSE for binary.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.Save(System.IO.Stream)">
            <summary>
            Function to save the binary sprite to a stream.
            </summary>
            <param name="stream">Stream to save the sprite into.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.Save(System.String,System.Boolean)">
            <summary>
            Function to save the sprite to a file.
            </summary>
            <param name="fileName">Path and filename of the sprite.</param>
            <param name="isXML">TRUE if this is an xml file, FALSE for binary.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.Save(System.String)">
            <summary>
            Function to save sprite to a file.
            </summary>
            <param name="fileName">Path and filename of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.Save(GorgonLibrary.FileSystems.FileSystem,System.String)">
            <summary>
            Function to save the sprite to a file system.
            </summary>
            <param name="fileSystem">File system to save the sprite into.</param>
            <param name="fileName">Path and filename of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.Save(GorgonLibrary.FileSystems.FileSystem,System.String,System.Boolean)">
            <summary>
            Function to save the sprite to a file system.
            </summary>
            <param name="fileSystem">File system to save the sprite into.</param>
            <param name="fileName">Path and filename of the sprite.</param>
            <param name="isXML">TRUE if this is an xml file, FALSE for binary.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.UpdateAABB">
            <summary>
            Function to update AABB.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.SetSpriteVertexOffset(GorgonLibrary.Graphics.VertexLocations,GorgonLibrary.Vector2D)">
            <summary>
            Function to set the position of a sprite vertex.
            </summary>
            <param name="vertexPosition">Location of the vertex to change.</param>
            <param name="position">Position of the vertex.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.SetSpriteVertexOffset(GorgonLibrary.Graphics.VertexLocations,System.Single,System.Single)">
            <summary>
            Function to set the offset of a sprite vertex.
            </summary>
            <param name="vertexPosition">Location of the vertex to change.</param>
            <param name="x">Horizontal position of the vertex.</param>
            <param name="y">Vertical position of the vertex.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.GetSpriteVertexOffset(GorgonLibrary.Graphics.VertexLocations)">
            <summary>
            Function to get the offset of a sprite vertex.
            </summary>
            <param name="vertexPosition">Location of the vertex to retrieve.</param>
            <returns>The offset of the sprite vertex.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.GetSpriteVertexPosition(GorgonLibrary.Graphics.VertexLocations)">
            <summary>
            Function to retrieve the final sprite vertex position.
            </summary>
            <param name="vertexPosition">Location of the vertex to retrieve.</param>
            <returns>The final transformed location of the sprite vertex.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.GetSpriteVertexColor(GorgonLibrary.Graphics.VertexLocations)">
            <summary>
            Function to get the color of a sprite vertex.
            </summary>
            <param name="vertexPosition">Location of the vertex to change.</param>
            <returns>Color of the sprite vertex.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.SetSpriteVertexColor(GorgonLibrary.Graphics.VertexLocations,System.Drawing.Color)">
            <summary>
            Function to set the color of a sprite vertex.
            </summary>
            <param name="vertexPosition">Location of the vertex to change.</param>
            <param name="newColor">New color to set the vertex to.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.SetImageOffset(System.Single,System.Single)">
            <summary>
            Function to set the offset within the source image to start drawing from.
            </summary>
            <param name="x">Horizontal position.</param>
            <param name="y">Vertical position.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.SetImageRegion(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Function to set the region of the image to capture.
            </summary>
            <param name="x">Horizontal position.</param>
            <param name="y">Vertical position.</param>
            <param name="width">Width of the region.</param>
            <param name="height">Height of the region.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.Draw(System.Boolean)">
            <summary>
            Function to draw the sprite.
            </summary>
            <param name="flush">TRUE to flush the buffers after drawing, FALSE to only flush on state change.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.Draw(System.Drawing.Rectangle)">
            <summary>
            Function to draw the sprite.
            </summary>
            <param name="dimensions">Dimensions of the sprite while drawing.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.Image,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,System.Single,GorgonLibrary.Vector2D)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Image to use.</param>
            <param name="imageOffset">Offset within the image for the sprite to start at.</param>
            <param name="size">Width and height of the sprite.</param>
            <param name="axis">Pivot axis of the sprite.</param>
            <param name="position">Initial position of the sprite.</param>
            <param name="rotation">Initial rotation of the sprite.</param>		
            <param name="scale">Initial scale of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.Image,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Image to use.</param>
            <param name="imageOffset">Offset within the image for the sprite to start at.</param>
            <param name="size">Width and height of the sprite.</param>
            <param name="axis">Pivot axis of the sprite.</param>
            <param name="position">Initial position of the sprite.</param>
            <param name="rotation">Initial rotation of the sprite.</param>		
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.Image,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Image to use.</param>
            <param name="imageOffset">Offset within the image for the sprite to start at.</param>
            <param name="size">Width and height of the sprite.</param>
            <param name="axis">Pivot axis of the sprite.</param>
            <param name="position">Initial position of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.Image,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Image to use.</param>
            <param name="imageOffset">Offset within the image for the sprite to start at.</param>
            <param name="size">Width and height of the sprite.</param>
            <param name="axis">Pivot axis of the sprite.</param>		
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.Image,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Image to use.</param>
            <param name="imageOffset">Offset within the image for the sprite to start at.</param>
            <param name="size">Width and height of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.Image,GorgonLibrary.Vector2D)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Image to use.</param>
            <param name="size">Width and height of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.Image)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Image to use.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Vector2D)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="size">Width and height of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Image to use.</param>
            <param name="imageX">Horizontal position in the image to map to the upper-left corner.</param>
            <param name="imageY">Vertical position in the image to map to the upper-left corner.</param>
            <param name="width">Width of the sprite.</param>
            <param name="height">Height of the sprite.</param>
            <param name="axisX">Horizontal position of the rotation axis.</param>
            <param name="axisY">Vertical position of the rotation axis.</param>
            <param name="positionX">Horizontal position of the sprite.</param>
            <param name="positionY">Vertical position of the sprite.</param>
            <param name="rotation">Initial rotation of the sprite.</param>		
            <param name="scaleX">Initial horizontal scale of the sprite.</param>
            <param name="scaleY">Initial vertical scale of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Image to use.</param>
            <param name="imageX">Horizontal position in the image to map to the upper-left corner.</param>
            <param name="imageY">Vertical position in the image to map to the upper-left corner.</param>
            <param name="width">Width of the sprite.</param>
            <param name="height">Height of the sprite.</param>
            <param name="axisX">Horizontal position of the rotation axis. (Default: center of sprite).</param>
            <param name="axisY">Vertical position of the rotation axis. (Default: center of sprite).</param>
            <param name="positionX">Horizontal position of the sprite.</param>
            <param name="positionY">Vertical position of the sprite.</param>
            <param name="rotation">Initial rotation of the sprite.</param>		
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Image to use.</param>
            <param name="imageX">Horizontal position in the image to map to the upper-left corner.</param>
            <param name="imageY">Vertical position in the image to map to the upper-left corner.</param>
            <param name="width">Width of the sprite.</param>
            <param name="height">Height of the sprite.</param>
            <param name="axisX">Horizontal position of the rotation axis. (Default: center of sprite).</param>
            <param name="axisY">Vertical position of the rotation axis. (Default: center of sprite).</param>
            <param name="positionX">Horizontal position of the sprite.</param>
            <param name="positionY">Vertical position of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Image to use.</param>
            <param name="imageX">Horizontal position in the image to map to the upper-left corner.</param>
            <param name="imageY">Vertical position in the image to map to the upper-left corner.</param>
            <param name="width">Width of the sprite.</param>
            <param name="height">Height of the sprite.</param>
            <param name="axisX">Horizontal position of the rotation axis. (Default: center of sprite).</param>
            <param name="axisY">Vertical position of the rotation axis. (Default: center of sprite).</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.Image,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Image to use.</param>
            <param name="imageX">Horizontal position in the image to map to the upper-left corner.</param>
            <param name="imageY">Vertical position in the image to map to the upper-left corner.</param>
            <param name="width">Width of the sprite.</param>
            <param name="height">Height of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.Image,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Image to use.</param>
            <param name="width">Width of the sprite.</param>
            <param name="height">Height of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.RenderImage,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,System.Single,GorgonLibrary.Vector2D)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Render target image to use.</param>
            <param name="imageOffset">Offset within the image for the sprite to start at.</param>
            <param name="size">Width and height of the sprite.</param>
            <param name="axis">Pivot axis of the sprite.</param>
            <param name="position">Initial position of the sprite.</param>
            <param name="rotation">Initial rotation of the sprite.</param>		
            <param name="scale">Initial scale of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.RenderImage,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Render target image to use.</param>
            <param name="imageOffset">Offset within the image for the sprite to start at.</param>
            <param name="size">Width and height of the sprite.</param>
            <param name="axis">Pivot axis of the sprite.</param>
            <param name="position">Initial position of the sprite.</param>
            <param name="rotation">Initial rotation of the sprite.</param>		
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.RenderImage,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Render target image to use.</param>
            <param name="imageOffset">Offset within the image for the sprite to start at.</param>
            <param name="size">Width and height of the sprite.</param>
            <param name="axis">Pivot axis of the sprite.</param>
            <param name="position">Initial position of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.RenderImage,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Render target image to use.</param>
            <param name="imageOffset">Offset within the image for the sprite to start at.</param>
            <param name="size">Width and height of the sprite.</param>
            <param name="axis">Pivot axis of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.RenderImage,GorgonLibrary.Vector2D,GorgonLibrary.Vector2D)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Render target image to use.</param>
            <param name="imageOffset">Offset within the image for the sprite to start at.</param>
            <param name="size">Width and height of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.RenderImage,GorgonLibrary.Vector2D)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Render target image to use.</param>
            <param name="size">Width and height of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.RenderImage)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Render target image to use.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.RenderImage,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Render target image to use.</param>
            <param name="imageX">Horizontal position in the image to map to the upper-left corner.</param>
            <param name="imageY">Vertical position in the image to map to the upper-left corner.</param>
            <param name="width">Width of the sprite.</param>
            <param name="height">Height of the sprite.</param>
            <param name="axisX">Horizontal position of the rotation axis.</param>
            <param name="axisY">Vertical position of the rotation axis.</param>
            <param name="positionX">Horizontal position of the sprite.</param>
            <param name="positionY">Vertical position of the sprite.</param>
            <param name="rotation">Initial rotation of the sprite.</param>		
            <param name="scaleX">Initial horizontal scale of the sprite.</param>
            <param name="scaleY">Initial vertical scale of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.RenderImage,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Render target image to use.</param>
            <param name="imageX">Horizontal position in the image to map to the upper-left corner.</param>
            <param name="imageY">Vertical position in the image to map to the upper-left corner.</param>
            <param name="width">Width of the sprite.</param>
            <param name="height">Height of the sprite.</param>
            <param name="axisX">Horizontal position of the rotation axis. (Default: center of sprite).</param>
            <param name="axisY">Vertical position of the rotation axis. (Default: center of sprite).</param>
            <param name="positionX">Horizontal position of the sprite.</param>
            <param name="positionY">Vertical position of the sprite.</param>
            <param name="rotation">Initial rotation of the sprite.</param>		
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.RenderImage,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Render target image to use.</param>
            <param name="imageX">Horizontal position in the image to map to the upper-left corner.</param>
            <param name="imageY">Vertical position in the image to map to the upper-left corner.</param>
            <param name="width">Width of the sprite.</param>
            <param name="height">Height of the sprite.</param>
            <param name="axisX">Horizontal position of the rotation axis. (Default: center of sprite).</param>
            <param name="axisY">Vertical position of the rotation axis. (Default: center of sprite).</param>
            <param name="positionX">Horizontal position of the sprite.</param>
            <param name="positionY">Vertical position of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.RenderImage,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Render target image to use.</param>
            <param name="imageX">Horizontal position in the image to map to the upper-left corner.</param>
            <param name="imageY">Vertical position in the image to map to the upper-left corner.</param>
            <param name="width">Width of the sprite.</param>
            <param name="height">Height of the sprite.</param>
            <param name="axisX">Horizontal position of the rotation axis. (Default: center of sprite).</param>
            <param name="axisY">Vertical position of the rotation axis. (Default: center of sprite).</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.RenderImage,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Render target image to use.</param>
            <param name="imageX">Horizontal position in the image to map to the upper-left corner.</param>
            <param name="imageY">Vertical position in the image to map to the upper-left corner.</param>
            <param name="width">Width of the sprite.</param>
            <param name="height">Height of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.#ctor(System.String,GorgonLibrary.Graphics.RenderImage,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="spriteName">Name of the sprite.</param>
            <param name="image">Render target image to use.</param>
            <param name="width">Width of the sprite.</param>
            <param name="height">Height of the sprite.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.GorgonLibrary#Serialization#ISerializable#WriteData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to persist the data into the serializer stream.
            </summary>
            <param name="writer">Serializer that's calling this function.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Sprite.GorgonLibrary#Serialization#ISerializable#ReadData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to retrieve data from the serializer stream.
            </summary>
            <param name="reader">Serializer that's calling this function.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.Sprite.BoundingCircle">
            <summary>
            Property to return the bounding circle of the sprite.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Sprite.Image">
            <summary>
            Property to set or return the image that this object is bound with.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Sprite.HorizontalFlip">
            <summary>
            Property to set or return whether the sprite is flipped horizontally or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Sprite.VerticalFlip">
            <summary>
            Property to set or return whether the sprite is flipped vertically or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Sprite.PrimitiveStyle">
            <summary>
            Property to return the primitive style for the object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Sprite.UseIndices">
            <summary>
            Property to return whether to use an index buffer or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Sprite.Color">
            <summary>
            Property to set or return the sprite color.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Sprite.Opacity">
            <summary>
            Property to set or return the opacity.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Sprite.Axis">
            <summary>
            Property to set or return the axis of the sprite.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Sprite.ImageOffset">
            <summary>
            Property to set or return the offset within the source image to start drawing from.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Sprite.ImageRegion">
            <summary>
            Property to set or return the region of the image that the sprite will use.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Sprite.Scale">
            <summary>
            Property to set or return the scale of the sprite.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Sprite.UniformScale">
            <summary>
            Property to set or return a uniform scale across the X and Y axis.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Sprite.Name">
            <summary>
            Property to set or return the name of the sprite.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Sprite.Filename">
            <summary>
            Property to set or return the filename of the serializable object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Sprite.IsResource">
            <summary>
            Property to return whether this object is an embedded resource.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.StateFence">
            <summary>
            A state fence is used mark where objects change state inside of a vertex buffer.
            </summary>
            <remarks>This object is used by the <see cref="T:GorgonLibrary.Graphics.Batch">Batch</see> object to determine how to switch state when drawing with the static vertex buffer.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.StateFence.Image">
            <summary>
            Property to set or return the image for this fence.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StateFence.StartVertex">
            <summary>
            Property to set or return the starting vertex for the fence.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StateFence.VertexCount">
            <summary>
            Property to set or return the vertex count encompassed by the fence.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StateFence.StartIndex">
            <summary>
            Property to set or return the starting index for the fence.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.StateFence.IndexCount">
            <summary>
            Property to set or return the index count encompassed by the fence.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Serialization.FXShaderSerializer">
            <summary>
            Object representing a serializer for FX shader files.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to perform clean up of all objects.  FALSE to clean up only unmanaged objects.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.Serialize">
            <summary>
            Function to serialize an object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.Deserialize">
            <summary>
            Function to deserialize an object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.Write(System.String,System.String)">
            <summary>
            Function to write a string value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.Write(System.String,System.Char)">
            <summary>
            Function to write a character value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.Write(System.String,System.Char[],System.Int32,System.Int32)">
            <summary>
            Function to write an array of character values to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="values">Values to write.</param>
            <param name="start">Array index to start at.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.Write(System.String,System.UInt64)">
            <summary>
            Function to write an unsigned long value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.Write(System.String,System.Int64)">
            <summary>
            Function to write a long value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.Write(System.String,System.UInt32)">
            <summary>
            Function to write an unsigned integer value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.Write(System.String,System.Int32)">
            <summary>
            Function to write an integer value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.Write(System.String,System.Single)">
            <summary>
            Function to write a floating point value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.Write(System.String,System.Double)">
            <summary>
            Function to write a floating point value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.Write(System.String,System.UInt16)">
            <summary>
            Function to write an unsigned short value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.Write(System.String,System.Int16)">
            <summary>
            Function to write a short value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.Write(System.String,System.SByte)">
            <summary>
            Function to write a signed byte value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.Write(System.String,System.Byte)">
            <summary>
            Function to write a byte value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.Write(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Function to write an array of byte values to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="values">Values to write.</param>
            <param name="start">Array index to start at.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.Write(System.String,System.Boolean)">
            <summary>
            Function to write a boolean value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.ReadBool(System.String)">
            <summary>
            Function to read a boolean value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.ReadBytes(System.String,System.Int32)">
            <summary>
            Function to read an array of byte values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <param name="count">The count of bytes to read.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.ReadBytes(System.String)">
            <summary>
            Function to read an array of byte values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.ReadByte(System.String)">
            <summary>
            Function to read a byte value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.ReadSByte(System.String)">
            <summary>
            Function to read a signed byte value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.ReadInt16(System.String)">
            <summary>
            Function to read a short value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.ReadUInt16(System.String)">
            <summary>
            Function to read an unsigned short value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.ReadDouble(System.String)">
            <summary>
            Function to read a double value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.ReadSingle(System.String)">
            <summary>
            Function to read a floating point value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.ReadInt32(System.String)">
            <summary>
            Function to read an integer value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.ReadUInt32(System.String)">
            <summary>
            Function to read an unsigned integer value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.ReadInt64(System.String)">
            <summary>
            Function to read a long value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.ReadUInt64(System.String)">
            <summary>
            Function to read an unsigned long value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.ReadChars(System.String,System.Int32)">
            <summary>
            Function to read an array of character values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <param name="count">The count of characters to read.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.ReadChar(System.String)">
            <summary>
            Function to read a character value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.ReadString(System.String)">
            <summary>
            Function to read a string values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.FXShaderSerializer.#ctor(GorgonLibrary.Graphics.FXShader,System.IO.Stream)">
            <summary>
            Constructor.
            </summary>
            <param name="shader">Shader to (de)serialize.</param>
            <param name="stream">Stream to write or read data through.</param>
        </member>
        <member name="T:GorgonLibrary.Graphics.Renderer">
            <summary>
            Object representing an abstract layer that will handle the rendering calls.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.CalculateIndices(System.Boolean,System.Int32,System.Int32,GorgonLibrary.Graphics.PrimitiveStyle)">
            <summary>
            Function to get the number of indices depending on the primitive style being used.
            </summary>
            <param name="useindices">TRUE to if using indices, FALSE if not.</param>
            <param name="VertexCount">Number of vertices.</param>
            <param name="IndexCount">Number of indices.</param>
            <param name="style">Style of primitive to use.</param>
            <returns>Index count for the current vertex/index set.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.DrawCachedTriangles(GorgonLibrary.Graphics.PrimitiveStyle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function to draw cached triangles.
            </summary>
            <param name="primitiveStyle">The type of triangle to draw.</param>
            <param name="vertexOffset">Starting vertex to render.</param>
            <param name="vertexCount">Number of vertices to render.</param>
            <param name="indexOffset">Starting index to render.</param>
            <param name="indexCount">Number of indices to render.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.SetWorldTransform(System.Int32,GorgonLibrary.Matrix)">
            <summary>
            Function to set the world transform.
            </summary>
            <param name="index">Index of the world transform to set.</param>
            <param name="matrix">Matrix to set as the transform.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.SetVertexType(GorgonLibrary.Graphics.VertexType)">
            <summary>
            Function to set the vertex type.
            </summary>
            <param name="vertexType">Type of vertex declaration to set.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.SetIndexBuffer(GorgonLibrary.Internal.IndexBuffer)">
            <summary>
            Function to set the active index buffer.
            </summary>
            <param name="indices">The index buffer.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.SetStreamData(GorgonLibrary.Internal.VertexBuffer)">
            <summary>
            Function to set the stream source data.
            </summary>
            <param name="vertexData">Vertex cache containing vertex buffers and stream information.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.BeginRendering">
            <summary>
            Function to begin rendering.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.EndRendering">
            <summary>
            Function to end rendering.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.Reset">
            <summary>
            Function to initialize data after a device reset.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.CreateOrthoProjectionMatrix(System.Drawing.RectangleF)">
            <summary>
            Function to create an ortho projection matrix.
            </summary>
            <param name="dimensions">Dimensions to pass into the matrix.</param>
            <returns>An orthogonal matrix.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.CreateOrthoProjectionMatrix(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Function to create an ortho projection matrix.
            </summary>
            <param name="left">Horizontal position.</param>
            <param name="top">Vertical position.</param>
            <param name="width">Width of the view.</param>
            <param name="height">Height of the view.</param>
            <returns>An orthogonal matrix.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.SetImage(System.Int32,GorgonLibrary.Graphics.Image)">
            <summary>
            Function to set the image.
            </summary>
            <param name="stage">Image stage to use.</param>
            <param name="image">Image to use.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.GetImage(System.Int32)">
            <summary>
            Function to get the currently active image.
            </summary>
            <param name="stage">Image stage to use.</param>
            <returns>The current set image.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.Clear(System.Drawing.Color,System.Single,System.Int32,GorgonLibrary.ClearTargets)">
            <summary>
            Function to clear the screen, depth buffer and stencil buffer.
            </summary>
            <param name="color">Color to clear the backbuffer with.</param>
            <param name="depthValue">Value to overwrite the depth buffer with.</param>
            <param name="stencilValue">Value to overwrite the stencil buffer with.</param>
            <param name="clearTargets">What to clear.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.Flip(GorgonLibrary.Graphics.RenderWindow)">
            <summary>
            Function to flip the backbuffer to the screen.
            </summary>
            <param name="target">Target to page flip.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.Render">
            <summary>
            Function to perform rendering using the default render geometry.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.Render(GorgonLibrary.Graphics.VertexType,GorgonLibrary.Internal.VertexBuffer,GorgonLibrary.Internal.IndexBuffer,GorgonLibrary.Graphics.PrimitiveStyle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function to perform rendering.
            </summary>
            <param name="vertexType">Type description of the vertex to render.</param>
            <param name="vertexBuffer">Vertex buffer to render.</param>
            <param name="indexBuffer">Optional index buffer.</param>
            <param name="primitiveStyle">Style of primitive to use.</param>
            <param name="vertexStart">Starting vertex to render.</param>
            <param name="vertexCount">Number of vertices to render.</param>
            <param name="indexStart">Starting index to render.</param>
            <param name="indexCount">Number of indices to render.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to remove all objects, FALSE to remove only unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Renderer.Dispose">
            <summary>
            Function to perform clean up.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderer.CanRender">
            <summary>
            Property to return whether we can render yet.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderer.D3DDevice">
            <summary>
            Property to set or return the currently active Direct 3D device.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderer.IsD3DDebug">
            <summary>
            Property to return whether the D3D runtime is in debug mode or not.
            </summary>
            <returns>TRUE if in debug, FALSE if in retail.</returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderer.RenderStates">
            <summary>
            Property to return the render state list.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderer.ImageLayerStates">
            <summary>
            Property to return the states for the image layers.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderer.IsDisposed">
            <summary>
            Property to return whether or not this object has been disposed.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderer.CurrentProjectionMatrix">
            <summary>
            Property to set or return the current projection matrix.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderer.VertexTypes">
            <summary>
            Property to return the list of predefined vertex types.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Renderer.CurrentViewport">
            <summary>
            Property to return the currently active view port.
            </summary>
        </member>
        <member name="T:GorgonLibrary.InputDevices.JoystickList">
            <summary>
            Object representing a list of joysticks.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.JoystickList.ClearItems">
            <summary>
            Function to clear the list.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.JoystickList.Refresh">
            <summary>
            Function to enumerate joysticks.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.JoystickList.#ctor(GorgonLibrary.InputDevices.Input)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Owning input interface.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.JoystickList.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to release all resources, FALSE to only release unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.JoystickList.Dispose">
            <summary>
            Function to perform clean up.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.JoystickList.Item(System.Int32)">
            <summary>
            Property to return the joystick by index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.JoystickList.Item(System.String)">
            <summary>
            Property to return the joystick by name.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.JoystickList.Owner">
            <summary>
            Property to return the owning input interface.
            </summary>
        </member>
        <member name="T:GorgonLibrary.FileSystems.FileSystemProviderCache">
            <summary>
            Object representing a file system provider cache.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemProviderCache.UnloadAll">
            <summary>
            Function to unload all the providers and file systems.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemProviderCache.#cctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemProviderCache.Providers">
            <summary>
            Property to return the list of loaded providers.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.InterpolationMode">
            <summary>
            Enumeration for interpolation modes.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.InterpolationMode.None">
            <summary>
            No interpolation.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.InterpolationMode.Linear">
            <summary>
            Linear interpolation.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.InterpolationMode.Spline">
            <summary>
            Spline interpolation.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.EditorMinMaxAttribute">
            <summary>
            Attribute for sprite editor to determine min/max.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.EditorMinMaxAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Internal.EditorMinMaxAttribute"/> class.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.EditorMinMaxAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Internal.EditorMinMaxAttribute"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.EditorMinMaxAttribute.Minimum">
            <summary>
            Property to return the minimum value.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.EditorMinMaxAttribute.Maximum">
            <summary>
            Property to return the maximum value.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.AnimatedAttribute">
            <summary>
            Attribute to define if a property can be animated or not.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.AnimatedAttribute.#ctor(System.Type,GorgonLibrary.Graphics.InterpolationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.AnimatedAttribute"/> class.
            </summary>
            <param name="dataType">Type of the data for the property.</param>
            <param name="interpolation">Interpolation mode for this data.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.AnimatedAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.AnimatedAttribute"/> class.
            </summary>
            <param name="dataType">Type of the data for the property.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.AnimatedAttribute.DataType">
            <summary>
            Property to return the data type to be animated.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.AnimatedAttribute.InterpolationMode">
            <summary>
            Property to return the interpolation mode.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.VertexCache`1">
            <summary>
            A vertex and index caching system.
            </summary>
            <remarks>
            This object will store our vertices so that we may read them and modify them
            at any time.  
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Internal.VertexCache`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.VertexCache`1.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to release all resources, FALSE to remove only unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.VertexCache`1.Dispose">
            <summary>
            Function to perform clean up.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.VertexCache`1.DeviceLost">
            <summary>
            Function that's called when the device enters a lost state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.VertexCache`1.ForceRelease">
            <summary>
            Function to force the loss of the data for the index cache.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.VertexCache`1.DeviceReset">
            <summary>
            Function to that's called when the device enters a reset state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.VertexCache`1.WriteData(System.Int32,System.Int32,System.Int32,`0[])">
            <summary>
            Function to write data to the cache.
            </summary>
            <param name="sourceStart">Start of the data in the source array of data.</param>
            <param name="destinationStart">Start in the destination buffer to write at.</param>
            <param name="length">Length of data to write.</param>
            <param name="data">Data to write.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.VertexCache`1.Update(System.Boolean)">
            <summary>
            Function to update the vertex buffers with the current information held in the cache.
            </summary>
            <param name="isRestoring">TRUE if this is being called due to a device restoration, FALSE if not.</param>
            <remarks>This function is used to send the data to the vertex buffer(s).</remarks>
        </member>
        <member name="M:GorgonLibrary.Internal.VertexCache`1.Release">
            <summary>
            Function to release the underlying vertex buffers.
            </summary>
            <remarks>
            Use this function to clear out any of the vertex buffers.
            <para>
            Use this with care as it will invalidate any vertex buffers that are being referenced elsewhere.
            </para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Internal.VertexCache`1.VertexType">
            <summary>
            Property to set or return the vertex type.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.VertexCache`1.VertexBuffer">
            <summary>
            Property to return or set a vertex buffer in the cache.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.VertexCache`1.Count">
            <summary>
            Property to set or return the number of vertices within the cache.
            </summary>
            <value>
            An integer containing a total count of the vertices within the cache.
            </value>
            <remarks>
            Use this to set the size of the vertex cache (size is the number of vertices, NOT bytes).
            <para>This will represent the number of vertices, and not the exact size per vertex stream.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Internal.VertexCache`1.BufferUsage">
            <summary>
            Property to set or return the vertex buffer usage per stream.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.VertexCache`1.CachedData">
            <summary>
            Property to return the vertices stored in the cache.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.VertexCache`1.NeedsUpdate">
            <summary>
            Read only property to determine if the underlying vertex buffers need to be updated.
            </summary>
            <value>Returns TRUE if an update is necessary, FALSE if not.</value>
        </member>
        <member name="P:GorgonLibrary.Internal.VertexCache`1.DataWritten">
            <summary>
            Property to return the amount of data written to the buffer already.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.VertexCache`1.DataOffset">
            <summary>
            Property to return the start of the data in the buffer.
            </summary>
        </member>
        <member name="T:GorgonLibrary.PreciseTimer">
            <summary>
            Object to handle timing operations.
            </summary>
            <remarks>
            Timers are used to regulate and measure time elapsed for frames, or maintaining consistent
            frame rate for animations, to just simple countdowns.
            </remarks>
        </member>
        <member name="M:GorgonLibrary.PreciseTimer.GetTime">
            <summary>
            Function to start the timing process.
            </summary>
        </member>
        <member name="M:GorgonLibrary.PreciseTimer.Reset">
            <summary>
            Function to reset the timer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.PreciseTimer.FpsToMilliseconds(System.Double)">
            <summary>
            Function to convert the desired frames per second to milliseconds.
            </summary>
            <param name="fps">Desired frames per second.</param>
            <returns>Frames per second in milliseconds.</returns>
        </member>
        <member name="M:GorgonLibrary.PreciseTimer.FpsToMicroseconds(System.Double)">
            <summary>
            Function to convert the desired frames per second to microseconds.
            </summary>
            <param name="fps">Desired frames per second.</param>
            <returns>Frames per second in microseconds.</returns>
        </member>
        <member name="M:GorgonLibrary.PreciseTimer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.PreciseTimer.CompensateForDrift">
            <summary>
            Property to set or return whether the use the timer adjustments to compensate for timer drift.
            </summary>
            <remarks>This is caused by unexpected data across the PCI to ISA bridge, aka south bridge.  See Microsoft KB274323.</remarks>
        </member>
        <member name="P:GorgonLibrary.PreciseTimer.Milliseconds">
            <summary>
            Property to return the number of milliseconds elapsed since the timer was started.
            </summary>
        </member>
        <member name="P:GorgonLibrary.PreciseTimer.Microseconds">
            <summary>
            Property to return the number of microseconds elapsed since the timer was started.
            </summary>
        </member>
        <member name="P:GorgonLibrary.PreciseTimer.Seconds">
            <summary>
            Property to return the number of seconds elapsed since the timer was started.
            </summary>
        </member>
        <member name="P:GorgonLibrary.PreciseTimer.Minutes">
            <summary>
            Property to return the number of minutes elapsed since the timer was started.
            </summary>
        </member>
        <member name="P:GorgonLibrary.PreciseTimer.Hours">
            <summary>
            Property to return the number of hours elapsed since the timer was started.
            </summary>
        </member>
        <member name="P:GorgonLibrary.PreciseTimer.Days">
            <summary>
            Property to return the number of days elapsed since the timer was started.
            </summary>
        </member>
        <member name="P:GorgonLibrary.PreciseTimer.Ticks">
            <summary>
            Property to return the number of ticks since the timer was started.
            </summary>
        </member>
        <member name="P:GorgonLibrary.PreciseTimer.HighResolutionTimer">
            <summary>
            Property to set or return whether to use the high resolution timer or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.PlugIns.PlugInList">
            <summary>
            Object to repesent a list of plugins.
            </summary>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInList.Clear">
            <summary>
            Function to remove all the plug-ins.
            </summary>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInList.Add(GorgonLibrary.PlugIns.PlugInEntryPoint)">
            <summary>
            Function to add a plug-in to the list.
            </summary>
            <param name="plugIn">Plug-in to add.</param>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInList.Remove(System.String)">
            <summary>
            Function to remove a plug-in.
            </summary>
            <param name="plugInName">Name of the plug-in to remove.</param>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.PlugIns.PlugInList.Item(System.Int32)">
            <summary>
            Property to return a plug-in by its index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.PlugIns.PlugInList.Item(System.String)">
            <summary>
            Property to return a plug-in by its name.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.ImageLayerStates">
            <summary>
            Object representing the various renderstates.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.ImageLayerStates.SetAlphaOperation(GorgonLibrary.Graphics.ImageOperations)">
            <summary>
            Function to set a alpha operation.
            </summary>		
            <param name="value">Operation to use.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.ImageLayerStates.SetAlphaOperationArgument0(GorgonLibrary.Graphics.ImageOperationArguments)">
            <summary>
            Function to set the first alpha operation argument.
            </summary>		
            <param name="value">Operation argument to use.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.ImageLayerStates.SetAlphaOperationArgument1(GorgonLibrary.Graphics.ImageOperationArguments)">
            <summary>
            Function to set the second alpha operation argument.
            </summary>		
            <param name="value">Operation argument to use.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.ImageLayerStates.SetAlphaOperationArgument2(GorgonLibrary.Graphics.ImageOperationArguments)">
            <summary>
            Function to set the third alpha operation argument.
            </summary>		
            <param name="value">Operation argument to use.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.ImageLayerStates.SetColorOperation(GorgonLibrary.Graphics.ImageOperations)">
            <summary>
            Function to set a color operation.
            </summary>		
            <param name="value">Operation to use.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.ImageLayerStates.SetColorOperationArgument0(GorgonLibrary.Graphics.ImageOperationArguments)">
            <summary>
            Function to set the first color operation argument.
            </summary>		
            <param name="value">Operation argument to use.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.ImageLayerStates.SetColorOperationArgument1(GorgonLibrary.Graphics.ImageOperationArguments)">
            <summary>
            Function to set the second color operation argument.
            </summary>		
            <param name="value">Operation argument to use.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.ImageLayerStates.SetColorOperationArgument2(GorgonLibrary.Graphics.ImageOperationArguments)">
            <summary>
            Function to set the third color operation argument.
            </summary>		
            <param name="value">Operation argument to use.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.ImageLayerStates.SetConstantColor(System.Drawing.Color)">
            <summary>
            Function to set the constant color.
            </summary>		
            <param name="value">Color to use.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.ImageLayerStates.SetImageMagFilter(GorgonLibrary.Graphics.ImageFilters)">
            <summary>
            Function to set an image magnification filter.
            </summary>
            <param name="value">Filter to use.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.ImageLayerStates.SetImageMinFilter(GorgonLibrary.Graphics.ImageFilters)">
            <summary>
            Function to set an image minification filter.
            </summary>		
            <param name="value">Filter to use.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.ImageLayerStates.SetBorderColor(System.Drawing.Color)">
            <summary>
            Function to set the border color.
            </summary>
            <param name="value">Border color</param>
        </member>
        <member name="M:GorgonLibrary.Internal.ImageLayerStates.SetUAddressing(GorgonLibrary.Graphics.ImageAddressing)">
            <summary>
            Function to set the horizontal addressing mode.
            </summary>
            <param name="value">Addressing mode.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.ImageLayerStates.SetVAddressing(GorgonLibrary.Graphics.ImageAddressing)">
            <summary>
            Function to set the vertical addressing mode.
            </summary>
            <param name="value">Addressing mode.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.ImageLayerStates.CopyStates(GorgonLibrary.Internal.ImageLayerStates)">
            <summary>
            Function to copy the image layer states.
            </summary>
            <param name="copy">Image layer states to copy.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.ImageLayerStates.SetStates">
            <summary>
            Function to set the render states.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.ImageLayerStates.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.ImageLayerStates.#ctor(GorgonLibrary.Internal.ImageLayerStates)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Internal.ImageLayerStates"/> class.
            </summary>
            <param name="copy">The image layer states to copy.</param>
        </member>
        <member name="P:GorgonLibrary.Internal.ImageLayerStates.DeviceReady">
            <summary>
            Property to return whether the device is ready or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.ImageLayerStates.Device">
            <summary>
            Property to return the device object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.ImageLayerStates.PropertyShouldSetState">
            <summary>
            Property to set or return whether the properties will affect the texture stage states.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.ImageLayerStates.AlphaOperation">
            <summary>
            Property to set or return the alpha operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.ImageLayerStates.AlphaOperationArgument0">
            <summary>
            Property to set or return alpha argument 0.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.ImageLayerStates.AlphaOperationArgument1">
            <summary>
            Property to set or return alpha argument 1.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.ImageLayerStates.AlphaOperationArgument2">
            <summary>
            Property to set or return alpha argument 2.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.ImageLayerStates.ColorOperation">
            <summary>
            Property to set or return the color operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.ImageLayerStates.ColorOperationArgument0">
            <summary>
            Property to set or return color argument 0.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.ImageLayerStates.ColorOperationArgument1">
            <summary>
            Property to set or return color argument 1.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.ImageLayerStates.ColorOperationArgument2">
            <summary>
            Property to set or return color argument 2.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.ImageLayerStates.ConstantColor">
            <summary>
            Property to set or return the constant color.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.ImageLayerStates.MinificationFilter">
            <summary>
            Property to set or return the minification filter.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.ImageLayerStates.MagnificationFilter">
            <summary>
            Property to set or return the magnification filter.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.ImageLayerStates.BorderColor">
            <summary>
            Property to set or return the border color.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.ImageLayerStates.HorizontalAddressing">
            <summary>
            Property to set or return the horizontal addressing mode.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.ImageLayerStates.VerticalAddressing">
            <summary>
            Property to set or return the vertical addressing mode.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ShaderTechniqueList">
            <summary>
            Object representing a list of shader techniques.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderTechniqueList.Add(GorgonLibrary.Graphics.FXShader)">
            <summary>
            Function to add the techniques from the shader.
            </summary>
            <param name="shader">Shader owner.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderTechniqueList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ShaderPass">
            <summary>
            Object representing a pass within the shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderPass.GetPass(System.Int32)">
            <summary>
            Function to get pass information.
            </summary>
            <param name="index">Index of the pass.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderPass.#ctor(GorgonLibrary.Graphics.ShaderTechnique,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="technique">Owning technique.</param>
            <param name="index">Index of the pass.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderPass.GorgonLibrary#Graphics#IShaderRenderer#GetDefinedConstants">
            <summary>
            Function to retrieve the pre-defined constant parameters from a shader.
            </summary>
            <remarks>
            A shader can contain pre-defined constant values that the library will update automatically.  This is done to cut down on some redundant code that the user will
            typically always have to perform when calling a shader.  For example, the user may have 3 shaders and each time a shader is used the current sprite image would have to
            be set by the user each time the image changed for each sprite.  Additionally, passing the transformations (i.e. rotation, scaling and translation) to the shader
            is also more work than it needs to be.
            <para>To use this "default" functionality your shader will have to implement one of these constants:
            <list type="table">
            			<listheader>
            				<term>Constant type and name</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>float4x4 _projectionMatrix</term>
            				<description>The current projection <see cref="T:GorgonLibrary.Matrix">matrix</see> defined by the current <see cref="T:GorgonLibrary.Graphics.Viewport">Viewport</see>.  Use this to transform vertices in a vertex shader into screen space.</description>
            			</item>
            			<item>
            				<term>Texture _spriteImage</term>
            				<description>This is the currently active <see cref="T:GorgonLibrary.Graphics.Image">image</see> (at index 0 in the texture stage) for a given <see cref="T:GorgonLibrary.Graphics.Sprite">Sprite</see> or series of sprites.</description>
            			</item>
            		</list>
            	</para>
            	<para>The constants are case sensitive and as such must be declared exactly as shown in the table above with the leading underscore character.  If the constant is not
            named properly it will not be used as a default.</para>
            	<para>To test whether the default constants are available, check the return value of <see cref="P:GorgonLibrary.Graphics.IShaderRenderer.HasProjectionMatrix">HasProjectionMatrix</see>
            or <see cref="P:GorgonLibrary.Graphics.IShaderRenderer.HasSpriteImage">HasSpriteImage</see> and if
            these properties return TRUE, then the constant has been implemented.</para>
            	<para>This function is meant to be called internally by the shader.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderPass.GetDefinedParameter(GorgonLibrary.Graphics.PredefinedShaderConstants)">
            <summary>
            Function to return the parameter associated with the predefiend constant.
            </summary>
            <param name="constant">Predefined constant representing the parameter.</param>
            <returns>
            The parameter interface for the <paramref name="constant"/>.
            </returns>
            <remarks>The function will return the associated parameter object for a given pre-defined constant.  The constant should be defined in the shader as one of:
            <list type="table">
            		<listheader>
            			<term>Constant type and name</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>float4x4 _projectionMatrix</term>
            			<description>The current projection <see cref="T:GorgonLibrary.Matrix">matrix</see> defined by the current <see cref="T:GorgonLibrary.Graphics.Viewport">Viewport</see>.  Use this to transform vertices in a vertex shader into screen space.</description>
            		</item>
            		<item>
            			<term>Texture _spriteImage</term>
            			<description>This is the currently active <see cref="T:GorgonLibrary.Graphics.Image">image</see> (at index 0 in the texture stage) for a given <see cref="T:GorgonLibrary.Graphics.Sprite">Sprite</see> or series of sprites.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderPass.GorgonLibrary#Graphics#IShaderRenderer#Begin">
            <summary>
            Function to begin the rendering with the shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderPass.GorgonLibrary#Graphics#IShaderRenderer#Render(GorgonLibrary.Graphics.PrimitiveStyle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function to render with the shader.
            </summary>
            <param name="primitiveStyle">Type of primitive to render.</param>
            <param name="vertexStart">Starting vertex to render.</param>
            <param name="vertexCount">Number of vertices to render.</param>
            <param name="indexStart">Starting index to render.</param>
            <param name="indexCount">Number of indices to render.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderPass.GorgonLibrary#Graphics#IShaderRenderer#End">
            <summary>
            Function to end rendering with the shader.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderPass.Owner">
            <summary>
            Property to return the owning technique for this pass.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderPass.PassIndex">
            <summary>
            Property to return the index of the shader pass.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderPass.HasProjectionMatrix">
            <summary>
            Property to return whether a projection matrix is available in the shader.
            </summary>
            <remarks>This shader constant should be represented in the shader as: <c>float4x4 _projectionMatrix</c>.  If this constant is found, this value will return TRUE.
            <para>If this is available the library will automatically assign a value to the constant for use in the shader.  This will contain a copy of the current projection <see cref="T:GorgonLibrary.Matrix">matrix</see> 
            used by the current <see cref="T:GorgonLibrary.Graphics.Viewport">viewport</see>.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderPass.HasSpriteImage">
            <summary>
            Property to return whether a sprite image is available in the shader.
            </summary>
            <remarks>This shader constant should be represented in the shader as: <c>Texture _spriteImage</c>.  If this constant is found, this value will return TRUE.
            <para>If this is available the library will automatically assign a value to the constant for use in the shader.  This will typically be the current image used by a <see cref="T:GorgonLibrary.Graphics.Sprite">sprite</see> 
            or a series of sprites (if using the same image).</para></remarks>
        </member>
        <member name="T:GorgonLibrary.Graphics.ShaderCache">
            <summary>
            Class representing a cache for shaders.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderCache.DestroyAll">
            <summary>
            Function to destroy all the shaders.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderCache.#cctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderCache.Shaders">
            <summary>
            Property to return the shaders in this factory.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.PixelShader">
            <summary>
            Object representing a pixel shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PixelShader.ShaderProfile(System.Version)">
            <summary>
            Function to retrieve the shader target profile.
            </summary>
            <param name="target">Version of the profile.</param>
            <returns>The shader target profile.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.PixelShader.OnRenderBegin">
            <summary>
            Function called before the rendering begins with this shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PixelShader.OnRender(GorgonLibrary.Graphics.PrimitiveStyle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function called when rendering with this shader.
            </summary>
            <param name="primitiveStyle">Type of primitive to render.</param>
            <param name="vertexStart">Starting vertex to render.</param>
            <param name="vertexCount">Number of vertices to render.</param>
            <param name="indexStart">Starting index to render.</param>
            <param name="indexCount">Number of indices to render.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PixelShader.OnRenderEnd">
            <summary>
            Function called after the rendering ends with this shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PixelShader.CreateShader">
            <summary>
            Function called to create the actual shader object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PixelShader.DestroyShader">
            <summary>
            Function called to destroy the shader object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.PixelShader.CompileShader(System.String,System.Version,GorgonLibrary.Graphics.ShaderCompileOptions)">
            <summary>
            Function to compile the shader source code.
            </summary>
            <param name="functionName">Name of the function to compile.</param>
            <param name="target">Pixel shader target version.</param>
            <param name="flags">Options to use for compilation.</param>
            <remarks>See <see cref="T:GorgonLibrary.Graphics.ShaderCompileOptions"/> for more information about the compile time options.
            <para>The target parameter can be 2.0, 2.1 (for 2_a), 2.2 (for 2_b), 2.0.1 (for 2_sw), 3.0 or 3.0.1 (for 3_sw).</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.PixelShader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.PixelShader"/> class.
            </summary>
            <param name="name">THe name of the pixel shader.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.PixelShader.#ctor(System.String,GorgonLibrary.Graphics.ShaderFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.PixelShader"/> class.
            </summary>
            <param name="name">THe name of the pixel shader.</param>
            <param name="function">Function that contains the pixel shader.</param>
        </member>
        <member name="T:GorgonLibrary.Graphics.DualShader">
            <summary>
            Object representing a single interface for vertex and pixel shaders.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.DualShader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.DualShader.GetParameters">
            <summary>
            Function to retrieve the parameters for a shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.DualShader.OnRenderBegin">
            <summary>
            Function called before the rendering begins with this shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.DualShader.OnRender(GorgonLibrary.Graphics.PrimitiveStyle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function called when rendering with this shader.
            </summary>
            <param name="primitiveStyle">Type of primitive to render.</param>
            <param name="vertexStart">Starting vertex to render.</param>
            <param name="vertexCount">Number of vertices to render.</param>
            <param name="indexStart">Starting index to render.</param>
            <param name="indexCount">Number of indices to render.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.DualShader.OnRenderEnd">
            <summary>
            Function called after the rendering ends with this shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.DualShader.DeviceLost">
            <summary>
            Function called when the device is in a lost state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.DualShader.DeviceReset">
            <summary>
            Function called when the device is reset.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.DualShader.Reset">
            <summary>
            Function to reset this shaders vertex and pixel shaders to the default pixel and vertex shaders.
            </summary>
            <remarks>The default vertex and pixel shaders automatically set their target profiles to the highest supported by the video card and Direct X 9.  Please note that this does NOT mean that it will be set a SM 4.0 profile, that profile is for DirectX 10 and later.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.DualShader.#ctor(System.String,GorgonLibrary.Graphics.PixelShader,GorgonLibrary.Graphics.VertexShader)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.DualShader"/> class.
            </summary>
            <param name="name">The name of the shader.</param>
            <param name="pixelShader">The pixel shader to use.</param>
            <param name="vertexShader">The vertex shader to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the name parameter is NULL or a zero length string.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.DualShader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.DualShader"/> class.
            </summary>
            <param name="name">Name of the shader..</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the name parameter is NULL or a zero length string.</exception>
        </member>
        <member name="P:GorgonLibrary.Graphics.DualShader.IsBinary">
            <summary>
            Property to return whether this shader is a binary (no source code) shader.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.DualShader.ShaderSource">
            <summary>
            Property to return the source code for the shaders.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.DualShader.IsCompiled">
            <summary>
            Property to return whether the shader has been compiled yet or not.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.DualShader.PixelShader">
            <summary>
            Property to set or return the pixel shader to use.
            </summary>
            <remarks>The user should try and ensure the pixel and vertex shaders are the same version, the default shader will automatically 
            default to the highest version supported by DirectX 9 and the video card.  If there's a version mismatch, for example, a vs_2_0 vertex
            shader and a ps_3_0 shader probably won't work as expected.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.DualShader.VertexShader">
            <summary>
            Property to set or return the vertex shader to use.
            </summary>
            <remarks>The user should try and ensure the pixel and vertex shaders are the same version, the default shader will automatically 
            default to the highest version supported by DirectX 9 and the video card.  If there's a version mismatch, for example, a vs_2_0 vertex
            shader and a ps_3_0 shader probably won't work as expected.</remarks>
        </member>
        <member name="T:GorgonLibrary.InputDevices.Mouse">
            <summary>
            Object that will represent mouse data.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Mouse.HideCursor">
            <summary>
            Function that will hide the cursor and rewind the cursor visibility stack.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Mouse.OnMouseWheelMove">
            <summary>
            Function to fire the mouse wheel move event.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Mouse.OnMouseMove">
            <summary>
            Function to fire the mouse move event.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Mouse.OnMouseDown(GorgonLibrary.InputDevices.MouseButtons)">
            <summary>
            Function to fire the mouse button down event.
            </summary>
            <param name="button">Button that's being pressed.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Mouse.OnMouseUp(GorgonLibrary.InputDevices.MouseButtons,System.Int32)">
            <summary>
            Function to fire the mouse button up event.
            </summary>
            <param name="button">Button that's being pressed.</param>
            <param name="clickCount">Number of full clicks in a timed period.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Mouse.Dispose">
            <summary>
            Function to perform clean up on the object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Mouse.IsDoubleClick(GorgonLibrary.InputDevices.MouseButtons)">
            <summary>
            Function to return whether a mouse click is a double click or not.
            </summary>
            <param name="button">Button used for double click.</param>
            <returns>TRUE if it is a double click, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Mouse.ConstrainData">
            <summary>
            Function to constrain the mouse data to the supplied ranges.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Mouse.ResetButtons">
            <summary>
            Function to reset the buttons.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Mouse.ResetWheelDelta">
            <summary>
            Function to reset the last mouse wheel delta value to zero.
            </summary>
            <remarks>This function is used to manually reset the last mouse wheel delta value.  This may be required if manually polling using the <see cref="P:GorgonLibrary.InputDevices.Mouse.WheelDelta">WheelDelta</see> property.</remarks>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Mouse.SetPosition(System.Single,System.Single)">
            <summary>
            Function to set the mouse position.
            </summary>
            <param name="x">Horizontal coordinate.</param>
            <param name="y">Vertical coordinate.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Mouse.SetDoubleClickRange(System.Single,System.Single)">
            <summary>
            Function to set the double click validity range.
            </summary>
            <param name="x">Number of horizontal pixels.</param>
            <param name="y">Number of vertial pixels.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Mouse.SetPositionRange(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Function to set the mouse position range limits.
            </summary>
            <param name="left">Left limit.</param>
            <param name="top">Top limit.</param>
            <param name="width">Width limit.</param>
            <param name="height">Height limit.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Mouse.SetWheelRange(System.Int32,System.Int32)">
            <summary>
            Function to set the mouse wheel range limits.
            </summary>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Mouse.#ctor(GorgonLibrary.InputDevices.Input)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Input interface that owns this device.</param>
        </member>
        <member name="E:GorgonLibrary.InputDevices.Mouse.MouseMove">
            <summary>
            Mouse moved event.
            </summary>
        </member>
        <member name="E:GorgonLibrary.InputDevices.Mouse.MouseDown">
            <summary>
            Mouse button down event.
            </summary>
        </member>
        <member name="E:GorgonLibrary.InputDevices.Mouse.MouseUp">
            <summary>
            Mouse button up event.
            </summary>
        </member>
        <member name="E:GorgonLibrary.InputDevices.Mouse.MouseWheelMove">
            <summary>
            Mouse wheel move event.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Mouse.WindowRectangle">
            <summary>
            Property to return the owner window client rectangle.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Mouse.DoubleClickRange">
            <summary>
            Property to set or return the range in which a double click is valid (pixels).
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Mouse.DoubleClickDelay">
            <summary>
            Property to set or return the double click delay in milliseconds.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Mouse.CursorVisible">
            <summary>
            Property to set or return whether the windows cursor is visible or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Mouse.Exclusive">
            <summary>
            Property to set or return whether the window has exclusive access or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Mouse.PositionRange">
            <summary>
            Property to set or return the position range.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Mouse.WheelRange">
            <summary>
            Property to set or return the mouse wheel range.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Mouse.WheelDelta">
            <summary>
            Property to return the relative wheel delta.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Mouse.RelativePosition">
            <summary>
            Property to return the relative horizontal amount moved.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Mouse.Position">
            <summary>
            Property to set or return the position of the mouse.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Mouse.Wheel">
            <summary>
            Property to set or return the mouse wheel position.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Mouse.Button">
            <summary>
            Property to return the mouse button(s) that are currently down.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.KeyByte">
            <summary>
            A key frame for manipulating data of the type <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyByte.SetupSplines">
            <summary>
            Function to set up the splines.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyByte.UpdateKeyData(GorgonLibrary.Graphics.Track.NearestKeys)">
            <summary>
            Function to update the data within the key frame.
            </summary>
            <param name="keyData">Interpolated key data used to help calculate data between keys.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyByte.ReadData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to retrieve data from the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyByte.WriteData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to persist the data into the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyByte.Update">
            <summary>
            Function to perform an update of the bound property.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyByte.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.KeyByte.#ctor(System.Single,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.KeyByte"/> class.
            </summary>
            <param name="time">The time (in milliseconds) at which this keyframe exists within the track.</param>
            <param name="value">Value of the key.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyByte.DataType">
            <summary>
            Property to return the type of data stored in the key.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.KeyByte.Value">
            <summary>
            Property to set or return the value of the key.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.EditorDragType">
            <summary>
            Type of drag to perform.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Internal.EditorDragType.None">
            <summary>
            No dragging.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Internal.EditorDragType.Sprite">
            <summary>
            Sprite can be dragged.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Internal.EditorDragType.Axis">
            <summary>
            Axis can be dragged.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.EditorCanDragAttribute">
            <summary>
            Attribute for sprite editor to determine min/max.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.EditorCanDragAttribute.#ctor(GorgonLibrary.Internal.EditorDragType)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Internal.EditorCanDragAttribute"/> class.
            </summary>
            <param name="dragType">Type of drag operation.</param>
        </member>
        <member name="P:GorgonLibrary.Internal.EditorCanDragAttribute.DragType">
            <summary>
            Property to set or return whether we're dragging the sprite or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.RenderTargetCache">
            <summary>
            Class to represent a cache for render targets.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTargetCache.DestroyAll">
            <summary>
            Function to destroy all the render targets.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderTargetCache.#cctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderTargetCache.Targets">
            <summary>
            Property to return the list of render targets.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.FXShader">
            <summary>
            HLSL Effects framework shader object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.GetParameters">
            <summary>
            Function to retrieve the parameters for a shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.OnRenderBegin">
            <summary>
            Function called before the rendering begins with this shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.OnRender(GorgonLibrary.Graphics.PrimitiveStyle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function called when rendering with this shader.
            </summary>
            <param name="primitiveStyle">Type of primitive to render.</param>
            <param name="vertexStart">Starting vertex to render.</param>
            <param name="vertexCount">Number of vertices to render.</param>
            <param name="indexStart">Starting index to render.</param>
            <param name="indexCount">Number of indices to render.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.OnRenderEnd">
            <summary>
            Function called after the rendering ends with this shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to release all resources, FALSE to only release unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.ShaderFromStream(System.String,GorgonLibrary.FileSystems.FileSystem,System.Resources.ResourceManager,System.IO.Stream,GorgonLibrary.Graphics.ShaderCompileOptions,System.Boolean,System.Int32)">
            <summary>
            Function to return an arbitrary object from a stream.
            </summary>
            <param name="name">Object name or path.</param>
            <param name="fileSystem">A file system that contains the object.</param>
            <param name="resources">A resource manager that is used to load the file(s).</param>
            <param name="stream">Stream that contains the object.</param>
            <param name="flags">Shader compilation flags.</param>
            <param name="isXML">TRUE if the stream contains XML data, FALSE if not.</param>
            <param name="bytes">Number of bytes to deserialize.</param>
            <returns>The object contained within the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.DeviceLost">
            <summary>
            Function called when the device is in a lost state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.DeviceReset">
            <summary>
            Function called when the device is reset.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.CompileShader(GorgonLibrary.Graphics.ShaderCompileOptions)">
            <summary>
            Function to compile the shader source code.
            </summary>
            <param name="flags">Options to use for compilation.</param>
            <remarks>See <see cref="T:GorgonLibrary.Graphics.ShaderCompileOptions"/> for more information about the compile time options.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.GetShaderFunction(System.String,System.String,GorgonLibrary.Graphics.ShaderCompileOptions)">
            <summary>
            Function to retrieve a shader function.
            </summary>
            <param name="function">Name of the function.</param>
            <param name="shaderTarget">Target for the shader function.</param>
            <param name="flags">Compilation options for the shader function.</param>
            <returns>The extracted function from the shader.</returns>
            <remarks>The shaderTarget parameter expects one of the following:
            <list type="table">
            	<listheader><term>Target value</term><description>Description</description></listheader>
            	<item><term>ps_major_minor</term><description>Pixel shader, where major is the major version number and minor is the minor version number (or letter).</description></item>
            	<item><term>vs_major_minor</term><description>Vertex shader, where major is the major version number and minor is the minor version number (or letter).</description></item>
            	<item><term>tx_1_0</term><description>Texture shader 1.0.</description></item>
            </list>
            <para>See <see cref="T:GorgonLibrary.Graphics.ShaderCompileOptions"/> for more information about the compile time options.</para>
            </remarks>		
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.FromFile(System.String,GorgonLibrary.Graphics.ShaderCompileOptions)">
            <summary>
            Function to load a Shader from disk.
            </summary>
            <param name="filename">Filename of the Shader to load.</param>
            <param name="flags">Shader compilation flags.</param>
            <returns>The loaded shader.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.FromFile(System.String,GorgonLibrary.Graphics.ShaderCompileOptions,System.Boolean)">
            <summary>
            Function to load a Shader from disk.
            </summary>
            <param name="filename">Filename of the Shader to load.</param>
            <param name="flags">Shader compilation flags.</param>
            <param name="binary">TRUE if the file is binary, FALSE if not.</param>
            <returns>The loaded shader.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.FromFileSystem(GorgonLibrary.FileSystems.FileSystem,System.String,GorgonLibrary.Graphics.ShaderCompileOptions)">
            <summary>
            Function to return the shader from a file system.
            </summary>
            <param name="fileSystem">File system to use.</param>
            <param name="filename">File name and path of the shader.</param>
            <param name="flags">Shader compilation flags.</param>
            <returns>The shader within the file system.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.FromFileSystem(GorgonLibrary.FileSystems.FileSystem,System.String,GorgonLibrary.Graphics.ShaderCompileOptions,System.Boolean)">
            <summary>
            Function to return the shader from a file system.
            </summary>
            <param name="fileSystem">File system to use.</param>
            <param name="filename">File name and path of the shader.</param>
            <param name="flags">Shader compilation flags.</param>
            <param name="binary">TRUE if the shader is a compiled binary, FALSE if not.</param>
            <returns>The shader within the file system.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.FromResource(System.String,System.Resources.ResourceManager,GorgonLibrary.Graphics.ShaderCompileOptions,System.Boolean)">
            <summary>
            Function to load an shader from resources.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="resourceManager">Resource manager to use.</param>
            <param name="flags">Shader compilation flags.</param>
            <param name="binary">TRUE if the shader is a compiled binary, FALSE if not.</param>
            <returns>The loaded shader.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.FromResource(System.String,GorgonLibrary.Graphics.ShaderCompileOptions,System.Boolean)">
            <summary>
            Function to load an shader from resources.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="flags">Flags for shader compilation.</param>
            <param name="binary">TRUE if the shader is a compiled binary, FALSE if not.</param>
            <returns>The loaded shader.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.FromStream(System.String,System.IO.Stream,GorgonLibrary.Graphics.ShaderCompileOptions,System.Int32,System.Boolean)">
            <summary>
            Function to load an shader from a stream.
            </summary>
            <param name="name">Name of the resource.</param>
            <param name="stream">Stream to use for loading.</param>	
            <param name="flags">Shader compilation flags.</param>
            <param name="bytes">Size in bytes of the data.</param>
            <param name="binary">TRUE if the shader is a compiled binary, FALSE if not.</param>
            <returns>The loaded shader.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Function to save the shader to a stream.
            </summary>
            <param name="stream">Stream to send the shader into.</param>
            <param name="binary">TRUE to save as binary, FALSE to save as text.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.Save(System.String)">
            <summary>
            Function to save the shader to a file.
            </summary>
            <param name="filename">Filename/path of the shader.</param>		
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.Save(System.String,System.Boolean)">
            <summary>
            Function to save the shader to a file.
            </summary>
            <param name="filename">Filename/path of the shader.</param>
            <param name="binary">TRUE to save as binary, FALSE to save as text.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.Save(GorgonLibrary.FileSystems.FileSystem,System.String)">
            <summary>
            Function to save the shader to a file system file.
            </summary>
            <param name="fileSystem">Filesystem to save the shader into.</param>
            <param name="filename">Name of the file.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.Save(GorgonLibrary.FileSystems.FileSystem,System.String,System.Boolean)">
            <summary>
            Function to save the shader to a file system file.
            </summary>
            <param name="fileSystem">Filesystem to save the shader into.</param>
            <param name="filename">Name of the file.</param>
            <param name="binary">TRUE to save as binary, FALSE to save as text.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.FXShader"/> class.
            </summary>
            <param name="name">Name for this object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the name parameter is NULL or a zero length string.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.GorgonLibrary#Serialization#ISerializable#WriteData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to persist the data into the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.FXShader.GorgonLibrary#Serialization#ISerializable#ReadData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to retrieve data from the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.FXShader.D3DEffect">
            <summary>
            Property to return the effect.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.FXShader.Techniques">
            <summary>
            Property to return a list of techniques.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.FXShader.Filename">
            <summary>
            Property to set or return the filename of the serializable object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.FXShader.IsResource">
            <summary>
            Property to return whether this object is an embedded resource.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Matrix">
            <summary>
            A value type representing a 4x4 matrix.
            </summary>
            <remarks>
            A matrix is used to track linear transformations and their coefficients.
            They are used often in 3D graphics to facilitate the transformation of 
            polygonal data.
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Matrix.m11">
            <summary>Matrix row 1 values.</summary>
        </member>
        <member name="F:GorgonLibrary.Matrix.m12">
            <summary>Matrix row 1 values.</summary>
        </member>
        <member name="F:GorgonLibrary.Matrix.m13">
            <summary>Matrix row 1 values.</summary>
        </member>
        <member name="F:GorgonLibrary.Matrix.m14">
            <summary>Matrix row 1 values.</summary>
        </member>
        <member name="F:GorgonLibrary.Matrix.m21">
            <summary>Matrix row 2 values.</summary>
        </member>
        <member name="F:GorgonLibrary.Matrix.m22">
            <summary>Matrix row 2 values.</summary>
        </member>
        <member name="F:GorgonLibrary.Matrix.m23">
            <summary>Matrix row 2 values.</summary>
        </member>
        <member name="F:GorgonLibrary.Matrix.m24">
            <summary>Matrix row 2 values.</summary>
        </member>
        <member name="F:GorgonLibrary.Matrix.m31">
            <summary>Matrix row 3 values.</summary>
        </member>
        <member name="F:GorgonLibrary.Matrix.m32">
            <summary>Matrix row 3 values.</summary>
        </member>
        <member name="F:GorgonLibrary.Matrix.m33">
            <summary>Matrix row 3 values.</summary>
        </member>
        <member name="F:GorgonLibrary.Matrix.m34">
            <summary>Matrix row 3 values.</summary>
        </member>
        <member name="F:GorgonLibrary.Matrix.m41">
            <summary>Matrix row 4 values.</summary>
        </member>
        <member name="F:GorgonLibrary.Matrix.m42">
            <summary>Matrix row 4 values.</summary>
        </member>
        <member name="F:GorgonLibrary.Matrix.m43">
            <summary>Matrix row 4 values.</summary>
        </member>
        <member name="F:GorgonLibrary.Matrix.m44">
            <summary>Matrix row 4 values.</summary>
        </member>
        <member name="M:GorgonLibrary.Matrix.SetColumn(System.Int32,GorgonLibrary.Vector3D)">
            <summary>
            Function to set a column in the matrix.
            </summary>
            <param name="column">Column number to set.</param>
            <param name="values">Values to fill the column with.</param>
        </member>
        <member name="M:GorgonLibrary.Matrix.Column(System.Int32)">
            <summary>
            Function to extract a column of values from the matrix.
            </summary>
            <param name="column">Column to extract.</param>
            <returns>A vector containing the values of the column from the matrix.</returns>
        </member>
        <member name="M:GorgonLibrary.Matrix.FromAxes(GorgonLibrary.Vector3D,GorgonLibrary.Vector3D,GorgonLibrary.Vector3D)">
            <summary>
            Function to set the values for the matrix based on Vectors representing the axes.
            </summary>
            <param name="x">X axis.</param>
            <param name="y">Y axis.</param>
            <param name="z">Z axis.</param>
        </member>
        <member name="M:GorgonLibrary.Matrix.Translate(System.Single,System.Single,System.Single)">
            <summary>
            Function to perform a translation on the matrix.
            </summary>
            <param name="x">Amount to translate on the x axis.</param>
            <param name="y">Amount to translate on the y axis..</param>
            <param name="z">Amount to translate on the z axis.</param>
        </member>
        <member name="M:GorgonLibrary.Matrix.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Function to scale the matrix.
            </summary>
            <param name="x">Amount to scale on the X axis.</param>
            <param name="y">Amount to scale on the Y axis.</param>
            <param name="z">Amount to scale on the Z axis.</param>
        </member>
        <member name="M:GorgonLibrary.Matrix.Translate(GorgonLibrary.Vector3D)">
            <summary>
            Function to perform a translation on the matrix with a vector..
            </summary>
            <param name="vec">Vector value to translate with</param>
        </member>
        <member name="M:GorgonLibrary.Matrix.Scale(GorgonLibrary.Vector3D)">
            <summary>
            Function to scale the matrix by a vector.
            </summary>
            <param name="vec">Vector to scale this matrix with.</param>
        </member>
        <member name="M:GorgonLibrary.Matrix.RotateX(System.Single)">
            <summary>
            Function to rotate around the X axis.
            </summary>
            <param name="degrees">Amount to rotate in degrees.</param>
        </member>
        <member name="M:GorgonLibrary.Matrix.RotateY(System.Single)">
            <summary>
            Function to rotate around the Y axis.
            </summary>
            <param name="degrees">Amount to rotate in degrees.</param>
        </member>
        <member name="M:GorgonLibrary.Matrix.RotateZ(System.Single)">
            <summary>
            Function to rotate around the Z axis.
            </summary>
            <param name="degrees">Amount to rotate in degrees.</param>
        </member>
        <member name="M:GorgonLibrary.Matrix.RotateEuler(System.Single,System.Single,System.Single)">
            <summary>
            Function to create this matrix from euler angles.
            </summary>		
            <param name="yaw">Yaw (Y-axis) rotation in degrees.</param>
            <param name="pitch">Pitch (X-axis) rotation in degrees.</param>
            <param name="roll">Roll (Z-axis) rotation in degrees.</param>
        </member>
        <member name="M:GorgonLibrary.Matrix.ProjectVector(GorgonLibrary.Vector3D)">
            <summary>
            Function to transform and project a vector into world space.
            </summary>
            <param name="vec">Vector to transform.</param>
            <returns>Transformed vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Matrix.ToString">
            <summary>
            Function to output a string representation of the matrix.
            </summary>
            <returns>String containing matrix values.</returns>
        </member>
        <member name="M:GorgonLibrary.Matrix.Multiply(GorgonLibrary.Matrix,GorgonLibrary.Matrix)">
            <summary>
            Function to multiply two matrices together.
            </summary>
            <param name="left">Matrix to multiply.</param>
            <param name="right">Matrix to multiply with.</param>
            <returns>Product of two matrices.</returns>
        </member>
        <member name="M:GorgonLibrary.Matrix.Multiply(GorgonLibrary.Matrix,GorgonLibrary.Vector3D)">
            <summary>
            Function to multiply a matrix by a 3D vector.
            </summary>
            <param name="mat">Matrix to multiply.</param>
            <param name="vec">Vector to multiply with.</param>
            <returns>A new vector containing the product.</returns>
        </member>
        <member name="M:GorgonLibrary.Matrix.Multiply(GorgonLibrary.Matrix,GorgonLibrary.Vector4D)">
            <summary>
            Function to multiply a matrix by a 4D vector.
            </summary>
            <param name="mat">Matrix to multiply.</param>
            <param name="vec">4D Vector to multiply with.</param>
            <returns>A new 4D vector containing the product.</returns>
        </member>
        <member name="M:GorgonLibrary.Matrix.Multiply(GorgonLibrary.Matrix,System.Single)">
            <summary>
            Function to multiply a matrix by a scalar value.
            </summary>
            <param name="mat">Matrix to multiply.</param>
            <param name="scalar">Scalar value to multiply by.</param>
            <returns>Product of the multiplication</returns>
        </member>
        <member name="M:GorgonLibrary.Matrix.Add(GorgonLibrary.Matrix,GorgonLibrary.Matrix)">
            <summary>
            Function to add two matrices together.
            </summary>
            <param name="left">Matrix to add with.</param>
            <param name="right">Matrix to add.</param>
            <returns>Combined matrices.</returns>
        </member>
        <member name="M:GorgonLibrary.Matrix.Subtract(GorgonLibrary.Matrix,GorgonLibrary.Matrix)">
            <summary>
            Function to subtract two matrices.
            </summary>
            <param name="left">Matrix to subtract from.</param>
            <param name="right">Matrix to subtract.</param>
            <returns>Matrix containing the difference.</returns>
        </member>
        <member name="M:GorgonLibrary.Matrix.Negate(GorgonLibrary.Matrix)">
            <summary>
            Function to negate a matrix.
            </summary>
            <param name="matrix">Matrix to negate.</param>
            <returns>Negative matrix.</returns>
        </member>
        <member name="M:GorgonLibrary.Matrix.op_Multiply(GorgonLibrary.Matrix,GorgonLibrary.Matrix)">
            <summary>
            Operator to multiply two matrices together.
            </summary>
            <param name="left">Matrix to multiply.</param>
            <param name="right">Matrix to multiply with.</param>
            <returns>Product of two matrices.</returns>
        </member>
        <member name="M:GorgonLibrary.Matrix.op_Multiply(GorgonLibrary.Matrix,GorgonLibrary.Vector4D)">
            <summary>
            Operator to multiply a matrix by a 4D vector.
            </summary>
            <param name="mat">Matrix to multiply.</param>
            <param name="vec">Vector to multiply.</param>
            <returns>A new vector containing the product.</returns>
        </member>
        <member name="M:GorgonLibrary.Matrix.op_Multiply(GorgonLibrary.Matrix,GorgonLibrary.Vector3D)">
            <summary>
            Operator to multiply a matrix by a vector.
            </summary>
            <param name="mat">Matrix to multiply.</param>
            <param name="vec">Vector to multiply with.</param>
            <returns>A new vector containing the product.</returns>
        </member>
        <member name="M:GorgonLibrary.Matrix.op_Multiply(GorgonLibrary.Matrix,System.Single)">
            <summary>
            Operator to multiply a matrix by a scalar value.
            </summary>
            <param name="mat">Matrix to multiply.</param>
            <param name="scalar">Scalar value to multiply by.</param>
            <returns>Product of the multiplication</returns>
        </member>
        <member name="M:GorgonLibrary.Matrix.op_Addition(GorgonLibrary.Matrix,GorgonLibrary.Matrix)">
            <summary>
            Operator to add two matrices together.
            </summary>
            <param name="left">Matrix to add with.</param>
            <param name="right">Matrix to add.</param>
            <returns>Combined matrices.</returns>
        </member>
        <member name="M:GorgonLibrary.Matrix.op_Subtraction(GorgonLibrary.Matrix,GorgonLibrary.Matrix)">
            <summary>
            Operator to subtract two matrices.
            </summary>
            <param name="left">Matrix to subtract from.</param>
            <param name="right">Matrix to subtract.</param>
            <returns>Matrix containing the difference.</returns>
        </member>
        <member name="M:GorgonLibrary.Matrix.op_UnaryNegation(GorgonLibrary.Matrix)">
            <summary>
            Operator to negate a matrix.
            </summary>
            <param name="matrix">Matrix to negate.</param>
            <returns>Negative matrix.</returns>
        </member>
        <member name="M:GorgonLibrary.Matrix.#ctor(System.Single[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Matrix.Zero">
            <summary>
            Property to return a zero matrix.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Matrix.Identity">
            <summary>
            Property to return an identity matrix.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Matrix.Adjoint">
            <summary>
            Property to return the adjoint of this matrix.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Property to return a value from the matrix by its row and column index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Matrix.Transpose">
            <summary>
            Property to return the transpose of this matrix.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Matrix.Determinant">
            <summary>
            Property to return the determinant of this matrix.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Matrix.Inverse">
            <summary>
            Property to return the inverse of this matrix.
            </summary>
        </member>
        <member name="T:GorgonLibrary.InputDevices.Input">
            <summary>
            Abstract class for the input interface.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Input.CreateKeyboard">
            <summary>
            Function to create the keyboard interface.
            </summary>
            <returns>A new keyboard interface.</returns>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Input.CreateMouse">
            <summary>
            Function to create the mouse interface.
            </summary>
            <returns>A new mouse interface.</returns>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Input.CreateJoystickList">
            <summary>
            Function to create the list of joystick interfaces.
            </summary>
            <returns>A new list of joystick interfaces.</returns>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Input.Owner_LostFocus(System.Object,System.EventArgs)">
            <summary>
            Handles the LostFocus event of the owner control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Input.Owner_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Handles the MouseLeave event of the owner control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Input.LoadInputPlugIn(System.String,System.String)">
            <summary>
            Function to load an input plug-in.
            </summary>
            <param name="plugInPath">Path to the plug-in DLL.</param>
            <param name="plugInName">Name of the plug-in to instance.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Input.Bind(System.Windows.Forms.Control)">
            <summary>
            Function to bind the input interface to a specific control.
            </summary>
            <param name="control">Control to bind to the interface.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Input.#ctor(GorgonLibrary.InputDevices.InputPlugIn)">
            <summary>
            Constructor.
            </summary>
            <param name="plugIn">Plug-in that created this object.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Input.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to release all resources, FALSE to only release unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Input.Dispose">
            <summary>
            Function to perform clean up.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Input.PlugIn">
            <summary>
            Property to return the plug-in that created this object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Input.RequireSignedPlugIn">
            <summary>
            Property to set or return whether the input plug-in requires signing.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Input.Window">
            <summary>
            Property to return the window that we're bound with.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Input.Mouse">
            <summary>
            Property to return the mouse interface.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Input.Keyboard">
            <summary>
            Property to return the keyboard interface.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Input.Joysticks">
            <summary>
            Property to return the list of joysticks.
            </summary>
        </member>
        <member name="T:GorgonLibrary.InputDevices.MouseInputEventArgs">
            <summary>
            Object representing mouse input event arguments.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.MouseInputEventArgs.#ctor(GorgonLibrary.InputDevices.MouseButtons,GorgonLibrary.InputDevices.MouseButtons,GorgonLibrary.Vector2D,System.Int32,GorgonLibrary.Vector2D,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="buttons">Buttons that are pressed during mouse event.</param>
            <param name="shiftButtons">Buttons that are held down during the mouse evnet.</param>
            <param name="position">Position of the mouse.</param>
            <param name="wheelPosition">Position of the wheel.</param>
            <param name="relativePosition">Relative position of the mouse.</param>
            <param name="wheelDelta">Relative position of the wheel.</param>
            <param name="clickCount">Number of clicks in a timed period.</param>
        </member>
        <member name="P:GorgonLibrary.InputDevices.MouseInputEventArgs.Buttons">
            <summary>
            Property to return buttons that were pressed during mouse movement.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.MouseInputEventArgs.ShiftButtons">
            <summary>
            Property to return the buttons that are being held down during the event.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.MouseInputEventArgs.Position">
            <summary>
            Property to return the position of the mouse.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.MouseInputEventArgs.WheelPosition">
            <summary>
            Property to return the wheel position.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.MouseInputEventArgs.RelativePosition">
            <summary>
            Property to return the amount that the mouse has moved since it last moved.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.MouseInputEventArgs.WheelDelta">
            <summary>
            Property to return the amount that the wheel has moved since the last update.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.MouseInputEventArgs.DoubleClick">
            <summary>
            Property to return if we've double clicked.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.MouseInputEventArgs.ClickCount">
            <summary>
            Property to return the number of full clicks.
            </summary>
        </member>
        <member name="T:GorgonLibrary.InputDevices.MouseInputEvent">
            <summary>
            Delegate used for sending a mouse input event.
            </summary>
            <param name="sender">Sender of this event.</param>
            <param name="e">Event parameters.</param>
        </member>
        <member name="T:GorgonLibrary.InputDevices.KeyboardInputEventArgs">
            <summary>
            Object representing keyboard input event arguments.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.KeyboardInputEventArgs.#ctor(GorgonLibrary.InputDevices.KeyboardKeys,GorgonLibrary.InputDevices.KeyboardKeys,GorgonLibrary.InputDevices.Keyboard.KeyCharMap,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="key">Key that is pressed.</param>
            <param name="modifierKey">Keys that are held down during the event.</param>
            <param name="character">Character that the key represents.</param>
            <param name="scanData">Scan code data.</param>
            <param name="left">TRUE if the modifier is left, FALSE if not.</param>
            <param name="right">TRUE if the modifier is right, FALSE if not.</param>
        </member>
        <member name="P:GorgonLibrary.InputDevices.KeyboardInputEventArgs.CharacterMapping">
            <summary>
            Property to return the character that the key represents.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.KeyboardInputEventArgs.Key">
            <summary>
            Property to return key that is pressed.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.KeyboardInputEventArgs.ModifierKeys">
            <summary>
            Property to return the keys that are being held down during the event.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.KeyboardInputEventArgs.Alt">
            <summary>
            Property to return if ALT is pressed or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.KeyboardInputEventArgs.Ctrl">
            <summary>
            Property to return if Ctrl is pressed or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.KeyboardInputEventArgs.Shift">
            <summary>
            Property to return if Shift is pressed or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.KeyboardInputEventArgs.ScanCodeData">
            <summary>
            Property to return the scan code data.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.KeyboardInputEventArgs.Left">
            <summary>
            Property to return whether a modifier key is on the left or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.KeyboardInputEventArgs.Right">
            <summary>
            Property to return whether a modifier key is on the right or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.InputDevices.KeyboardInputEvent">
            <summary>
            Delegate used for sending a keyboard input event.
            </summary>
            <param name="sender">Sender of this event.</param>
            <param name="e">Event parameters.</param>
        </member>
        <member name="T:GorgonLibrary.PlugIns.PlugInModuleList">
            <summary>
            Object representing a list of modules that contain plug-ins.
            </summary>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInModuleList.AssemblyExists(System.String)">
            <summary>
            Function to test the current app domain and determine if an assembly is already loaded.
            </summary>
            <param name="assemblyName">Name of the assembly to check for.</param>
            <returns>The assembly, or NULL if it doesn't exist in the application domain.</returns>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInModuleList.Contains(System.String)">
            <summary>
            Function to return whether a key exists in the collection or not.
            </summary>
            <param name="key">Key of the object in the collection.</param>
            <returns>TRUE if the object exists, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInModuleList.LoadModule(System.String)">
            <summary>
            Function to load a module.
            </summary>
            <param name="moduleName">Name of the module to load.</param>
            <returns>Assembly that was loaded.</returns>
        </member>
        <member name="M:GorgonLibrary.PlugIns.PlugInModuleList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.PlugIns.PlugInModuleList.Item(System.String)">
            <summary>
            Property to return an assembly from this list.
            </summary>
            <param name="key">Name of the assembly.</param>
            <returns>An assembly in the list.</returns>
        </member>
        <member name="P:GorgonLibrary.PlugIns.PlugInModuleList.Item(System.Int32)">
            <summary>
            Property to return an assembly from this list.
            </summary>
            <param name="index">Index of the assembly.</param>
            <returns>An assembly in the list.</returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.RenderImage">
            <summary>
            Object representing an image that can receive rendering.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.CreateRenderTarget(GorgonLibrary.Graphics.ImageBufferFormats,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Function to create the render target.
            </summary>
            <param name="format">Format of the buffer.</param>
            <param name="useDepthBuffer">TRUE to use a depth buffer, FALSE to exclude.</param>
            <param name="useStencil">TRUE to use a stencil buffer, FALSE to exclude.</param>
            <param name="preserve">When updating the image, TRUE will preserve the contents, FALSE will not.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.UpdateDepthStencilFormat(System.Boolean,System.Boolean)">
            <summary>
            Function to return a viable stencil/depth buffer.
            </summary>
            <param name="usestencil">TRUE to use a stencil, FALSE to exclude.</param>
            <param name="usedepth">TRUE to use a depth buffer, FALSE to exclude.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.Update">
            <summary>
            Function to render the scene for this target.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.Blit(System.Single,System.Single,System.Single,System.Single,System.Drawing.Color,GorgonLibrary.Graphics.BlitterSizeMode)">
            <summary>
            Function to draw this render image to the current render target.
            </summary>
            <param name="x">Left position of the blit.</param>
            <param name="y">Top position of the blit.</param>
            <param name="width">Width to blit with.</param>
            <param name="height">Height to blit with.</param>
            <param name="color">Color to modulate with the image.</param>
            <param name="mode">Mode to define how to handle dimensions that are smaller/larger than the image.</param>
            <remarks>Mode is used to either crop or scale the image when the dimensions are larger or smaller than the source image.  It can be one of:
            <para>
            <list type="table">
            <item><term>Scale</term><description>Scale the image up or down to match the width and height parameters.</description></item>
            <item><term>Crop</term><description>Clip the image if it's larger than the width and height passed.  If the image is smaller, then the image will be handled according to the
            <see cref="P:GorgonLibrary.Graphics.RenderTarget.HorizontalWrapMode">HorizontalWrapMode</see> or the
            <see cref="P:GorgonLibrary.Graphics.RenderTarget.VerticalWrapMode">VerticalWrapMode</see>.</description></item></list>
            </para></remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.Blit(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Function to draw this render image to the current render target.
            </summary>
            <param name="x">Left position of the blit.</param>
            <param name="y">Top position of the blit.</param>
            <param name="width">Width to blit with.</param>
            <param name="height">Height to blit with.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.Blit(System.Single,System.Single)">
            <summary>
            Function to draw this render image to the current render target.
            </summary>
            <param name="x">Left position of the blit.</param>
            <param name="y">Top position of the blit.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.Blit">
            <summary>
            Function to draw this render image to the current render target.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.SetDimensions(System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats,System.Boolean)">
            <summary>
            Function to set the dimensions for the render target.
            </summary>
            <param name="width">Width of the target.</param>
            <param name="height">Height of the target.</param>
            <param name="format">Format for the target.</param>
            <param name="preserve">TRUE to preserve the image contents, FALSE to destroy.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.SetDimensions(System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to set the dimensions for the render target.
            </summary>
            <param name="width">Width of the target.</param>
            <param name="height">Height of the target.</param>
            <param name="format">Format for the target.</param>		
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.SetDimensions(System.Int32,System.Int32)">
            <summary>
            Function to set the dimensions for the render target.
            </summary>
            <param name="width">Width of the target.</param>
            <param name="height">Height of the target.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.ConvertToImageData(GorgonLibrary.Graphics.Image)">
            <summary>
            Function to convert the render image into a standard image.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.CopyToImage(GorgonLibrary.Graphics.Image)">
            <summary>
            Function to copy the render target into an image.
            </summary>
            <param name="image">Image that will receive the data.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.CopyToImage(GorgonLibrary.Graphics.RenderImage)">
            <summary>
            Function to copy the render target into a render target image.
            </summary>
            <param name="destination">The render image that will receive the data.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.CopyFromImage(GorgonLibrary.Graphics.Image)">
            <summary>
            Function to copy the contents of an image into this render image.
            </summary>
            <param name="image">Image that will be copied.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.GetImageData(System.Drawing.Rectangle)">
            <summary>
            Function to retrieve the underlying image data for direct access.
            </summary>
            <param name="lockRectangle">The area to lock.</param>
            <returns>An <see cref="T:GorgonLibrary.Graphics.Image.ImageLockBox">Image.ImageLockBox</see> which contains the direct access to the underlying image.</returns>
            <remarks>This function acts as a means of direct image maniuplation.  This means while the user is given direct control over the contents of the image the system will 
            provide NO support for any data read/written to the lock area.  There will be no image resizing, no color conversion, the user will be on their own and must
            be aware of the image format.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.GetImageData">
            <summary>
            Function to retrieve the underlying image data for direct access.
            </summary>
            <returns>An <see cref="T:GorgonLibrary.Graphics.Image.ImageLockBox">Image.ImageLockBox</see> which contains the direct access to the underlying image.</returns>
            <remarks>This function acts as a means of direct image maniuplation.  This means while the user is given direct control over the contents of the image the system will 
            provide NO support for any data read/written to the lock area.  There will be no image resizing, no color conversion, the user will be on their own and must
            be aware of the image format.<para>This overload of the function will lock the entire image for reading/writing.</para></remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.#ctor(System.String,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.RenderImage"/> class.
            </summary>
            <param name="name">Name of the render image.</param>
            <param name="width">Width of the image.</param>
            <param name="height">Height of the image.</param>
            <param name="format">Format of the image.</param>
            <param name="useDepthBuffer">TRUE to use a depth buffer, FALSE to exclude.</param>
            <param name="useStencilBuffer">TRUE to use a stencil buffer, FALSE to exclude.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.#ctor(System.String,System.Int32,System.Int32,GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.RenderImage"/> class.
            </summary>
            <param name="name">Name of the render image.</param>
            <param name="width">Width of the image.</param>
            <param name="height">Height of the image.</param>
            <param name="format">Format of the image.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.Dispose(System.Boolean)">
            <summary>
            Function to handle clean up.
            </summary>
            <param name="disposing">TRUE if disposing of all objects, FALSE to only affect unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.DeviceLost">
            <summary>
            Function called when the device is in a lost state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.DeviceReset">
            <summary>
            Function called when the device is reset.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.RenderImage.ForceRelease">
            <summary>
            Function to force the loss of the objects data.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderImage.IsValidForMRTPostPixelShaderBlending">
            <summary>
            Property to return whether this render target is valid for post pixel shader blending.
            </summary>
            <value></value>
            <remarks>
            If the driver supports post pixel shader blending of render targets (<see cref="P:GorgonLibrary.Driver.SupportMRTPostPixelShaderBlending">Driver.SupportMRTPostPixelShaderBlending</see> = True) 
            then this property needs to be queried to find out if the particular render target can support post pixel shader blending.
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderImage.DepthBufferFormat">
            <summary>
            Property to return the depth buffer format.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderImage.UseDepthBuffer">
            <summary>
            Property to set or return whether we want to use a depth buffer or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderImage.UseStencilBuffer">
            <summary>
            Property to set or return whether we want to use a stencil buffer or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderImage.Format">
            <summary>
            Property to set or return the format of the render image.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderImage.Image">
            <summary>
            Property to return the image object used for the render target.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderImage.Width">
            <summary>
            Property to set or return the width of the render target.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.RenderImage.Height">
            <summary>
            Property to set or return the height of the render target.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.BatchVertex">
            <summary>
            A vertex used by the batch.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.BatchVertex.Vertex">
            <summary>
            A processed vertex.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.BatchVertex.Image">
            <summary>
            Image associated with the vertex.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.Fence">
            <summary>
            Fence to group a series of vertices by state change.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.Fence.Image">
            <summary>
            Image used for the fence.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.Fence.VertexStart">
            <summary>
            The start of the vertex fence.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.Fence.IndexStart">
            <summary>
            The start of the index fence.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.Fence.VertexCount">
            <summary>
            Number of vertices encompassed by the fence.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.Fence.IndexCount">
            <summary>
            Number of indices encompassed by the fence.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Fence.#ctor(GorgonLibrary.Graphics.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.Fence"/> struct.
            </summary>
            <param name="image">The image used by the fence.</param>
            <param name="vertexStart">The starting vertex for the fence.</param>
            <param name="vertexCount">The number of vertices encompassed by the fence.</param>
            <param name="indexStart">The starting index for the fence.</param>
            <param name="indexCount">The number of indices encompassed by the fence.</param>
        </member>
        <member name="T:GorgonLibrary.Graphics.Batch">
            <summary>
            A batch of sprites to be statically renderered.
            </summary>
            <remarks>The purpose of this object is to quickly render multiple sprites in one pass.  In the immediate type model used by the <see cref="T:GorgonLibrary.Graphics.Sprite">Sprite</see> object 
            the buffer where the sprites are stored is flushed when a change (image change, state change, etc...) occurs.  For example, if you draw multiple sprites and one of those sprites has an image that is different
            from the previous sprites, the buffer will flush all the previous sprites to the render target.  Then the process starts over with an empty buffer.  This has advantages, but 
            sometimes this will slow down the rendering process.<para>Batched sprites however will take multiple sprite objects and store them into a buffer and will flush that buffer
            only when the render target is updated.  This has the advantage of being able to draw all the sprites in one shot and those sprites will be "cached" each time the batch
            is drawn so that the buffers that store the sprites never need to be updated (unless a change is made).</para>
            <para>There is a caveat with this approach:  The sprites cannot move or be animated in any way.  This means that the sprites stored are "snapshots" of the sprite at a given 
            time and will not be affected by any transformations made after the fact.  The sprites will update when the batch is invalidated and rebuilt however, but this process is 
            slow and is not recommended for real time use.  The sprites in the batch will be affected by the batch transforms however, but all the sprites will be effected as a single 
            entity and not individually.</para>
            <para>The best usage of this object is in a "map" scenario, where the map is a tile map and the sprites that compose the map as tiles are blitted in one shot.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.BuildBuffers(System.Int32)">
            <summary>
            Function to build the buffers to use for the batch.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.RefreshBuffers">
            <summary>
            Function to re-fill the buffers.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.UpdateTransform">
            <summary>
            Function to update the transformation.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.SetPosition(System.Single,System.Single)">
            <summary>
            Function to set the position of the batch.
            </summary>
            <param name="x">Horizontal position of the batch.</param>
            <param name="y">Vertical position of the batch.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.SetAxis(System.Single,System.Single)">
            <summary>
            Function to set the axis for the batch.
            </summary>
            <param name="x">Horizontal position of the axis.</param>
            <param name="y">Vertical position of the axis.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.SetScale(System.Single,System.Single)">
            <summary>
            Function to set the scaling values for the batch.
            </summary>
            <param name="x">Horizontal scale of the batch.</param>
            <param name="y">Vertical scale of the batch.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.Refresh">
            <summary>
            Function to perform a re-build of the buffers used for the batch.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.AddClone``1(``0)">
            <summary>
            Function to add and clone a <see cref="T:GorgonLibrary.Graphics.Renderable">Renderable</see> item to the list.
            </summary>
            <typeparam name="T">Type of <see cref="T:GorgonLibrary.Graphics.Renderable">Renderable</see> to add to the batch.</typeparam>
            <param name="item">Renderable item to add to the list.</param>
            <returns>The clone of that renderable item.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.Remove(System.Int32)">
            <summary>
            Function to remove a renderable from the list by its index.
            </summary>
            <param name="index">Index of the renderable.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.Draw">
            <summary>
            Function to draw the contents of the static buffers.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.Batch"/> class.
            </summary>
            <param name="batchName">Name of the batch.</param>
            <param name="renderableCount">Initial number of renderables to store in the batch.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.IndexOf(GorgonLibrary.Graphics.Renderable)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.Insert(System.Int32,GorgonLibrary.Graphics.Renderable)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.System#Collections#Generic#IList{GorgonLibrary#Graphics#Renderable}#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.Add(GorgonLibrary.Graphics.Renderable)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.Contains(GorgonLibrary.Graphics.Renderable)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.CopyTo(GorgonLibrary.Graphics.Renderable[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            The type cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.Remove(GorgonLibrary.Graphics.Renderable)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Batch.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.Rotation">
            <summary>
            Property to set or return the angle of rotation for the batch in degrees.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.Position">
            <summary>
            Property to set or return the position of the batch.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.Axis">
            <summary>
            Property to set or return the axis of the batch.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.Scale">
            <summary>
            Property to set or return the scaling values of the batch.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.UniformScale">
            <summary>
            Property to set or return the uniform scaling value for the batch.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.Depth">
            <summary>
            Property to set or return the "depth" value for this batch.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.InheritDepthBias">
            <summary>
            Property to set or return whether we inherit the depth bias.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.InheritDepthWriteEnabled">
            <summary>
            Property to set or return whether we inherit the depth writing enabled flag.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.InheritDepthTestFunction">
            <summary>
            Property to set or return whether we inherit the depth testing function.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.InheritStencilEnabled">
            <summary>
            Property to set or return whether we inherit the stencil enabled flag from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.InheritStencilReference">
            <summary>
            Property to set or return whether we inherit the stencil reference from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.InheritStencilMask">
            <summary>
            Property to set or return whether we inherit the stencil mask from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.InheritStencilPassOperation">
            <summary>
            Property to set or return whether we inherit the stencil pass operation from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.InheritStencilFailOperation">
            <summary>
            Property to set or return whether we inherit the stencil failed operation from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.InheritStencilZFailOperation">
            <summary>
            Property to set or return whether we inherit the stencil z-failed operation from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.InheritStencilCompare">
            <summary>
            Property to set or return whether we inherit the stencil compare from the layer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.InheritAlphaMaskFunction">
            <summary>
            Property to set or return whether we inherit the alpha mask function from the layer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.InheritAlphaMaskValue">
            <summary>
            Property to set or return whether we inherit the alpha mask value from the layer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.InheritHorizontalWrapping">
            <summary>
            Property to set or return whether we inherit the horizontal wrapping from the layer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.InheritVerticalWrapping">
            <summary>
            Property to set or return whether we inherit the vertical wrapping from the layer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.InheritSmoothing">
            <summary>
            Property to set or return whether to inherit the smoothing mode from the global states.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.InheritBlending">
            <summary>
            Property to set or return whether to inherit the blending mode from the global states.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:GorgonLibrary.Graphics.Renderable"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.HorizontalWrapMode">
            <summary>
            Property to set or return the horizontal wrapping mode to use.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.VerticalWrapMode">
            <summary>
            Property to set or return the vertical wrapping mode to use.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.BorderColor">
            <summary>
            Property to set or return the color of the border when the wrapping mode is set to Border.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.Smoothing">
            <summary>
            Property to set or return the type of smoothing for the sprites.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.AlphaMaskFunction">
            <summary>
            Property to set or return the function used for alpha masking.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.AlphaMaskValue">
            <summary>
            Property to set or return the alpha value used for alpha masking.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.BlendingMode">
            <summary>
            Property to set or return the blending mode.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.SourceBlend">
            <summary>
            Property to set or return the source blending operation.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.DestinationBlend">
            <summary>
            Property to set or return the destination blending operation.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.SourceBlendAlpha">
            <summary>
            Property to set or return the source blending operation.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.DestinationBlendAlpha">
            <summary>
            Property to set or return the destination blending operation.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.StencilEnabled">
            <summary>
            Property to set or return whether to enable the use of the stencil buffer or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.StencilReference">
            <summary>
            Property to set or return the reference value for the stencil buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.StencilMask">
            <summary>
            Property to set or return the mask value for the stencil buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.StencilPassOperation">
            <summary>
            Property to set or return the operation for passing stencil values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.StencilFailOperation">
            <summary>
            Property to set or return the operation for the failing stencil values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.StencilZFailOperation">
            <summary>
            Property to set or return the stencil operation for the failing depth values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.StencilCompare">
            <summary>
            Property to set or return the stencil comparison function.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.GorgonLibrary#Graphics#IRenderableStates#UseIndices">
            <summary>
            Property to return whether to use an index buffer or not.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.GorgonLibrary#Graphics#IRenderableStates#PrimitiveStyle">
            <summary>
            Property to return the primitive style for the object.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.GorgonLibrary#Graphics#IRenderableStates#CullingMode">
            <summary>
            Property to set or return the culling mode.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.WrapMode">
            <summary>
            Property to set or return the wrapping mode to use.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.DepthWriteEnabled">
            <summary>
            Property to set or return whether to enable the depth buffer (if applicable) writing or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.DepthBufferBias">
            <summary>
            Property to set or return (if applicable) the depth buffer bias.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Batch.DepthTestFunction">
            <summary>
            Property to set or return the depth buffer (if applicable) testing comparison function.
            </summary>
        </member>
        <member name="T:GorgonLibrary.MathUtility">
            <summary>
            Utility class for mathematics.
            </summary>
            <remarks>
            This just provides a convenient interface for commonly used mathematical functions and constants.
            </remarks>
        </member>
        <member name="F:GorgonLibrary.MathUtility.PI">
            <summary>
            Constant containing the value of PI.
            </summary>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Pow(System.Single,System.Single)">
            <summary>
            Function to raise a value to a specified power.
            </summary>
            <param name="value">Value to raise.</param>
            <param name="power">Power to raise up to.</param>
            <returns>The value raised to the power.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.RoundInt(System.Single)">
            <summary>
            Function to round a floating point value to an integer.
            </summary>
            <param name="value">Value to round.</param>
            <returns>Rounded value.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Round(System.Single)">
            <summary>
            Function to round a floating point value to an integer.
            </summary>
            <param name="value">Value to round.</param>
            <returns>Rounded value.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Round(System.Single,System.Int32)">
            <summary>
            Function to round a floating point value.
            </summary>
            <param name="value">Value to round.</param>
            <param name="decimalPlaceCount">Number of decimal places to return.</param>
            <returns>Rounded value.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Round(System.Single,System.Int32,System.MidpointRounding)">
            <summary>
            Function to round a floating point value.
            </summary>
            <param name="value">Value to round.</param>
            <param name="decimalPlaceCount">Number of decimal places to return.</param>
            <param name="rounding">Determines how to round mid point numbers.</param>
            <returns>Rounded value.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Round(GorgonLibrary.Vector2D,System.Int32,System.MidpointRounding)">
            <summary>
            Function to round a vector value's components.
            </summary>
            <param name="value">The vector to round.</param>
            <param name="decimalPlaceCount">Number of decimal places to keep.</param>
            <param name="rounding">Determines how to round mid point numbers.</param>
            <returns>A vector with its component values rounded.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Round(GorgonLibrary.Vector2D,System.Int32)">
            <summary>
            Function to round a vector value's components.
            </summary>
            <param name="value">The vector to round.</param>
            <param name="decimalPlaceCount">Number of decimal places to keep.</param>
            <returns>A vector with its component values rounded.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Round(GorgonLibrary.Vector2D)">
            <summary>
            Function to round a vector value's components.
            </summary>
            <param name="value">The vector to round.</param>
            <returns>A vector with its component values rounded.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Cos(System.Single)">
            <summary>
            Function to return the cosine of an angle in radians.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>Cosine.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Sin(System.Single)">
            <summary>
            Function to return the sine of an angle in radians.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>Sine.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Tan(System.Single)">
            <summary>
            Function to return the tangent of an angle in radians.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>Tangent.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.ACos(System.Single)">
            <summary>
            Function to return the arc cosine in radians.
            </summary>
            <param name="cosine">Cosine value to convert.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.ASin(System.Single)">
            <summary>
            Function to return the arc sine in radians.
            </summary>
            <param name="sine">Sine value to convert.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.ATan(System.Single,System.Single)">
            <summary>
            Function to return the arc tangent in radians.
            </summary>
            <param name="y">Sin value to convert.</param>
            <param name="x">Cosine value to convert.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Sqrt(System.Single)">
            <summary>
            Function to return the square root of a number.
            </summary>
            <param name="sqvalue">Number to get the square root of.</param>
            <returns>Square root of the number.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.InverseSqrt(System.Single)">
            <summary>
            Function to return the inverse square root of a number.
            </summary>
            <param name="sqvalue">Number to get the inverse square root of.</param>
            <returns>Inverted square root.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Abs(System.Single)">
            <summary>
            Function to return the absolute value of a number.
            </summary>
            <param name="number">Number to get the absolute value of.</param>
            <returns>Absolute value of the number.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Abs(System.Int32)">
            <summary>
            Function to return the absolute value of a number.
            </summary>
            <param name="number">Number to get the absolute value of.</param>
            <returns>Absolute value of the number.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.EqualFloat(System.Single,System.Single,System.Single)">
            <summary>
            Function to return if two floating point numbers are equal within a threshold.
            </summary>
            <param name="value1">First float value to compare.</param>
            <param name="value2">Second float value to compare.</param>
            <param name="epsilon">Tolerance of floating point error.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.EqualFloat(System.Single,System.Single)">
            <summary>
            Function to return if two floating point numbers are equal.
            </summary>
            <param name="value1">First float value to compare.</param>
            <param name="value2">Second float value to compare.</param>		
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Radians(System.Single)">
            <summary>
            Function to convert degrees into radians.
            </summary>
            <param name="degrees">Degrees</param>
            <returns>Radian equivilant of degrees.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Degrees(System.Single)">
            <summary>
            Function to convert radians into degrees.
            </summary>
            <param name="radians">Radians</param>
            <returns>Degree equivilant of radians.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Max(System.Single,System.Single)">
            <summary>
            Function to return the highest of two values.
            </summary>
            <returns>Highest of the values supplied.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Min(System.Single,System.Single)">
            <summary>
            Function to return the lowest of two values.
            </summary>
            <returns>Highest of the values supplied.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Max(System.Int16,System.Int16)">
            <summary>
            Function to return the highest of two values.
            </summary>
            <returns>Highest of the values supplied.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Min(System.Int16,System.Int16)">
            <summary>
            Function to return the lowest of two values.
            </summary>
            <returns>Highest of the values supplied.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Max(System.Int32,System.Int32)">
            <summary>
            Function to return the highest of two values.
            </summary>
            <returns>Highest of the values supplied.</returns>
        </member>
        <member name="M:GorgonLibrary.MathUtility.Min(System.Int32,System.Int32)">
            <summary>
            Function to return the lowest of two values.
            </summary>
            <returns>Highest of the values supplied.</returns>
        </member>
        <member name="T:GorgonLibrary.InputDevices.KeyState">
            <summary>
            Enumeration containing key state.
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyState.Up">
            <summary>
            Key is not pressed.
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.KeyState.Down">
            <summary>
            Key is pressed.
            </summary>
        </member>
        <member name="T:GorgonLibrary.InputDevices.Keyboard">
            <summary>
            Object that will represent keyboard data.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Keyboard.OnKeyDown(GorgonLibrary.InputDevices.KeyboardKeys,GorgonLibrary.InputDevices.KeyboardKeys,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Function to fire the key down event.
            </summary>
            <param name="key">Key that's pressed.</param>
            <param name="modifiers">Modifier keys.</param>
            <param name="scan">Scan code data.</param>
            <param name="left">TRUE if the modifier is left, FALSE if not.</param>
            <param name="right">TRUE if the modifier is right, FALSE if not.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Keyboard.OnKeyUp(GorgonLibrary.InputDevices.KeyboardKeys,GorgonLibrary.InputDevices.KeyboardKeys,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Function to fire the key up event.
            </summary>
            <param name="key">Key that's pressed.</param>
            <param name="modifiers">Modifier keys.</param>
            <param name="scan">Scan code data.</param>
            <param name="left">TRUE if the modifier is left, FALSE if not.</param>
            <param name="right">TRUE if the modifier is right, FALSE if not.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Keyboard.GetDefaultKeyMapping">
            <summary>
            Function to retrieve character mappings for keys.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Keyboard.#ctor(GorgonLibrary.InputDevices.Input)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">The control that owns this device.</param>
        </member>
        <member name="E:GorgonLibrary.InputDevices.Keyboard.KeyDown">
            <summary>
            Key down event.
            </summary>
        </member>
        <member name="E:GorgonLibrary.InputDevices.Keyboard.KeyUp">
            <summary>
            Key up event.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Keyboard.KeyMappings">
            <summary>
            Property to return the keyboard to character mappings.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Keyboard.Exclusive">
            <summary>
            Property to set or return whether the window has exclusive access or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Keyboard.KeyStates">
            <summary>
            Property to return the key states.
            </summary>
        </member>
        <member name="T:GorgonLibrary.InputDevices.Keyboard.KeyCharMap">
            <summary>
            Value type containing the code and text character mapping.
            </summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.Keyboard.KeyCharMap.Key">
            <summary>Key that the character represents.</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.Keyboard.KeyCharMap.Character">
            <summary>Character representation.</summary>
        </member>
        <member name="F:GorgonLibrary.InputDevices.Keyboard.KeyCharMap.Shifted">
            <summary>Character representation with shift modifier.</summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Keyboard.KeyCharMap.#ctor(GorgonLibrary.InputDevices.KeyboardKeys,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="key">Key that the character represents.</param>
            <param name="character">Character representation.</param>
            <param name="shifted">Character representation with shift modifier.</param>
        </member>
        <member name="T:GorgonLibrary.InputDevices.Keyboard.KeyMapCollection">
            <summary>
            Object representing the keyboard mappings.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Keyboard.KeyMapCollection.Add(GorgonLibrary.InputDevices.KeyboardKeys,System.String,System.String)">
            <summary>
            Function to add a key mapping to the collection.
            </summary>
            <param name="key">Key to map.</param>
            <param name="value">Value to map to the key.</param>
            <param name="shiftedValue">Value to map if the shift key is held down.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Keyboard.KeyMapCollection.Contains(GorgonLibrary.InputDevices.KeyboardKeys)">
            <summary>
            Function to return whether a key exists in this collection or not.
            </summary>
            <param name="key">Key to check for.</param>
            <returns>TRUE if found, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Keyboard.KeyMapCollection.Remove(GorgonLibrary.InputDevices.KeyboardKeys)">
            <summary>
            Function to remove the specified key from the mappings list.
            </summary>
            <param name="key">Key to remove.</param>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Keyboard.KeyMapCollection.Clear">
            <summary>
            Function to clear the key mappings.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Keyboard.KeyMapCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.InputDevices.Keyboard.KeyMapCollection"/> class.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Keyboard.KeyMapCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Keyboard.KeyMapCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Keyboard.KeyMapCollection.Item(GorgonLibrary.InputDevices.KeyboardKeys)">
            <summary>
            Property to return the key mapping assigned to the key.
            </summary>
            <param name="key">Key to retrieve mapping for.</param>
            <returns>Character mapping for the key.</returns>
        </member>
        <member name="T:GorgonLibrary.InputDevices.Keyboard.KeyStateCollection">
            <summary>
            Object representing the keyboard state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.InputDevices.Keyboard.KeyStateCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.InputDevices.Keyboard.KeyStateCollection"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.InputDevices.Keyboard.KeyStateCollection.Item(GorgonLibrary.InputDevices.KeyboardKeys)">
            <summary>
            Property to return the state of a given key.
            </summary>
            <param name="key">Key to check.</param>
            <returns>The state of the key.</returns>
        </member>
        <member name="T:GorgonLibrary.GorgonErrors">
            <summary>
            A list of predefined error messages to package with <see cref="T:GorgonLibrary.GorgonException"/>.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonErrors.NotInitialized">
            <summary>
            Library was not initialized.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonErrors.CannotCreate">
            <summary>
            Error creating an object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonErrors.CannotUpdate">
            <summary>
            Error updating an object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonErrors.CannotLoad">
            <summary>
            Error while trying to load an object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonErrors.CannotSave">
            <summary>
            Error while trying to load an object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonErrors.CannotLock">
            <summary>
            Error while trying to lock some data.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonErrors.NotLocked">
            <summary>
            Data was not locked.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonErrors.NoHALDevices">
            <summary>
            No applicable hardware accelerated devices were found.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonErrors.ShaderCompilationFailed">
            <summary>
            Shader compilation failed.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonErrors.CannotReadData">
            <summary>
            Cannot read data.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonErrors.InvalidFormat">
            <summary>
            Invalid format.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonErrors.NoDevice">
            <summary>
            No valid device object was found.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonErrors.HardwareError">
            <summary>
            Driver reported an internal error.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonErrors.InvalidPlugin">
            <summary>
            The plug-in type is not valid.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonErrors.CannotWriteData">
            <summary>
            Error while writing data.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonErrors.AccessDenied">
            <summary>
            Access is denied.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonErrors.CannotBindInputDevice">
            <summary>
            Cannot bind an input device.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonErrors.CannotBindTarget">
            <summary>
            Cannot bind render target(s).
            </summary>
        </member>
        <member name="T:GorgonLibrary.GorgonError">
            <summary>
            A defined error message to be packaged with <see cref="T:GorgonLibrary.GorgonException"/>.
            </summary>
        </member>
        <member name="M:GorgonLibrary.GorgonError.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.GorgonError.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:GorgonLibrary.GorgonError.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.GorgonError.op_Equality(GorgonLibrary.GorgonError,GorgonLibrary.GorgonError)">
            <summary>
            Operator to test for equality.
            </summary>
            <param name="left">The left item to test.</param>
            <param name="right">The right item to test.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonError.op_Inequality(GorgonLibrary.GorgonError,GorgonLibrary.GorgonError)">
            <summary>
            Operator to test for inequality.
            </summary>
            <param name="left">The left item to test.</param>
            <param name="right">The right item to test.</param>
            <returns>TRUE if not equal, FALSE if the items are equal.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonError.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonError"/> struct.
            </summary>
            <param name="name">Name for the error.</param>
            <param name="code">The code.</param>
            <param name="description">The description.</param>
        </member>
        <member name="P:GorgonLibrary.GorgonError.Description">
            <summary>
            Property to set or return the error message to sent with the exception.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonError.Code">
            <summary>
            Property to set or return the error code to send with the exception.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonError.Name">
            <summary>
            Property to return the name of the error.
            </summary>
        </member>
        <member name="T:GorgonLibrary.FileSystems.FileSystemList">
            <summary>
            Object representing the file system list.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemList.Add(GorgonLibrary.FileSystems.FileSystem)">
            <summary>
            Function to add a file system.
            </summary>
            <param name="fileSystem">File system to add.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemList.Clear">
            <summary>
            Function to clear the list.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemList.Remove(System.String)">
            <summary>
            Function to remove a file system.
            </summary>
            <param name="fileSystem">File system to remove.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemList.Item(System.String)">
            <summary>
            Property to return a file system.
            </summary>
            <param name="key">Name of the file system.</param>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemList.Item(System.Int32)">
            <summary>
            Property to return a file system.
            </summary>
            <param name="index">Index of the file system.</param>
        </member>
        <member name="T:GorgonLibrary.Internal.DrawingMode">
            <summary>
            Enumeration for drawing modes.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Internal.DrawingMode.Solid">
            <summary>Solid polygons.</summary>
        </member>
        <member name="F:GorgonLibrary.Internal.DrawingMode.Wireframe">
            <summary>Wireframe polygons.</summary>
        </member>
        <member name="F:GorgonLibrary.Internal.DrawingMode.Points">
            <summary>Vertex points.</summary>
        </member>
        <member name="T:GorgonLibrary.Internal.ShadingMode">
            <summary>
            Enumeration for shading modes.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Internal.ShadingMode.Flat">
            <summary>Flat shading.</summary>
        </member>
        <member name="F:GorgonLibrary.Internal.ShadingMode.Gouraud">
            <summary>Gouraud shading.</summary>
        </member>
        <member name="T:GorgonLibrary.Internal.BufferUsages">
            <summary>
            Enumeration for buffer usage types.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Internal.BufferUsages.Static">
            <summary>
            Static buffers.  A static buffer should not be modified very often or at all
            if possible.  These buffers are typically stored in video RAM.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Internal.BufferUsages.Dynamic">
            <summary>
            Make a dynamic buffer, good for when there's going to be frequent changes
            to the buffer.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Internal.BufferUsages.WriteOnly">
            <summary>
            An optimization to make the buffer write only, reading from a buffer
            with writeonly set will result in failure.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Internal.BufferUsages.ForceSoftware">
            <summary>
            Force this buffer into standard memory as opposed to video RAM.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Internal.BufferUsages.UseSystemMemory">
            <summary>
            Put this buffer into system memory.  This buffer will be inaccessable to 
            Direct3D and can only be used as storage.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.BufferLockFlags">
            <summary>
            Flags used for buffer locking.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Internal.BufferLockFlags.Normal">
            <summary>
            No locking flags, used with static buffers.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Internal.BufferLockFlags.NoOverwrite">
            <summary>
            This flag will guarantee that we will not overwrite any data in
            the buffer and allow us to continue rendering.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Internal.BufferLockFlags.Discard">
            <summary>
            This flag will discard the contents of the buffer and returns a
            new pointer to a memory area to avoid stalls.  Only to be used
            on dynamic buffers.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Internal.BufferLockFlags.ReadOnly">
            <summary>
            This flag will make the buffer read only, and give certain optimizations.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.IndexBufferType">
            <summary>
            Flags for index buffer types.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Internal.IndexBufferType.Index16">
            <summary>
            Use 16 bit indices.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Internal.IndexBufferType.Index32">
            <summary>
            Use 32 bit indices.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.BufferTypes">
            <summary>
            Enumeration containing the types of buffers.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Internal.BufferTypes.Vertex">
            <summary>
            Vertex buffer.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Internal.BufferTypes.Index">
            <summary>
            Index buffer.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Internal.BufferTypes.Image">
            <summary>
            Image buffer.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.AnimationState">
            <summary>
            Animation states.
            </summary>
            <remarks>
            These states describe if an animation can have its time advanced or not.  
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.AnimationState.Playing">
            <summary>Animation is currently in a play state and is ready to have its time position advanced.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.AnimationState.Stopped">
            <summary>Animation is currently in a stopped state and changes to its time position will be ignored.</summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.Animation">
            <summary>
            An animation object will contain animation data that can be applied to a animation capable object.
            </summary>
            <remarks>
            Animations can be used to move a sprite, change its color over time, or even flip between individual frames.
            <para>
            An animation is composed of several tracks, which represent a specific type of animation.  Currently there are 3 tracks:
            <list type="table">
            		<listheader>
            			<term>Type</term>
            			<description> Description</description>
            		</listheader>
            		<item>
            			<term>Color</term>
            			<description> Used to animate the color and alpha related properties of an animated object.</description>
            		</item>
            		<item>
            			<term>Frame</term>
            			<description> Used to flip between frames of animation.</description>
            		</item>
            		<item>
            			<term>Transformation</term>
            			<description> Used to apply move, scale or rotate transformations to the animated object.</description>
            		</item>
            	</list>
            </para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.Animation.GetRangeValues(System.Reflection.PropertyInfo)">
            <summary>
            Function to retrieve the range values for the property.
            </summary>
            <param name="property">Property to retrieve the range from.</param>
            <returns>Range of the value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Animation.ValueIsRounded(System.Reflection.PropertyInfo)">
            <summary>
            Function to return whether to round the data for the values or not.
            </summary>
            <param name="property">Property to examine.</param>
            <returns>TRUE to round, FALSE to ignore.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Animation.ValueCanBeDragged(System.Reflection.PropertyInfo)">
            <summary>
            Function to return whether the editor can drag the data values or not with the mouse.
            </summary>
            <param name="property">Property to examine.</param>
            <returns>TRUE to drag, FALSE to ignore.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Animation.CreateAnimation(System.String,System.Single)">
            <summary>
            Function to create a new animation object.
            </summary>
            <param name="name">Name of the animation object.</param>
            <param name="length">Length of the animation in milliseconds.</param>
            <returns>A new animation object.</returns>
            <remarks>This function is meant to be overridden in a derived class to return a custom animation object type.
            <para>This function is meant to only to be used internally by the <see cref="M:GorgonLibrary.Graphics.Animation.Clone">Clone</see> method.</para></remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.Animation.OnAnimationTrackDefine(System.Object,GorgonLibrary.Graphics.AnimationTrackDefineEventArgs)">
            <summary>
            Function called when the animation needs to define an unknown track type.
            </summary>
            <param name="sender">Object that sent the event.</param>
            <param name="e">Event parameters.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Animation.SetOwner(GorgonLibrary.Graphics.IAnimated)">
            <summary>
            Function to set the owner for this animation.
            </summary>
            <param name="owner">Owner for the animation.</param>
            <remarks>
            This function will enumerate the properties on the <paramref name="owner"/> object that are marked with the <see cref="T:GorgonLibrary.Graphics.AnimatedAttribute">Animated</see> 
            attribute and will create <see cref="T:GorgonLibrary.Graphics.Track">tracks</see> for each of the properties.  All keys assigned to those tracks will ultimately update 
            the properties assigned to the tracks.<para>The types of the tracks correspond with the type value passed to the Animated attribute.</para>
            <para>Calling this function will wipe out any keys and/or tracks in the animation.</para></remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.Animation.Clone(GorgonLibrary.Graphics.IAnimated)">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <param name="newOwner">New object that will own this animation.</param>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.Animation.ApplyAnimation">
            <summary>
            Function to apply the animation to this owning object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Animation.Advance(System.Single)">
            <summary>
            Function to advance the animation by a specific time in milliseconds.
            </summary>
            <param name="time">Time in milliseconds.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Animation.Advance(GorgonLibrary.TimingData)">
            <summary>
            Function to advance the animation by the timing data provided.
            </summary>
            <param name="data">Timing data to use.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Animation.Reset">
            <summary>
            Function to reset the animation.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.Animation.#ctor(System.String,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the animation.</param>
            <param name="length">Length of the animation in milliseconds.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Animation.ReadVersion1Animation(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to read in the old version 1 file format.
            </summary>
            <param name="serializer">Serializer to use to read the format.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Animation.GorgonLibrary#Serialization#ISerializable#WriteData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to persist the data into the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.Animation.GorgonLibrary#Serialization#ISerializable#ReadData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function to retrieve data from the serializer stream.
            </summary>
            <param name="serializer">Serializer that's calling this function.</param>
        </member>
        <member name="E:GorgonLibrary.Graphics.Animation.AnimationStopped">
            <summary>
            Event fired when an animation has stopped.
            </summary>
        </member>
        <member name="E:GorgonLibrary.Graphics.Animation.AnimationStarted">
            <summary>
            Event fired when an animation has started.
            </summary>
        </member>
        <member name="E:GorgonLibrary.Graphics.Animation.AnimationAdvanced">
            <summary>
            Event fired when the animation current time has advanced.
            </summary>
        </member>
        <member name="E:GorgonLibrary.Graphics.Animation.AnimationTrackDefinition">
            <summary>
            Event fired when the animation needs to define the type of a track.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Animation.HasKeys">
            <summary>
            Property to return whether there are keys in the animation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Animation.FrameRate">
            <summary>
            Property to set or return the frame rate.
            </summary>
            <remarks>This is just metadata and is only used for display purposes.  Its primary use is in the sprite editor.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Animation.Name">
            <summary>
            Property to set or return the name.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Animation.Looped">
            <summary>
            Property to set or return whether the animation should be looping or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Animation.Loops">
            <summary>
            Property to get or set the number of times an animation should loop before stopping.
            Anything below or equal to 0 means infinite looping.
            This property will automatically set Looped to true if it is disabled.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Animation.CurrentLoop">
            <summary>
            Property to get the current loop that this animation is on.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Animation.Enabled">
            <summary>
            Property to set or return whether the animation is enabled or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Animation.Owner">
            <summary>
            Property to return the owner of this animation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Animation.Tracks">
            <summary>
            Property to return the collection of tracks for this animation.
            </summary>
            <remarks>Each track corresponds to an animation property on the owner object.<para>Custom tracks can be added to this collection as well.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.Animation.Length">
            <summary>
            Property to set or return the length of the animation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Animation.AnimationState">
            <summary>
            Property to set or return the state of the animation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Animation.CurrentTime">
            <summary>
            Property to set or return the current time.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Animation.GorgonLibrary#Serialization#ISerializable#Filename">
            <summary>
            Property to return the filename of the serializable object.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.Animation.GorgonLibrary#Serialization#ISerializable#IsResource">
            <summary>
            Property to return whether this object is an embedded resource.
            </summary>
            <value></value>
        </member>
        <member name="T:GorgonLibrary.Serialization.BinarySerializer">
            <summary>
            Object representing a binary serializer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.Dispose(System.Boolean)">
            <summary>
            Function to perform clean up.
            </summary>
            <param name="disposing">TRUE to perform clean up of all objects.  FALSE to clean up only unmanaged objects.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.Serialize">
            <summary>
            Function to serialize an object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.Deserialize">
            <summary>
            Function to deserialize an object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.Write(System.String,System.String)">
            <summary>
            Function to write a string value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.Write(System.String,System.Char)">
            <summary>
            Function to write a character value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.Write(System.String,System.Char[],System.Int32,System.Int32)">
            <summary>
            Function to write an array of character values to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="values">Values to write.</param>
            <param name="start">Array index to start at.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.Write(System.String,System.UInt64)">
            <summary>
            Function to write an unsigned long value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.Write(System.String,System.Int64)">
            <summary>
            Function to write a long value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.Write(System.String,System.UInt32)">
            <summary>
            Function to write an unsigned integer value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.Write(System.String,System.Int32)">
            <summary>
            Function to write an integer value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.Write(System.String,System.Single)">
            <summary>
            Function to write a floating point value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.Write(System.String,System.Double)">
            <summary>
            Function to write a floating point value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.Write(System.String,System.UInt16)">
            <summary>
            Function to write an unsigned short value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.Write(System.String,System.Int16)">
            <summary>
            Function to write a short value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.Write(System.String,System.SByte)">
            <summary>
            Function to write a signed byte value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.Write(System.String,System.Byte)">
            <summary>
            Function to write a byte value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.Write(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Function to write an array of byte values to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="values">Values to write.</param>
            <param name="start">Array index to start at.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.Write(System.String,System.Boolean)">
            <summary>
            Function to write a boolean value to the serialization stream.
            </summary>
            <param name="name">Name of the value to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.ReadBool(System.String)">
            <summary>
            Function to read a boolean value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.ReadBytes(System.String,System.Int32)">
            <summary>
            Function to read an array of byte values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <param name="count">The count of bytes to read.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.ReadBytes(System.String)">
            <summary>
            Function to read an array of byte values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.ReadByte(System.String)">
            <summary>
            Function to read a byte value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.ReadSByte(System.String)">
            <summary>
            Function to read a signed byte value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.ReadInt16(System.String)">
            <summary>
            Function to read a short value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.ReadUInt16(System.String)">
            <summary>
            Function to read an unsigned short value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.ReadDouble(System.String)">
            <summary>
            Function to read a double value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.ReadSingle(System.String)">
            <summary>
            Function to read a floating point value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.ReadInt32(System.String)">
            <summary>
            Function to read an integer value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.ReadUInt32(System.String)">
            <summary>
            Function to read an unsigned integer value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.ReadInt64(System.String)">
            <summary>
            Function to read a long value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.ReadUInt64(System.String)">
            <summary>
            Function to read an unsigned long value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.ReadChars(System.String,System.Int32)">
            <summary>
            Function to read an array of character values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <param name="count">The count of characters to read.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.ReadChar(System.String)">
            <summary>
            Function to read a character value from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.ReadString(System.String)">
            <summary>
            Function to read a string values from the stream.
            </summary>
            <param name="name">Name of the data.</param>
            <returns>Value in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.ReadAttribute(System.String,System.String)">
            <summary>
            Function to read an attribute for an item.
            </summary>
            <param name="item">Item that contains the attribute.</param>
            <param name="attributeName">Attribute to read.</param>
            <returns>Value for the attribute.</returns>
        </member>
        <member name="M:GorgonLibrary.Serialization.BinarySerializer.#ctor(GorgonLibrary.Serialization.ISerializable,System.IO.Stream)">
            <summary>
            Constructor.
            </summary>
            <param name="serialObject">Object to serialize.</param>
            <param name="stream">Stream to write or read data through.</param>
        </member>
        <member name="T:GorgonLibrary.Graphics.TextSprite">
            <summary>
            Object representing a sprite containing text.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.MeasureLine(System.String)">
            <summary>
            Function to measure the length of the line in pixels.
            </summary>
            <param name="line">Line to read.</param>
            <returns>The length of the line in pixels.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.FormatText(System.Text.StringBuilder,System.Collections.Specialized.StringCollection,System.String,System.Boolean,System.Drawing.RectangleF)">
            <summary>
            Property to return post-formatted text.
            </summary>
            <param name="formattedOutput">String builder that will contain the formatted text.</param>
            <param name="lines">A collection of formatted lines from the text.</param>
            <param name="text">Text to format.</param>
            <param name="wordWrap">TRUE to enforce word wrapping, FALSE to leave as is.</param>
            <param name="bounds">Boundaries for word wrapping.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.WordWrapText(System.String,System.Drawing.RectangleF)">
            <summary>
            Function to reformat the text for word wrapping.
            </summary>
            <param name="text">Text to wrap.</param>
            <param name="bounds">Boundaries to wrap at.</param>
            <returns>A string containing the re-formatted text.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.GetLine(System.Int32)">
            <summary>
            Function to retrieve a line of text.
            </summary>
            <param name="line">Line index to for the text to retrieve.</param>
            <returns>The string at the line index.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.MeasureLine(System.Int32)">
            <summary>
            Function to measure the length of the line in pixels.
            </summary>
            <param name="line">Line index to read.</param>
            <returns>The length of the line in pixels.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.UpdateColor(System.Int32,GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1[])">
            <summary>
            Function to update the colors of the vertices.
            </summary>
            <param name="charIndex">Vertex index of the character quad to update.</param>
            <param name="vertices">List of vertices to update.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.GetAlignedExtents(System.Single@,System.Single@,System.Single@,System.Single@,System.Drawing.RectangleF,System.Single)">
            <summary>
            Function to retrieve the aligned extents of the text sprite.
            </summary>
            <param name="x1">First horizontal source coordinate.</param>
            <param name="y1">First vertical source coordinate.</param>
            <param name="x2">Second horizontal source coordinate.</param>
            <param name="y2">Second vertical source coordinate.</param>
            <param name="bounds">Boundaries to respect.</param>
            <param name="maxLineSize">Largest line size.</param>
            <returns>New origin position for the sprite.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.UpdateTransform(GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1[],System.Drawing.RectangleF,System.Int32,System.Char,System.Single,GorgonLibrary.Internal.Glyph,System.Boolean,GorgonLibrary.Vector2D@,System.Drawing.RectangleF@)">
            <summary>
            Function to update the transformation of the vertices.
            </summary>
            <param name="vertices">Vertex list to update.</param>
            <param name="bounds">Boundaries for the text.</param>
            <param name="charIndex">Vertex index of the character quad to update.</param>		
            <param name="character">Character to use.</param>
            <param name="lineLength">Length of the current line.</param>
            <param name="characterInfo">Font information about the character.</param>
            <param name="calcAABB">TRUE to calculate AABB extents, FALSE to ignore.</param>
            <param name="position">Position of the character.</param>
            <param name="aabbUpdate">Updated AABB.</param>		
            <returns>TRUE to advance the relative position pointer, FALSE to leave where it is.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.UpdateTextureCoordinates(System.Int32,GorgonLibrary.Internal.Glyph,GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1[])">
            <summary>
            Function to update the texture coordinates.
            </summary>
            <param name="charIndex">Vertex index of the character quad to update.</param>
            <param name="glyphInfo">Glyph information.</param>
            <param name="vertices">Vertices to update.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.UpdateDimensions(GorgonLibrary.Graphics.VertexTypeList.PositionDiffuse2DTexture1[])">
            <summary>
            Function to update the dimensions for the object.
            </summary>
            <param name="vertices">Vertex list to fill.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.UpdateDimensions">
            <summary>
            Function to update the dimensions for an object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.GetVertices">
            <summary>
            Function to return the number of vertices for this object.
            </summary>
            <returns>
            An array of vertices used for this renderable.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.AppendText(System.String)">
            <summary>
            Function to append text to the already existing text.
            </summary>
            <param name="text">Text to append.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.InsertText(System.Int32,System.String)">
            <summary>
            Function to insert text into the already existing text.
            </summary>
            <param name="position">Position to insert at.</param>
            <param name="text">Text to insert.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.GetCharacterVertexColor(GorgonLibrary.Graphics.VertexLocations)">
            <summary>
            Function to get the color of a character vertex.
            </summary>
            <param name="vertexPosition">Location of the vertex to change.</param>
            <returns>Color of the sprite vertex.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.SetCharacterVertexColor(GorgonLibrary.Graphics.VertexLocations,System.Drawing.Color)">
            <summary>
            Function to set the color of a character vertex.
            </summary>
            <param name="vertexPosition">Location of the vertex to change.</param>
            <param name="newColor">New color to set the vertex to.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.RemoveText(System.Int32,System.Int32)">
            <summary>
            Function to remove text from the already existing text.
            </summary>
            <param name="position">Position to start removing.</param>
            <param name="length">Number of characters to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.MeasureText(System.Text.StringBuilder,System.Single,System.Boolean)">
            <summary>
            Function to return the optimal dimensions of the specified text.
            </summary>
            <param name="text">Text to examine.</param>
            <param name="desiredWidth">Ideal width of the rectangle, only applies of wrap is set to TRUE.</param>
            <param name="wordWrap">TRUE to word wrap text at the desired rectangle width, FALSE to let it continue.</param>
            <returns>Rectangle that will contain the text.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.UpdateAABB">
            <summary>
            Function to update the AABB for the text.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.Draw(System.Boolean)">
            <summary>
            Function to draw the object.
            </summary>
            <param name="flush">TRUE to flush the buffers after drawing, FALSE to only flush on state change.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.#ctor(System.String,System.String,GorgonLibrary.Graphics.Font,GorgonLibrary.Vector2D,System.Drawing.Color)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the text sprite.</param>
            <param name="text">Text for the sprite.</param>
            <param name="font">Font to use.</param>
            <param name="position">Initial position of the text.</param>
            <param name="textColor">Color of the text.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.#ctor(System.String,System.String,GorgonLibrary.Graphics.Font,GorgonLibrary.Vector2D)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the text sprite.</param>
            <param name="text">Text for the sprite.</param>
            <param name="font">Font to use.</param>
            <param name="position">Initial position of the text.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.#ctor(System.String,System.String,GorgonLibrary.Graphics.Font)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the text sprite.</param>
            <param name="text">Text for the sprite.</param>
            <param name="font">Font to use.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.#ctor(System.String,System.String,GorgonLibrary.Graphics.Font,System.Drawing.Color)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the text sprite.</param>
            <param name="text">Text for the sprite.</param>
            <param name="font">Font to use.</param>
            <param name="color">Color of the text.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.#ctor(System.String,System.String,GorgonLibrary.Graphics.Font,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the text sprite.</param>
            <param name="text">Text for the sprite.</param>
            <param name="font">Font to use.</param>
            <param name="positionX">Horizontal position of the text.</param>
            <param name="positionY">Vertical position of the text.</param>
            <param name="textColor">Color of the</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.TextSprite.#ctor(System.String,System.String,GorgonLibrary.Graphics.Font,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the text sprite.</param>
            <param name="text">Text for the sprite.</param>
            <param name="font">Font to use.</param>
            <param name="positionX">Horizontal position of the text.</param>
            <param name="positionY">Vertical position of the text.</param>		
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.Shadowed">
            <summary>
            Property to show a shadow under the text.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.ShadowColor">
            <summary>
            Property to set or return the color of the shadow.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.ShadowDirection">
            <summary>
            Property to set or return the direction of the shadow.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.ShadowOffset">
            <summary>
            Property to set or return the offset between the shadow and the text.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.TabSpaces">
            <summary>
            Property to set or return the number of spaces in a tab.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.AutoAdjustCRLF">
            <summary>
            Property to set or return whether this object will translate the CR/LF characters into a CR.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.UniformScale">
            <summary>
            Property to set or return a uniform scale across the X and Y axis.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.WordWrap">
            <summary>
            Property to set or return whether word wrapping is enabled or disabled.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.PrimitiveStyle">
            <summary>
            Property to return the primitive style for the object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.UseIndices">
            <summary>
            Property to return whether to use an index buffer or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.Alignment">
            <summary>
            Property to set or return the horizontal alignment of the text.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.Axis">
            <summary>
            Property to set or return the axis of the sprite.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.Scale">
            <summary>
            Property to set or return the scale of the sprite.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.ScaledDimensions">
            <summary>
            Property to set or return the size of the object with scaling applied.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.ScaledWidth">
            <summary>
            Property to set or return the scaled width of the object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.ScaledHeight">
            <summary>
            Property to set or return the scaled height of the object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.Color">
            <summary>
            Property to set or return the sprite color.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.Opacity">
            <summary>
            Property to set or return the opacity.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.Text">
            <summary>
            Property to set or return the text for the buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.Size">
            <summary>
            Property to return the size of the text.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.Width">
            <summary>
            Property to return the width of the text.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.Height">
            <summary>
            Property to set or return the height of the text.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.Font">
            <summary>
            Property to set or return the font.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.Image">
            <summary>
            Property to set or return the image that this object is bound with.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.TextLength">
            <summary>
            Property to return the length of the text.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.Bounds">
            <summary>
            Property to set or return the bounding rectangle for this object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.HasBounds">
            <summary>
            Property to return whether bounds have been applied to the text sprite.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.TextSprite.LineCount">
            <summary>
            Property to return the number of lines for the text.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.Geometry">
            <summary>
            Object representing a cache of vertex/index data for the sprites.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.Geometry.DestroyBuffers">
            <summary>
            Function to perform clean up.
            </summary>		
        </member>
        <member name="M:GorgonLibrary.Internal.Geometry.UpdateVertexData(System.Int32)">
            <summary>
            Function to update the vertex data.
            </summary>
            <param name="vertexCount">Number of vertices in the buffer.</param>
        </member>
        <member name="P:GorgonLibrary.Internal.Geometry.VertexOffset">
            <summary>
            Property to return the offset for the vertex buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.Geometry.IndexOffset">
            <summary>
            Property to return the offset for the index buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.Geometry.IndicesWritten">
            <summary>
            Property to return the number of indices written to the cache.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.Geometry.VerticesWritten">
            <summary>
            Property to return the number of vertices written to the cache.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.Geometry.UseIndices">
            <summary>
            Property to return whether we're using indices or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.Geometry.VertexBuffer">
            <summary>
            Property to return the vertex buffer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Internal.Geometry.IndexBuffer">
            <summary>
            Property to return the index buffer.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Internal.Geometry.VertexType">
            <summary>
            Property to return vertex type.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Internal.Geometry.PrimitiveStyle">
            <summary>
            Property to set or return the style of primitive to use.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Internal.Geometry.VertexCount">
            <summary>
            Property to return the allocated number of vertices in the buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.Geometry.VertexCache">
            <summary>
            Property to return the vertex cache for the list.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.PredefinedShaderConstants">
            <summary>
            A list of predefined shader constants.
            </summary>
            <remarks>The shader constants presented here reflect these values in a given shader:
            <list type="table">
            <listheader>
            <term>Constant type and name</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>float4x4 _projectionMatrix</term>
            <description>The current projection <see cref="T:GorgonLibrary.Matrix">matrix</see> defined by the current <see cref="T:GorgonLibrary.Graphics.Viewport">Viewport</see>.  Use this to transform vertices in a vertex shader into screen space.</description>
            </item>
            <item>
            <term>Texture _spriteImage</term>
            <description>This is the currently active <see cref="T:GorgonLibrary.Graphics.Image">image</see> (at index 0 in the texture stage) for a given <see cref="T:GorgonLibrary.Graphics.Sprite">Sprite</see> or series of sprites.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.PredefinedShaderConstants.ProjectionMatrix">
            <summary>
            A projection matrix used to transform a vertex into screen space.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PredefinedShaderConstants.SpriteImage">
            <summary>
            The currently active sprite image at stage 0.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.DefaultVertexShader">
            <summary>
            A default vertex shader that will enable Gorgon to render in 2D mode.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.VertexShader">
            <summary>
            Object representing a vertex shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexShader.ShaderProfile(System.Version)">
            <summary>
            Function to retrieve the shader target profile.
            </summary>
            <param name="target">Version of the profile.</param>
            <returns>The shader target profile.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexShader.CreateShader">
            <summary>
            Function called to create the actual shader object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexShader.DestroyShader">
            <summary>
            Function called to destroy the shader object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexShader.OnRenderBegin">
            <summary>
            Function called before the rendering begins with this shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexShader.OnRender(GorgonLibrary.Graphics.PrimitiveStyle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function called when rendering with this shader.
            </summary>
            <param name="primitiveStyle">Type of primitive to render.</param>
            <param name="vertexStart">Starting vertex to render.</param>
            <param name="vertexCount">Number of vertices to render.</param>
            <param name="indexStart">Starting index to render.</param>
            <param name="indexCount">Number of indices to render.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexShader.OnRenderEnd">
            <summary>
            Function called after the rendering ends with this shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexShader.OnReadData(GorgonLibrary.Serialization.Serializer)">
            <summary>
            Function called when the shader is deserialized.
            </summary>
            <param name="serializer">Deserializer used to read the data.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexShader.CompileShader(System.String,System.Version,GorgonLibrary.Graphics.ShaderCompileOptions)">
            <summary>
            Function to compile the shader source code.
            </summary>
            <param name="functionName">Name of the function to compile.</param>
            <param name="target">Pixel shader target version.</param>
            <param name="flags">Options to use for compilation.</param>
            <remarks>See <see cref="T:GorgonLibrary.Graphics.ShaderCompileOptions"/> for more information about the compile time options.
            <para>The target parameter can be 1.1, 2.0, 2.1 (for 2_a), 2.2 (for 2_b), 2.0.1 (for 2_sw), 3.0 or 3.0.1 (for 3_sw).</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexShader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.VertexShader"/> class.
            </summary>
            <param name="name">Name for this object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the name parameter is NULL or a zero length string.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.VertexShader.#ctor(System.String,GorgonLibrary.Graphics.ShaderFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.VertexShader"/> class.
            </summary>
            <param name="name">Name for this object.</param>
            <param name="function">Function to bind to the shader as an entry point.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the name parameter is NULL or a zero length string.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.DefaultVertexShader.OnRenderBegin">
            <summary>
            Function called before the rendering begins with this shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.DefaultVertexShader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.DefaultVertexShader"/> class.
            </summary>
            <param name="name">Name for this object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the name parameter is NULL or a zero length string.</exception>
        </member>
        <member name="T:GorgonLibrary.Graphics.FrameEventHandler">
            <summary>
            Event delegate for frame events.
            </summary>
            <param name="sender">Sender of this event.</param>
            <param name="e">Event parameters.</param>
        </member>
        <member name="T:GorgonLibrary.Graphics.FrameEventArgs">
            <summary>
            Arguments for the frame rendering events.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.FrameEventArgs.#ctor(GorgonLibrary.TimingData)">
            <summary>
            Constructor.
            </summary>
            <param name="timingData">Timing data to withdraw data from.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.FrameEventArgs.TimingData">
            <summary>
            Property to return the timing data.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.FrameEventArgs.FrameDeltaTime">
            <summary>
            Property to return the frame delta time.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.FrameEventArgs.FrameCount">
            <summary>
            Property to return the current number of frames rendered.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.FrameEventArgs.FPS">
            <summary>
            Property to return the current frames/second.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.D3DObjects">
            <summary>
            Object used to interface to internal Gorgon D3D objects.
            </summary>
            <remarks>This is meant for plug-in developers to use as an entry point to gain full access to Gorgon's D3D internals (i.e. if a developer wanted to merge 3D stuff with Gorgon, they'd use this class to gain access to everything).
            <para>Since this is strictly for plug-ins, this class can only be accessed from the <see cref="T:GorgonLibrary.PlugIns.PlugInEntryPoint">PlugInEntryPoint</see> superclass as the protected method <see cref="M:GorgonLibrary.PlugIns.PlugInEntryPoint.GetD3DObjects">GetD3DObjects()</see>.</para>
            <para>BE VERY CAREFUL WITH THIS OBJECT!  It cannot be stressed enough, you will be messing with the guts of Gorgon and as such you can easily cause it to crash by doing something wrong.</para></remarks>
        </member>
        <member name="M:GorgonLibrary.Internal.D3DObjects.Flush">
            <summary>
            Function to force a rendering pipeline flush.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.D3DObjects.ResetProjectionViewState">
            <summary>
            Function to reset the projection and view states.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.D3DObjects.SetImage(System.Int32,GorgonLibrary.Graphics.Image)">
            <summary>
            Function to set the current image.
            </summary>
            <param name="stage">Image stage to set.</param>
            <param name="image">Image to set.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.D3DObjects.GetImage(System.Int32)">
            <summary>
            Function to return the current image.
            </summary>
            <param name="stage">Image stage to return.</param>
            <returns>The currently set image at the specified stage.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.D3DObjects.GetTextureFromImage(GorgonLibrary.Graphics.Image)">
            <summary>
            Function to retrieve the Direct 3D texture object from an image object.
            </summary>
            <param name="image">Image that holds the texture.</param>
            <returns>The internal D3D texture object.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.D3DObjects.GetEffectFromShader(GorgonLibrary.Graphics.FXShader)">
            <summary>
            Function to retrieve the Direct 3D effect object from a shader object.
            </summary>
            <param name="shader">Shader object that holds the effect.</param>
            <returns>The internal D3D effect object.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.D3DObjects.GetSurfaceFromTarget(GorgonLibrary.Graphics.RenderTarget)">
            <summary>
            Function to retrieve the Direct 3D surface object from a render target.
            </summary>
            <param name="target">Target that holds the surface.</param>
            <returns>The internal D3D surface object.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.D3DObjects.GetDepthBufferFromTarget(GorgonLibrary.Graphics.RenderTarget)">
            <summary>
            Function to retrieve the Direct 3D depth buffer surface object from a render target.
            </summary>
            <param name="target">Target that holds the surface.</param>
            <returns>The internal D3D surface object.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.D3DObjects.GetTextureFromRenderImage(GorgonLibrary.Graphics.RenderImage)">
            <summary>
            Function to retrieve the Direct 3D texture from a render image object.
            </summary>
            <param name="target">Target that holds the rendering image.</param>
            <returns>The internal D3D texture object.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.D3DObjects.GetSwapChainFromRenderWindow(GorgonLibrary.Graphics.RenderWindow)">
            <summary>
            Function to retrieve the Direct 3D swap chain from a render window object.
            </summary>
            <param name="target">Target that holds the swap chain.</param>
            <returns>The internal D3D swap chain object.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.D3DObjects.PushStates">
            <summary>
            Function to store the last set of states.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.D3DObjects.PopStates">
            <summary>
            Function to restore the last set of states.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.D3DObjects.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Internal.D3DObjects"/> class.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.D3DObjects.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:GorgonLibrary.Internal.D3DObjects"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.D3DObjects.DeviceLost">
            <summary>
            Function called when the device is in a lost state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.D3DObjects.DeviceReset">
            <summary>
            Function called when the device is reset.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.D3DObjects.ForceRelease">
            <summary>
            Function to force the loss of the objects data.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.D3DObjects.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.D3DObjects.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:GorgonLibrary.Internal.D3DObjects.DeviceLostState">
            <summary>
            Event fired during a device lost state.
            </summary>
        </member>
        <member name="E:GorgonLibrary.Internal.D3DObjects.DeviceResetState">
            <summary>
            Event fired during a device reset state.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.D3DObjects.DeviceNeedsReset">
            <summary>
            Property to return whether the device needs a reset or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.D3DObjects.Device">
            <summary>
            Property to return the Direct 3D device object used by Gorgon.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.D3DObjects.SystemVertexBuffer">
            <summary>
            Property to return the vertex buffer used by Gorgon.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.D3DObjects.SystemIndexBuffer">
            <summary>
            Property to return the index buffer used by Gorgon.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.D3DObjects.SystemVertexType">
            <summary>
            Property to return the vertex declaration primarily used by Gorgon.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.D3DObjects.SystemVertexSize">
            <summary>
            Property to return the size of the system vertices in bytes.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.D3DObjects.RenderStates">
            <summary>
            Property to return a list of render states.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.D3DObjects.ImageStates">
            <summary>
            Property to return a list of image states.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Internal.DeviceStateList">
            <summary>
            Class to handle device resets and loss.
            </summary>
            <remarks>
            When the app is in fullscreen mode, a task switch will cause the device to be put into 
            a lost state.  Some resources (e.g. resources created in D3DPOOL_DEFAULT) will end up being
            lost as well, and we will need a way to release these objects and restore them when necessary.  
            This class will contain all objects that can be lost and reset when such the above situation occours.  
            This class should only be used internally and never called upon by the calling application.
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Internal.DeviceStateList.Contains(GorgonLibrary.Internal.IDeviceStateObject)">
            <summary>
            Function to return whether a state object is in the list or not.
            </summary>
            <param name="stateObject">State object to check.</param>
            <returns>TRUE if found, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.DeviceStateList.Clear">
            <summary>
            Function to clear the state list.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.DeviceStateList.Item(System.Int32)">
            <summary>
            Property to return a device state object by its index.
            </summary>
            <param name="index">Index of the item.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.DeviceStateList.Add(GorgonLibrary.Internal.IDeviceStateObject)">
            <summary>
            Function to add a device state object to the list.
            </summary>
            <param name="deviceStateObject">Device state object to add.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.DeviceStateList.Remove(GorgonLibrary.Internal.IDeviceStateObject)">
            <summary>
            Function to remove a device state object from the list.
            </summary>
            <param name="deviceStateObject">Object to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Internal.DeviceStateList.DeviceWasLost">
            <summary>
            Function to call when the device is lost.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.DeviceStateList.DeviceWasReset">
            <summary>
            Function to call when the device is reset.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.DeviceStateList.ForceRelease">
            <summary>
            Function to force the release of data from all device state objects.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Internal.DeviceStateList.#cctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Internal.DeviceStateList.Count">
            <summary>
            Property to return the number of state items in the list.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ShaderTechnique">
            <summary>
            Object representing a technique within a shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderTechnique.GetTechnique(System.Int32)">
            <summary>
            Function to retrieve the D3D technique information.
            </summary>
            <param name="index">Index of the technique.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderTechnique.#ctor(GorgonLibrary.Graphics.FXShader,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="shader">Shader that owns this technique.</param>
            <param name="index">Index of the technique.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderTechnique.GorgonLibrary#Graphics#IShaderRenderer#GetDefinedConstants">
            <summary>
            Function to retrieve the pre-defined constant parameters from a shader.
            </summary>
            <remarks>
            A shader can contain pre-defined constant values that the library will update automatically.  This is done to cut down on some redundant code that the user will
            typically always have to perform when calling a shader.  For example, the user may have 3 shaders and each time a shader is used the current sprite image would have to
            be set by the user each time the image changed for each sprite.  Additionally, passing the transformations (i.e. rotation, scaling and translation) to the shader
            is also more work than it needs to be.
            <para>To use this "default" functionality your shader will have to implement one of these constants:
            <list type="table">
            			<listheader>
            				<term>Constant type and name</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>float4x4 _projectionMatrix</term>
            				<description>The current projection <see cref="T:GorgonLibrary.Matrix">matrix</see> defined by the current <see cref="T:GorgonLibrary.Graphics.Viewport">Viewport</see>.  Use this to transform vertices in a vertex shader into screen space.</description>
            			</item>
            			<item>
            				<term>Texture _spriteImage</term>
            				<description>This is the currently active <see cref="T:GorgonLibrary.Graphics.Image">image</see> (at index 0 in the texture stage) for a given <see cref="T:GorgonLibrary.Graphics.Sprite">Sprite</see> or series of sprites.</description>
            			</item>
            		</list>
            	</para>
            	<para>The constants are case sensitive and as such must be declared exactly as shown in the table above with the leading underscore character.  If the constant is not
            named properly it will not be used as a default.</para>
            	<para>To test whether the default constants are available, check the return value of <see cref="P:GorgonLibrary.Graphics.IShaderRenderer.HasProjectionMatrix">HasProjectionMatrix</see>
            or <see cref="P:GorgonLibrary.Graphics.IShaderRenderer.HasSpriteImage">HasSpriteImage</see> and if
            these properties return TRUE, then the constant has been implemented.</para>
            	<para>This function is meant to be called internally by the shader.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderTechnique.GetDefinedParameter(GorgonLibrary.Graphics.PredefinedShaderConstants)">
            <summary>
            Function to return the parameter associated with the predefiend constant.
            </summary>
            <param name="constant">Predefined constant representing the parameter.</param>
            <returns>
            The parameter interface for the <paramref name="constant"/>.
            </returns>
            <remarks>The function will return the associated parameter object for a given pre-defined constant.  The constant should be defined in the shader as one of:
            <list type="table">
            		<listheader>
            			<term>Constant type and name</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>float4x4 _projectionMatrix</term>
            			<description>The current projection <see cref="T:GorgonLibrary.Matrix">matrix</see> defined by the current <see cref="T:GorgonLibrary.Graphics.Viewport">Viewport</see>.  Use this to transform vertices in a vertex shader into screen space.</description>
            		</item>
            		<item>
            			<term>Texture _spriteImage</term>
            			<description>This is the currently active <see cref="T:GorgonLibrary.Graphics.Image">image</see> (at index 0 in the texture stage) for a given <see cref="T:GorgonLibrary.Graphics.Sprite">Sprite</see> or series of sprites.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderTechnique.GorgonLibrary#Graphics#IShaderRenderer#Begin">
            <summary>
            Function to begin the rendering with the shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderTechnique.GorgonLibrary#Graphics#IShaderRenderer#Render(GorgonLibrary.Graphics.PrimitiveStyle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function to render with the shader.
            </summary>
            <param name="primitiveStyle">Type of primitive to render.</param>
            <param name="vertexStart">Starting vertex to render.</param>
            <param name="vertexCount">Number of vertices to render.</param>
            <param name="indexStart">Starting index to render.</param>
            <param name="indexCount">Number of indices to render.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderTechnique.GorgonLibrary#Graphics#IShaderRenderer#End">
            <summary>
            Function to end rendering with the shader.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderTechnique.D3DEffectHandle">
            <summary>
            Property to return the effect handle for the technique.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderTechnique.Parameters">
            <summary>
            Property to return the parameters for the technique.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderTechnique.Owner">
            <summary>
            Property to return the shader that owns this technique.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderTechnique.Passes">
            <summary>
            Property to return the list of passes for the technique.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderTechnique.Valid">
            <summary>
            Property to return whether this technique is valid or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderTechnique.HasProjectionMatrix">
            <summary>
            Property to return whether a projection matrix is available in the shader.
            </summary>
            <remarks>This shader constant should be represented in the shader as: <c>float4x4 _projectionMatrix</c>.  If this constant is found, this value will return TRUE.
            <para>If this is available the library will automatically assign a value to the constant for use in the shader.  This will contain a copy of the current projection <see cref="T:GorgonLibrary.Matrix">matrix</see> 
            used by the current <see cref="T:GorgonLibrary.Graphics.Viewport">viewport</see>.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderTechnique.HasSpriteImage">
            <summary>
            Property to return whether a sprite image is available in the shader.
            </summary>
            <remarks>This shader constant should be represented in the shader as: <c>Texture _spriteImage</c>.  If this constant is found, this value will return TRUE.
            <para>If this is available the library will automatically assign a value to the constant for use in the shader.  This will typically be the current image used by a <see cref="T:GorgonLibrary.Graphics.Sprite">sprite</see> 
            or a series of sprites (if using the same image).</para></remarks>
        </member>
        <member name="T:GorgonLibrary.Graphics.ShaderParameterList">
            <summary>
            Object representing a list of shader values.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameterList.Add(GorgonLibrary.Graphics.IShaderParameter)">
            <summary>
            Function to add a parameter to the list.
            </summary>
            <param name="parameter">Parameter to add.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameterList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ConstantShaderParameter">
            <summary>
            Object used to wrap pixel/vertex shader constants.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.GetArrayValues``1(``0[],System.Int32)">
            <summary>
            Function to retrieve an array of values.
            </summary>
            <typeparam name="T">Type of the array.</typeparam>
            <param name="source">Source array to copy.</param>
            <param name="count">Number of elements to return.</param>
            <returns>An array with the specified amount of elements.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.SetArrayValues``1(``0[])">
            <summary>
            Function to set an array of values.
            </summary>
            <typeparam name="T">Type of data in the array.</typeparam>
            <param name="source">Array to copy from.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.SetTextureSampler(SlimDX.Direct3D9.EffectHandle)">
            <summary>
            Function to bind a texture sampler.
            </summary>
            <param name="sampler">Sampler to bind.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.#ctor(System.String,SlimDX.Direct3D9.EffectHandle,GorgonLibrary.Graphics.ShaderFunction,GorgonLibrary.Graphics.ShaderParameterType)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.ConstantShaderParameter"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="handle">Handle to the shader constant.</param>
            <param name="function">Function to use for interfacing to the shader.</param>
            <param name="type">The type of the parameter value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.GetBoolean">
            <summary>
            Function to return a boolean value.
            </summary>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.GetBooleanArray(System.Int32)">
            <summary>
            Function to return a boolean value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <returns>A boolean value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.GetFloat">
            <summary>
            Function to return a floating point value.
            </summary>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.GetFloatArray(System.Int32)">
            <summary>
            Function to return a floating point value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <returns>A floating point value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.GetInteger">
            <summary>
            Function to return an integer value.
            </summary>
            <returns>An integer value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.GetIntegerArray(System.Int32)">
            <summary>
            Function to return an integer value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <returns>An integer value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.GorgonLibrary#Graphics#IShaderParameter#GetString">
            <summary>
            Function to return a string value.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.GetVector4D">
            <summary>
            Function to return a 4D vector value.
            </summary>
            <returns>A 4D vector value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.GetVector4DArray(System.Int32)">
            <summary>
            Function to return a 4D vector value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <returns>A 4D vector value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.GetMatrix">
            <summary>
            Function to return a matrix value.
            </summary>
            <returns>A matrix value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.GetMatrixArray(System.Int32)">
            <summary>
            Function to return a matrix value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <returns>A matrix value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.GetMatrix(System.Boolean)">
            <summary>
            Function to return a matrix value.
            </summary>
            <param name="transpose">TRUE if returning a transposed matrix, FALSE if not.</param>
            <returns>A matrix value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.GetMatrixArray(System.Int32,System.Boolean)">
            <summary>
            Function to return a matrix value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <param name="transpose">TRUE if returning a transposed matrix, FALSE if not.</param>
            <returns>A matrix value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.GetColor">
            <summary>
            Function to return a color value.
            </summary>
            <returns>A color value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.GetColorArray(System.Int32)">
            <summary>
            Function to return a color value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <returns>A color value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.GetImage(GorgonLibrary.Graphics.Image)">
            <summary>
            Function to return an image value.
            </summary>
            <param name="sourceImage">Image to use to store the shader texture.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.GetImage">
            <summary>
            Function to return an image value.
            </summary>
            <returns>An image value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.SetValue(System.Boolean)">
            <summary>
            Function to set a boolean parameter value.
            </summary>
            <param name="value">A boolean value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.SetValue(System.Boolean[])">
            <summary>
            Function to set a boolean array parameter value.
            </summary>
            <param name="value">An array of boolean values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.SetValue(System.Single)">
            <summary>
            Function to set a floating point parameter value.
            </summary>
            <param name="value">A floating point value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.SetValue(System.Single[])">
            <summary>
            Function to set a floating point array parameter value.
            </summary>
            <param name="value">An array of floating point values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.SetValue(System.Int32)">
            <summary>
            Function to set an integer parameter value.
            </summary>
            <param name="value">An integer value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.SetValue(System.Int32[])">
            <summary>
            Function to set an integer array parameter value.
            </summary>
            <param name="value">An array of integer values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.GorgonLibrary#Graphics#IShaderParameter#SetValue(System.String)">
            <summary>
            Function to set a string parameter value.
            </summary>
            <param name="value">A string value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.SetValue(GorgonLibrary.Vector4D)">
            <summary>
            Function to set a 4D vector parameter value.
            </summary>
            <param name="value">A 4D vector value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.SetValue(GorgonLibrary.Vector4D[])">
            <summary>
            Function to set a 4D vector parameter array value.
            </summary>
            <param name="value">An array of 4D vector values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.SetValue(GorgonLibrary.Matrix)">
            <summary>
            Function to set a matrix value.
            </summary>
            <param name="value">A matrix value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.SetValue(GorgonLibrary.Matrix[])">
            <summary>
            Function to set an array of matrix values.
            </summary>
            <param name="value">An array of matrix values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.SetValue(System.Drawing.Color)">
            <summary>
            Function to set a color parameter value
            </summary>
            <param name="value">A color value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.SetValue(System.Drawing.Color[])">
            <summary>
            Function to set an array of color parameter values
            </summary>
            <param name="value">An array of color values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.SetValue(GorgonLibrary.Graphics.Image)">
            <summary>
            Function to set an image parameter value.
            </summary>
            <param name="image">Image to set.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ConstantShaderParameter.SetValue(GorgonLibrary.Graphics.RenderImage)">
            <summary>
            Function to set a render image parameter value.
            </summary>
            <param name="image">Render image to set.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.ConstantShaderParameter.ArrayLength">
            <summary>
            Property to return the size of an array parameter.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.ConstantShaderParameter.ValueType">
            <summary>
            Property to return the type of the value.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.ConstantShaderParameter.Owner">
            <summary>
            Property to return the owning shader for this parameter.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.ConstantShaderParameter.IsArray">
            <summary>
            Property to return whether this value is an array or not.
            </summary>
            <value></value>
        </member>
        <member name="T:GorgonLibrary.Graphics.ImageCache">
            <summary>
            Class to represent a cache for images.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ImageCache.DestroyAll">
            <summary>
            Function to destroy all the loaded images.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ImageCache.#cctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ImageCache.Images">
            <summary>
            Property to return the loaded images.
            </summary>
        </member>
        <member name="T:GorgonLibrary.FileSystems.FileSystemReadWriteEventArgs">
            <summary>
            File system read/write event arguments.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemReadWriteEventArgs.#ctor(GorgonLibrary.FileSystems.FileSystemFile,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="file">File being written.</param>
            <param name="userdata">User specific data.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemReadWriteEventArgs.#ctor(GorgonLibrary.FileSystems.FileSystemFile)">
            <summary>
            Constructor.
            </summary>
            <param name="file">File being written.</param>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemReadWriteEventArgs.File">
            <summary>
            Property to return the file being read or written.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemReadWriteEventArgs.UserData">
            <summary>
            Property to set or return user specific data.
            </summary>
        </member>
        <member name="T:GorgonLibrary.FileSystems.FileSystemDataIOEventArgs">
            <summary>
            File system data IO arguments.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemDataIOEventArgs.#ctor(GorgonLibrary.FileSystems.FileSystemFile)">
            <summary>
            Constructor.
            </summary>
            <param name="file">File system file being read or written.</param>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemDataIOEventArgs.File">
            <summary>
            Property to return the file being read or written.
            </summary>
        </member>
        <member name="T:GorgonLibrary.FileSystems.FileSystemReadWriteHandler">
            <summary>
            Delegate used for file system read/write events.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:GorgonLibrary.FileSystems.FileSystemDataIOHandler">
            <summary>
            Delegate used for file system data IO events.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:GorgonLibrary.Internal.EditorRoundValuesAttribute">
            <summary>
            Attribute for sprite editor to determine min/max.
            </summary>
        </member>
        <member name="T:GorgonLibrary.DriverList">
            <summary>
            A list of available video drivers.
            </summary>
        </member>
        <member name="M:GorgonLibrary.DriverList.Refresh">
            <summary>
            Function to enumerate drivers and get capabilities.
            </summary>
        </member>
        <member name="M:GorgonLibrary.DriverList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.DriverList.Item(System.Int32)">
            <summary>
            Property to return a driver by its index.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index of the driver falls outside of the list range.</exception>
        </member>
        <member name="P:GorgonLibrary.DriverList.Item(System.String)">
            <summary>
            Property to return a driver by its name.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the name of the driver does not exist within the list.</exception>
        </member>
        <member name="T:GorgonLibrary.PlugIns.PlugInType">
            <summary>
            Enumeration containing definitions for various plug-in types.
            </summary>
        </member>
        <member name="F:GorgonLibrary.PlugIns.PlugInType.GUI">
            <summary>GUI plug-in.</summary>
        </member>
        <member name="F:GorgonLibrary.PlugIns.PlugInType.Input">
            <summary>Input plug-in.</summary>
        </member>
        <member name="F:GorgonLibrary.PlugIns.PlugInType.FileSystem">
            <summary>File system plug-in.</summary>
        </member>
        <member name="F:GorgonLibrary.PlugIns.PlugInType.UserDefined">
            <summary>Custom user plug-in.</summary>
        </member>
        <member name="T:GorgonLibrary.Internal.Converter">
            <summary>
            Class used to perform conversion between various components and Gorgon.
            </summary>
            <remarks>This class is used to convert between Direct 3D data types and Gorgon's data types.</remarks>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Graphics.Viewport)">
            <summary>
            Function to convert a Gorgon viewport into a D3D viewport.
            </summary>
            <param name="viewport">Viewport to convert.</param>
            <returns>A D3D viewport.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Graphics.ImageFileFormat)">
            <summary>
            Function to convert a Gorgon image file format to a D3D image file format.
            </summary>
            <param name="format">Format to convert.</param>
            <returns>Converted format.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(SlimDX.Direct3D9.ImageFileFormat)">
            <summary>
            Function to convert a D3D image file format to a Gorgon image file format.
            </summary>
            <param name="format">Format to convert.</param>
            <returns>Converted format.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Graphics.ImageAddressing)">
            <summary>
            Function to convert an imaging addressing mode into a D3D texture addressing mode.
            </summary>
            <param name="address">Addressing mode to convert.</param>
            <returns>D3D texture addressing.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Graphics.VertexFieldContext)">
            <summary>
            Function to return the appropriate declaration usage based on our context.
            </summary>
            <param name="context">Context to convert.</param>
            <returns>An appropriate D3D declaration usage.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Graphics.VertexFieldType)">
            <summary>
            Function to convert the field type into an appropriate D3D element type.
            </summary>
            <param name="fieldType">Field type to convert.</param>
            <returns>Appropriate D3D declaration data type.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Internal.ShadingMode)">
            <summary>
            Function to return an appropriate D3D shading mode based on our shading mode.
            </summary>
            <param name="shademode">Shading mode to convert.</param>
            <returns>D3D shade mode.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(SlimDX.Direct3D9.ShadeMode)">
            <summary>
            Function to return a Gorgon shading mode based on a Direct 3D shade mode.
            </summary>
            <param name="shademode">Shade mode to convert.</param>
            <returns>Gorgon shading mode.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Graphics.AlphaBlendOperation)">
            <summary>
            Function to return a D3D blending operation based on a Gorgon blending operation.
            </summary>
            <param name="alphaop">Alpha operation to convert.</param>
            <returns>D3D blending operation.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Internal.DrawingMode)">
            <summary>
            Function to return an appropriate D3D fill mode based on our drawing mode.
            </summary>
            <param name="drawmode">Drawing mode to convert.</param>
            <returns>D3D fill mode.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(SlimDX.Direct3D9.FillMode)">
            <summary>
            Function to return a Gorgon drawing mode based on a Direct 3D fill mode.
            </summary>
            <param name="drawmode">Drawing mode to convert.</param>
            <returns>Gorgon drawing mode.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Graphics.PrimitiveStyle)">
            <summary>
            Function to return the appropriate D3D primitive style based on our primitive style.
            </summary>
            <param name="primitivetype">Style to convert.</param>
            <returns>D3D primitive type.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(SlimDX.Direct3D9.PresentInterval)">
            <summary>
            Function to convert D3D presentation intervals to vsync intervals.
            </summary>
            <param name="interval">Interval to convert.</param>
            <returns>Equivalent vsync interval.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.VSyncIntervals)">
            <summary>
            Function to convert vsync intervals to D3D presentation intervals.
            </summary>
            <param name="interval">Interval to convert.</param>
            <returns>Equivalent presentation interval.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.BackBufferFormats)">
            <summary>
            Function to convert backbuffer formats to D3D formats.
            </summary>
            <param name="format">Backbuffer format to convert.</param>
            <returns>Equivalent D3D format.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.ConvertToImageFormat(GorgonLibrary.BackBufferFormats)">
            <summary>
            Function to convert backbuffer formats to image format.
            </summary>
            <param name="format">Backbuffer format to convert.</param>
            <returns>Equivalent image format.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(SlimDX.Direct3D9.Format)">
            <summary>
            Function to convert D3D formats to backbuffer formats.
            </summary>
            <param name="format">D3D format to convert.</param>
            <returns>Equivalent backbuffer format .</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Internal.BufferUsages)">
            <summary>
            Function to convert buffer usage flags to Direct 3D Usage flags.
            </summary>
            <param name="flags">Flags to convert.</param>
            <returns>D3D Usage flags.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Internal.BufferLockFlags)">
            <summary>
            Function to convert buffer locking flags to Direct 3D locking flags.
            </summary>
            <param name="flags">Flags to convert.</param>
            <returns>D3D lock flags.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Graphics.CullingMode)">
            <summary>
            Function to convert a culling mode into a Direct 3D cull mode.
            </summary>
            <param name="cullmode">Cull mode to convert.</param>
            <returns>D3D culling mode.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(SlimDX.Direct3D9.Cull)">
            <summary>
            Function to convert a D3D culling mode into a Gorgon culling mode.
            </summary>
            <param name="cullmode">D3D culling mode.</param>
            <returns>Gorgon culling mode.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.CompareFunctions)">
            <summary>
            Function to convert Goron comparison functions to D3D functions.
            </summary>
            <param name="func">Comparison function to convert.</param>
            <returns>D3D comparison function.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(SlimDX.Direct3D9.Compare)">
            <summary>
            Function to convert D3D comparison functions to Gorgon comparison functions.
            </summary>
            <param name="func">D3D comparison function to convert.</param>
            <returns>Gorgon comparison function.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.ConvertDepthFormat(GorgonLibrary.DepthBufferFormats)">
            <summary>
            Function to convert a depth buffer format into a D3D compatiable format.
            </summary>
            <param name="depthFormat">Depth format to convert.</param>
            <returns>A compatiable Direct3D depth format.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.ConvertDepthFormat(SlimDX.Direct3D9.Format)">
            <summary>
            Function to convert a depth buffer format into a D3D compatiable format.
            </summary>
            <param name="depthFormat">Depth format to convert.</param>
            <returns>A compatiable Direct3D depth format.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(SlimDX.Vector2)">
            <summary>
            Function to convert a D3D 2D vector into a Gorgon 2D vector.
            </summary>
            <param name="vector">D3D vector to convert.</param>
            <returns>Gorgon 2D vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Vector2D)">
            <summary>
            Function to convert a Gorgon 2D vector into a D3D 2D vector.
            </summary>
            <param name="vector">Gorgon vector to convert.</param>
            <returns>D3D 2D vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Vector2D[])">
            <summary>
            Function to convert an array of Gorgon 2D vectors into an array of D3D 2D vectors.
            </summary>
            <param name="vector">Gorgon vectors to convert.</param>
            <returns>D3D 2D vectors.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(SlimDX.Vector3)">
            <summary>
            Function to convert a D3D 3D vector into a Gorgon 3D vector.
            </summary>
            <param name="vector">D3D vector to convert.</param>
            <returns>Gorgon 3D vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Vector3D)">
            <summary>
            Function to convert a Gorgon 3D vector into a D3D 3D vector.
            </summary>
            <param name="vector">Gorgon vector to convert.</param>
            <returns>D3D 3D vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(SlimDX.Vector4)">
            <summary>
            Function to convert a D3D 4D vector into a Gorgon 4D vector.
            </summary>
            <param name="vector">D3D vector to convert.</param>
            <returns>Gorgon 4D vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Vector4D)">
            <summary>
            Function to convert a Gorgon 4D vector into a D3D 4D vector.
            </summary>
            <param name="vector">Gorgon vector to convert.</param>
            <returns>D3D 4D vector.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Vector4D[])">
            <summary>
            Function to convert an array of Gorgon 4D vectors into an array of D3D 4D vectors.
            </summary>
            <param name="vector">Gorgon vectors to convert.</param>
            <returns>D3D 4D vectors.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Matrix[])">
            <summary>
            Function to convert an array of Gorgon matrices into an array of D3D 4D matrices.
            </summary>
            <param name="matrix">Gorgon matrices to convert.</param>
            <returns>D3D matrices.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Matrix)">
            <summary>
            Function to convert a Gorgon matrix into a D3D matrix.
            </summary>
            <param name="mat">Matrix to convert.</param>
            <returns>A D3D matrix.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(SlimDX.Matrix)">
            <summary>
            Function to convert a D3D matrix into a Gorgon matrix.
            </summary>
            <param name="mat">D3D matrix to convert.</param>
            <returns>A matrix.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Graphics.ImageBufferFormats)">
            <summary>
            Function to convert a texture format into a Direct3D format.
            </summary>
            <param name="format">Format of the texture.</param>
            <returns>A Direct3D format.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.ConvertD3DImageFormat(SlimDX.Direct3D9.Format)">
            <summary>
            Function to convert a Direct3D format into a texture format.
            </summary>
            <param name="format">Direct 3D format.</param>
            <returns>A texture format.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Graphics.ImageOperations)">
            <summary>
            Function to convert a Gorgon image operation to a D3D texture operation.
            </summary>
            <param name="op">Gorgon operation to convert.</param>
            <returns>D3D texture operation.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Graphics.ImageOperationArguments)">
            <summary>
            Function to convert a Gorgon image operation argument to a D3D texture argument.
            </summary>
            <param name="arg">Gorgon operation argument to convert.</param>
            <returns>D3D texture argument.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Graphics.ImageFilters)">
            <summary>
            Function to convert a Gorgon image filter into a D3D texture filter.
            </summary>
            <param name="filter">Gorgon image filter.</param>
            <returns>D3D texture filter.</returns>
        </member>
        <member name="M:GorgonLibrary.Internal.Converter.Convert(GorgonLibrary.Graphics.StencilOperations)">
            <summary>
            Function to convert a Gorgon stencil operation into a D3D stencil operation.
            </summary>
            <param name="operation">Gorgon stencil operation.</param>
            <returns>A D3D stencil operation.</returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.ShaderList">
            <summary>
            Object representing a list of shaders.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderList.Add(GorgonLibrary.Graphics.Shader)">
            <summary>
            Function to add a shader to the list.
            </summary>
            <param name="shader">Shader to add.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderList.Remove(System.Int32)">
            <summary>
            Function to remove an object from the list by index.
            </summary>
            <param name="index">Index to remove at.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderList.Remove(System.String)">
            <summary>
            Function to remove an object from the list by key.
            </summary>
            <param name="key">Key of the object to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderList.Item(System.Int32)">
            <summary>
            Property to return a shader by index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderList.Item(System.String)">
            <summary>
            Property to return a shader by its key.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.DefaultPixelShader">
            <summary>
            A default pixel shader that will just perform a pass through on the pixels.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.DefaultPixelShader.OnRenderBegin">
            <summary>
            Function called before the rendering begins with this shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.DefaultPixelShader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.DefaultVertexShader"/> class.
            </summary>
            <param name="name">Name for this object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the name parameter is NULL or a zero length string.</exception>
        </member>
        <member name="T:GorgonLibrary.FileSystems.FileSystemPlugIn">
            <summary>
            Abstract object for file system plug-ins.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemPlugIn.Create(System.String,GorgonLibrary.FileSystems.FileSystemProvider)">
            <summary>
            Function to create a file system.
            </summary>
            <param name="name">Name of the file system.</param>
            <param name="provider">File system provider.</param>
            <returns>A new file system object.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemPlugIn.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the file system plug-in.</param>
            <param name="plugInPath">Path to the plug-in.</param>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemPlugIn.FileSystemInfo">
            <summary>
            Property to return the file system information for the file system within the plug-in.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.AnimationAdvanceHandler">
            <summary>
            Event handler used when the time has been updated for an animation frame.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event parameters.</param>
        </member>
        <member name="T:GorgonLibrary.Graphics.AnimationAdvanceEventArgs">
            <summary>
            Event arguments for animation frame advancement.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.AnimationAdvanceEventArgs.#ctor(System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="currentTime">Current frame time.</param>
            <param name="delta">Frame time delta.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.AnimationAdvanceEventArgs.Delta">
            <summary>
            Property to return the time delta between this and the last frame.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.AnimationAdvanceEventArgs.CurrentFrameTime">
            <summary>Current animation time.</summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.AnimationTrackDefineHandler">
            <summary>
            Event handler used when the time has been updated for an animation frame.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event parameters.</param>
            <remarks>When a property is marked as animated, and its type is unknown to the animation system (e.g. a custom object or value type) we can still animate that property
            if we define the track type.  This event allows us to pass back a new instance of the track type to the animation and will allow the user to customize how to handle that
            particular type within an animation.</remarks>
        </member>
        <member name="T:GorgonLibrary.Graphics.AnimationTrackDefineEventArgs">
            <summary>
            Event arguments for animation track definitions.
            </summary>
            <remarks>When a property is marked as animated, and its type is unknown to the animation system (e.g. a custom object or value type) we can still animate that property
            if we define the track type.  This event allows us to pass back a new instance of the track type to the animation and will allow the user to customize how to handle that
            particular type within an animation.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.AnimationTrackDefineEventArgs.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.AnimationTrackDefineEventArgs"/> class.
            </summary>
            <param name="propertyName">Name of the property being animated.</param>
            <param name="dataType">Type of the data represented by the track.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.AnimationTrackDefineEventArgs.Track">
            <summary>
            Property to set or return the track type.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.AnimationTrackDefineEventArgs.DataType">
            <summary>
            Property to return the data type for the track.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.AnimationTrackDefineEventArgs.PropertyName">
            <summary>
            Property to return the name of the animated property.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ShaderFunction">
            <summary>
            Object that ecapsulates a shader function.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderFunction.#ctor(System.String,GorgonLibrary.Graphics.Shader,SlimDX.Direct3D9.ShaderBytecode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.ShaderFunction"/> class.
            </summary>
            <param name="functionName">Name of the function ecapsulated by this object.</param>
            <param name="owner">Shader that owns this function.</param>
            <param name="byteCode">Byte code for the function.</param>
            <param name="shaderTarget">Shader target profile name.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderFunction.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderFunction.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderFunction.ByteCode">
            <summary>
            Property to return the byte code for the function.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderFunction.Target">
            <summary>
            Property to return the shader target profile name.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderFunction.Shader">
            <summary>
            Property to return the shader that owns this function.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ShaderParameter">
            <summary>
            Object representing a shader parameter.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.#ctor(SlimDX.Direct3D9.ParameterDescription,SlimDX.Direct3D9.EffectHandle,GorgonLibrary.Graphics.FXShader,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="desc">Description of the parameter.</param>
            <param name="handle">Handle of the parameter.</param>
            <param name="shader">Owning shader for this parameter.</param>
            <param name="index">Index of the parameter.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.GetBoolean">
            <summary>
            Function to return a boolean value.
            </summary>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.GetBooleanArray(System.Int32)">
            <summary>
            Function to return a boolean value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <returns>A boolean value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.GetFloat">
            <summary>
            Function to return a floating point value.
            </summary>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.GetFloatArray(System.Int32)">
            <summary>
            Function to return a floating point value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <returns>A floating point value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.GetInteger">
            <summary>
            Function to return an integer value.
            </summary>
            <returns>An integer value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.GetIntegerArray(System.Int32)">
            <summary>
            Function to return an integer value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <returns>An integer value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.GetString">
            <summary>
            Function to return a string value.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.GetVector4D">
            <summary>
            Function to return a 4D vector value.
            </summary>
            <returns>A 4D vector value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.GetVector4DArray(System.Int32)">
            <summary>
            Function to return a 4D vector value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <returns>A 4D vector value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.GetMatrix">
            <summary>
            Function to return a matrix value.
            </summary>
            <returns>A matrix value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.GetMatrixArray(System.Int32)">
            <summary>
            Function to return a matrix value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <returns>A matrix value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.GetMatrix(System.Boolean)">
            <summary>
            Function to return a matrix value.
            </summary>
            <param name="transpose">TRUE if returning a transposed matrix, FALSE if not.</param>
            <returns>A matrix value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.GetMatrixArray(System.Int32,System.Boolean)">
            <summary>
            Function to return a matrix value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <param name="transpose">TRUE if returning a transposed matrix, FALSE if not.</param>
            <returns>A matrix value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.GetColor">
            <summary>
            Function to return a color value.
            </summary>
            <returns>A color value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.GetColorArray(System.Int32)">
            <summary>
            Function to return a color value array.
            </summary>
            <param name="count">Number of items to return.</param>
            <returns>A color value array.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.GetImage(GorgonLibrary.Graphics.Image)">
            <summary>
            Function to return an image value.
            </summary>
            <param name="sourceImage">Image to use to store the shader texture.</param>		
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.GetImage">
            <summary>
            Function to return an image value.
            </summary>
            <returns>An image value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.SetValue(System.Boolean)">
            <summary>
            Function to set a boolean parameter value.
            </summary>
            <param name="value">A boolean value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.SetValue(System.Boolean[])">
            <summary>
            Function to set a boolean array parameter value.
            </summary>
            <param name="value">An array of boolean values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.SetValue(System.Single)">
            <summary>
            Function to set a floating point parameter value.
            </summary>
            <param name="value">A floating point value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.SetValue(System.Single[])">
            <summary>
            Function to set a floating point array parameter value.
            </summary>
            <param name="value">An array of floating point values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.SetValue(System.Int32)">
            <summary>
            Function to set an integer parameter value.
            </summary>
            <param name="value">An integer value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.SetValue(System.Int32[])">
            <summary>
            Function to set an integer array parameter value.
            </summary>
            <param name="value">An array of integer values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.SetValue(System.String)">
            <summary>
            Function to set a string parameter value.
            </summary>
            <param name="value">A string value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.SetValue(GorgonLibrary.Vector4D)">
            <summary>
            Function to set a 4D vector parameter value.
            </summary>
            <param name="value">A 4D vector value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.SetValue(GorgonLibrary.Vector4D[])">
            <summary>
            Function to set a 4D vector parameter array value.
            </summary>
            <param name="value">An array of 4D vector values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.SetValue(GorgonLibrary.Vector2D)">
            <summary>
            Function to set a 2D vector parameter value.
            </summary>
            <param name="value">A 2D vector value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.SetValue(GorgonLibrary.Vector2D[])">
            <summary>
            Function to set a 2D vector parameter array value.
            </summary>
            <param name="value">An array of 2D vector values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.SetValue(GorgonLibrary.Matrix)">
            <summary>
            Function to set a matrix value.
            </summary>
            <param name="value">A matrix value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.SetValue(GorgonLibrary.Matrix[])">
            <summary>
            Function to set an array of matrix values.
            </summary>
            <param name="value">An array of matrix values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.SetValue(GorgonLibrary.Matrix,System.Boolean)">
            <summary>
            Function to set a matrix value with option for transposed matrix.
            </summary>
            <param name="value">A matrix value.</param>
            <param name="transpose">TRUE to use transpose of the matrix, FALSE for standard matrix.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.SetValue(GorgonLibrary.Matrix[],System.Boolean)">
            <summary>
            Function to set a matrix value with option for transposed matrix.
            </summary>
            <param name="value">An array of matrix values.</param>
            <param name="transpose">TRUE to use transpose of the matrix, FALSE for standard matrix.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.SetValue(System.Drawing.Color)">
            <summary>
            Function to set a color parameter value
            </summary>
            <param name="value">A color value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.SetValue(System.Drawing.Color[])">
            <summary>
            Function to set an array of color parameter values
            </summary>
            <param name="value">An array of color values.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.SetValue(GorgonLibrary.Graphics.Image)">
            <summary>
            Function to set an image parameter value.
            </summary>
            <param name="image">Image to set.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.ShaderParameter.SetValue(GorgonLibrary.Graphics.RenderImage)">
            <summary>
            Function to set a render image parameter value.
            </summary>
            <param name="image">Render image to set.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderParameter.Handle">
            <summary>
            Property to return the handle for the parameter.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderParameter.ArrayLength">
            <summary>
            Property to return the size of an array parameter.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderParameter.ValueType">
            <summary>
            Property to return the type of the value.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderParameter.Owner">
            <summary>
            Property to return the owning shader for this parameter.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ShaderParameter.IsArray">
            <summary>
            Property to return whether this value is an array or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Properties.Resources.GorgonLogo3">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Properties.Resources.GorIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="T:GorgonLibrary.FileSystems.FileSystemPathList">
            <summary>
            Object representing a list of path paths.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemPathList.TransformPath(System.String)">
            <summary>
            Function to return a transformed path name.
            </summary>
            <param name="pathName">Name of the path to transform.</param>
            <returns>The transformed path name.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemPathList.RemoveItem(System.String)">
            <summary>
            Function to remove an object from the list by key.
            </summary>
            <param name="key">Key of the object to remove.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemPathList.RemoveItem(System.Int32)">
            <summary>
            Function to remove an object from the list by index.
            </summary>
            <param name="index">Index to remove at.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemPathList.ClearItems">
            <summary>
            Function to clear the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemPathList.Contains(System.String)">
            <summary>
            Function to return whether a key exists in the collection or not.
            </summary>
            <param name="key">Key of the object in the collection.</param>
            <returns>TRUE if the object exists, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemPathList.Rename(System.String,System.String)">
            <summary>
            Function to rename a path.
            </summary>
            <param name="oldName">Old name.</param>
            <param name="newName">New name.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemPathList.Add(System.String)">
            <summary>
            Function to add a path to the list.
            </summary>
            <param name="pathName">Pathname of the path to add.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemPathList.Add(GorgonLibrary.FileSystems.FileSystemPath)">
            <summary>
            Function to add an existing path to the list.
            </summary>
            <param name="path">Path to add.</param>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemPathList.#ctor(GorgonLibrary.FileSystems.FileSystemPath)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Owner of the path system path list.</param>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemPathList.Item(System.String)">
            <summary>
            Property to return the path with the specified key name.
            </summary>
        </member>
        <member name="T:GorgonLibrary.FileSystems.FileSystemFile">
            <summary>
            Object representing a file under the file system.
            </summary>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemFile.ValidFilename(System.String)">
            <summary>
            Function to determine if the filename is valid or not.
            </summary>
            <param name="fileName">File name to examine.</param>
            <returns>TRUE if valid, FALSE is not.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemFile.OpenStream">
            <summary>
            Function to open a file stream into the file object data.
            </summary>
            <returns>A stream pointing at the file object data.</returns>
        </member>
        <member name="M:GorgonLibrary.FileSystems.FileSystemFile.#ctor(GorgonLibrary.FileSystems.FileSystemPath,System.String,System.Byte[],System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Path that owns this file.</param>
            <param name="name">File name.</param>
            <param name="data">Data for the file.</param>
            <param name="originalSize">Original file size.</param>
            <param name="compressedSize">Compressed size if compressed.</param>
            <param name="dateTime">File create/update date and time.</param>
            <param name="encrypted">TRUE if encrypted, FALSE if not.</param>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemFile.DateTime">
            <summary>
            Property to set or return the file creation/update date and time.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemFile.Comment">
            <summary>
            Property to set or return the comment for the entry.
            </summary>
            <remarks>Has a maximum of 2048 characters.</remarks>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemFile.Data">
            <summary>
            Property to return the raw file data in bytes.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemFile.Offset">
            <summary>
            Property to set or return the offset of the file within a packed file system.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemFile.Size">
            <summary>
            Property to return the uncompressed size of the file in bytes.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemFile.CompressedSize">
            <summary>
            Property to return the size of the compressed file in bytes.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemFile.IsCompressed">
            <summary>
            Property to return whether or not a file is compressed.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemFile.IsEncrypted">
            <summary>
            Property to return whether or not a file is encrypted.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemFile.Filename">
            <summary>
            Property to return the name of the file.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemFile.Extension">
            <summary>
            Property to return the file extension.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemFile.Owner">
            <summary>
            Property to return the path that owns this file.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemFile.FullPath">
            <summary>
            Property to return the full path for the file.
            </summary>
        </member>
        <member name="P:GorgonLibrary.FileSystems.FileSystemFile.InvalidCharacters">
            <summary>
            Property to return the invalid characters for a filename.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ShaderCompileOptions">
            <summary>
            Enumeration containing shader compilation flags.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderCompileOptions.None">
            <summary>
            No optimization or options.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderCompileOptions.Debug">
            <summary>
            Debug mode.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderCompileOptions.SkipValidation">
            <summary>
            Instruct the compiler to skip optimization steps during code generation.
            Unless you are trying to isolate a problem in your code and you suspect
            the compiler, using this option is not recommended.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderCompileOptions.SkipOptimization">
            <summary>
            Do not validate the generated code against known capabilities and constraints.
            This option is recommended only when compiling shaders that are known to
            work (that is, shaders that have compiled before without this option). Shaders
            are always validated by the runtime before they are set to the device.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderCompileOptions.PackMatrixRowMajor">
            <summary>
            Unless explicitly specified, matrices will be packed in row-major order (each
            vector will be in a single row) when passed to or from the shader.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderCompileOptions.PackMatrixColumnMajor">
            <summary>
            Unless explicitly specified, matrices will be packed in column-major order
            (each vector will be in a single column) when passed to and from the shader.
            This is generally more efficient because it allows vector-matrix multiplication
            to be performed using a series of dot products.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderCompileOptions.PartialPrecision">
            <summary>
            Force all computations in the resulting shader to occur at partial precision
            This may result in faster evaluation of shaders on some hardware.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderCompileOptions.ForceVSSoftwareNoOpt">
            <summary>
            Force the compiler to compile against the next highest available software
            target for vertex shaders.  This flag also turns optimizations off and debugging
            on.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderCompileOptions.ForcePSSoftwareNoOpt">
            <summary>
            Force the compiler to compile against the next highest available software
            target for pixel shaders.  This flag also turns optimizations off and debugging
            on.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderCompileOptions.NoPreshader">
            <summary>
            Disables preshaders. The compiler will not pull out static expressions for
            evaluation on the host CPU.  Additionally, the compiler will not loft any
            expressions when compiling stand-alone functions.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderCompileOptions.AvoidFlowControl">
            <summary>
            This is a hint to the compiler to avoid using flow-control instructions.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderCompileOptions.PreferFlowControl">
            <summary>
            This is a hint to the compiler to prefer using flow-control instructions.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderCompileOptions.IeeeStrictness">
            <summary>
            Disable optimizations that may cause the output of a compiled shader program
            to differ from the output of a program compiled with the DirectX 9 shader
            compiler due to small precision erros in floating point math.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderCompileOptions.OptimizationLevel0">
            <summary>
            Lowest optimization level. May produce slower code but will do so more quickly.
            This may be useful in a highly iterative shader development cycle.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderCompileOptions.OptimizationLevel3">
            <summary>
            Highest optimization level. Will produce best possible code but may take
            significantly longer to do so.  This will be useful for final builds of an
            application where performance is the most important factor.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderCompileOptions.OptimizationLevel2">
            <summary>
            Second highest optimization level.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ShaderParameterType">
            <summary>
            Enumeration containing shader parameter types.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderParameterType.Boolean">
            <summary>
            Boolean value.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderParameterType.Float">
            <summary>
            Floating point value.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderParameterType.Integer">
            <summary>
            Integer value.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderParameterType.Image">
            <summary>
            Image.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderParameterType.RenderImage">
            <summary>
            Render image.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderParameterType.Color">
            <summary>
            Color value.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderParameterType.Matrix">
            <summary>
            Matrix value.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderParameterType.Vector4D">
            <summary>
            4 dimensional vector.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderParameterType.String">
            <summary>
            String value.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderParameterType.Unknown">
            <summary>
            Unknown type.
            </summary>
        </member>
    </members>
</doc>
